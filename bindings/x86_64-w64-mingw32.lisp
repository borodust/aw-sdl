;; Generated by :claw at 2022-10-09T12:59:26.584264Z
(uiop:define-package :%sdl (:use))
(uiop:define-package :aw-sdl-bindings~pristine (:use :cl))
(common-lisp:in-package :aw-sdl-bindings~pristine)

(defparameter %sdl::+rw-seek-cur+ 1)

(defparameter %sdl::+rw-seek-end+ 2)

(defparameter %sdl::+rw-seek-set+ 0)

(defparameter %sdl::+call+ nil)

(defparameter %sdl::+k-scancode-mask+ 1073741824)

(defparameter %sdl::+main-declspec+ nil)

(defparameter %sdl::+alpha-opaque+ 255)

(defparameter %sdl::+alpha-transparent+ 0)

(defparameter %sdl::+assembly-routines+ 1)

(defparameter %sdl::+assert-level+ 2)

(defparameter %sdl::+audiocvt-max-filters+ 9)

(defparameter %sdl::+audiocvt-packed+ nil)

(defparameter %sdl::+audio-allow-any-change+ 15)

(defparameter %sdl::+audio-allow-channels-change+ 4)

(defparameter %sdl::+audio-allow-format-change+ 2)

(defparameter %sdl::+audio-allow-frequency-change+ 1)

(defparameter %sdl::+audio-allow-samples-change+ 8)

(defparameter %sdl::+audio-driver-disk+ 1)

(defparameter %sdl::+audio-driver-dsound+ 1)

(defparameter %sdl::+audio-driver-dummy+ 1)

(defparameter %sdl::+audio-driver-wasapi+ 1)

(defparameter %sdl::+audio-driver-winmm+ 1)

(defparameter %sdl::+audio-mask-bitsize+ 255)

(defparameter %sdl::+audio-mask-datatype+ 256)

(defparameter %sdl::+audio-mask-endian+ 4096)

(defparameter %sdl::+audio-mask-signed+ 32768)

(defparameter %sdl::+big-endian+ 4321)

(defparameter %sdl::+button-left+ 1)

(defparameter %sdl::+button-lmask+ 1)

(defparameter %sdl::+button-middle+ 2)

(defparameter %sdl::+button-mmask+ 2)

(defparameter %sdl::+button-right+ 3)

(defparameter %sdl::+button-rmask+ 4)

(defparameter %sdl::+button-x1+ 4)

(defparameter %sdl::+button-x1mask+ 8)

(defparameter %sdl::+button-x2+ 5)

(defparameter %sdl::+button-x2mask+ 16)

(defparameter %sdl::+byteorder+ 1234)

(defparameter %sdl::+blit-scaled+ nil)

(defparameter %sdl::+blit-surface+ nil)

(defparameter %sdl::+cacheline-size+ 128)

(defparameter %sdl::+compiledversion+ 4401)

(defparameter %sdl::+colour+ nil)

(defparameter %sdl::+deprecated+ nil)

(defparameter %sdl::+disable+ 0)

(defparameter %sdl::+dontfree+ 4)

(defparameter %sdl::+enable+ 1)

(defparameter %sdl::+fallthrough+ nil)

(defparameter %sdl::+file+ "/tmp/tmp5UCVQVRR-tmp.h")

(defparameter %sdl::+filesystem-windows+ 1)

(defparameter %sdl::+floatwordorder+ 1234)

(defparameter %sdl::+flt-epsilon+ 1.1920928955078125D-7)

(defparameter %sdl::+force-inline+ nil)

(defparameter %sdl::+function+ nil)

(defparameter %sdl::+haptic-autocenter+ 8192)

(defparameter %sdl::+haptic-cartesian+ 1)

(defparameter %sdl::+haptic-constant+ 1)

(defparameter %sdl::+haptic-custom+ 2048)

(defparameter %sdl::+haptic-damper+ 256)

(defparameter %sdl::+haptic-dinput+ 1)

(defparameter %sdl::+haptic-friction+ 1024)

(defparameter %sdl::+haptic-gain+ 4096)

(defparameter %sdl::+haptic-inertia+ 512)

(defparameter %sdl::+haptic-infinity+ 4294967295)

(defparameter %sdl::+haptic-leftright+ 4)

(defparameter %sdl::+haptic-pause+ 32768)

(defparameter %sdl::+haptic-polar+ 0)

(defparameter %sdl::+haptic-ramp+ 64)

(defparameter %sdl::+haptic-sawtoothdown+ 32)

(defparameter %sdl::+haptic-sawtoothup+ 16)

(defparameter %sdl::+haptic-sine+ 2)

(defparameter %sdl::+haptic-spherical+ 2)

(defparameter %sdl::+haptic-spring+ 128)

(defparameter %sdl::+haptic-status+ 16384)

(defparameter %sdl::+haptic-steering-axis+ 3)

(defparameter %sdl::+haptic-triangle+ 8)

(defparameter %sdl::+haptic-xinput+ 1)

(defparameter %sdl::+hat-centered+ 0)

(defparameter %sdl::+hat-down+ 4)

(defparameter %sdl::+hat-left+ 8)

(defparameter %sdl::+hat-leftdown+ 12)

(defparameter %sdl::+hat-leftup+ 9)

(defparameter %sdl::+hat-right+ 2)

(defparameter %sdl::+hat-rightdown+ 6)

(defparameter %sdl::+hat-rightup+ 3)

(defparameter %sdl::+hat-up+ 1)

(defparameter %sdl::+hint-accelerometer-as-joystick+ "SDL_ACCELEROMETER_AS_JOYSTICK")

(defparameter %sdl::+hint-allow-alt-tab-while-grabbed+ "SDL_ALLOW_ALT_TAB_WHILE_GRABBED")

(defparameter %sdl::+hint-allow-topmost+ "SDL_ALLOW_TOPMOST")

(defparameter %sdl::+hint-android-apk-expansion-main-file-version+ "SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION")

(defparameter %sdl::+hint-android-apk-expansion-patch-file-version+ "SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION")

(defparameter %sdl::+hint-android-block-on-pause+ "SDL_ANDROID_BLOCK_ON_PAUSE")

(defparameter %sdl::+hint-android-block-on-pause-pauseaudio+ "SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO")

(defparameter %sdl::+hint-android-trap-back-button+ "SDL_ANDROID_TRAP_BACK_BUTTON")

(defparameter %sdl::+hint-apple-tv-controller-ui-events+ "SDL_APPLE_TV_CONTROLLER_UI_EVENTS")

(defparameter %sdl::+hint-apple-tv-remote-allow-rotation+ "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION")

(defparameter %sdl::+hint-app-name+ "SDL_APP_NAME")

(defparameter %sdl::+hint-audiodriver+ "SDL_AUDIODRIVER")

(defparameter %sdl::+hint-audio-category+ "SDL_AUDIO_CATEGORY")

(defparameter %sdl::+hint-audio-device-app-name+ "SDL_AUDIO_DEVICE_APP_NAME")

(defparameter %sdl::+hint-audio-device-stream-name+ "SDL_AUDIO_DEVICE_STREAM_NAME")

(defparameter %sdl::+hint-audio-device-stream-role+ "SDL_AUDIO_DEVICE_STREAM_ROLE")

(defparameter %sdl::+hint-audio-include-monitors+ "SDL_AUDIO_INCLUDE_MONITORS")

(defparameter %sdl::+hint-audio-resampling-mode+ "SDL_AUDIO_RESAMPLING_MODE")

(defparameter %sdl::+hint-auto-update-joysticks+ "SDL_AUTO_UPDATE_JOYSTICKS")

(defparameter %sdl::+hint-auto-update-sensors+ "SDL_AUTO_UPDATE_SENSORS")

(defparameter %sdl::+hint-bmp-save-legacy-format+ "SDL_BMP_SAVE_LEGACY_FORMAT")

(defparameter %sdl::+hint-directinput-enabled+ "SDL_DIRECTINPUT_ENABLED")

(defparameter %sdl::+hint-display-usable-bounds+ "SDL_DISPLAY_USABLE_BOUNDS")

(defparameter %sdl::+hint-emscripten-asyncify+ "SDL_EMSCRIPTEN_ASYNCIFY")

(defparameter %sdl::+hint-emscripten-keyboard-element+ "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT")

(defparameter %sdl::+hint-enable-steam-controllers+ "SDL_ENABLE_STEAM_CONTROLLERS")

(defparameter %sdl::+hint-event-logging+ "SDL_EVENT_LOGGING")

(defparameter %sdl::+hint-force-raisewindow+ "SDL_HINT_FORCE_RAISEWINDOW")

(defparameter %sdl::+hint-framebuffer-acceleration+ "SDL_FRAMEBUFFER_ACCELERATION")

(defparameter %sdl::+hint-gamecontrollerconfig+ "SDL_GAMECONTROLLERCONFIG")

(defparameter %sdl::+hint-gamecontrollerconfig-file+ "SDL_GAMECONTROLLERCONFIG_FILE")

(defparameter %sdl::+hint-gamecontrollertype+ "SDL_GAMECONTROLLERTYPE")

(defparameter %sdl::+hint-gamecontroller-ignore-devices+ "SDL_GAMECONTROLLER_IGNORE_DEVICES")

(defparameter %sdl::+hint-gamecontroller-ignore-devices-except+ "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT")

(defparameter %sdl::+hint-gamecontroller-use-button-labels+ "SDL_GAMECONTROLLER_USE_BUTTON_LABELS")

(defparameter %sdl::+hint-grab-keyboard+ "SDL_GRAB_KEYBOARD")

(defparameter %sdl::+hint-idle-timer-disabled+ "SDL_IOS_IDLE_TIMER_DISABLED")

(defparameter %sdl::+hint-ime-internal-editing+ "SDL_IME_INTERNAL_EDITING")

(defparameter %sdl::+hint-ime-show-ui+ "SDL_IME_SHOW_UI")

(defparameter %sdl::+hint-ime-support-extended-text+ "SDL_IME_SUPPORT_EXTENDED_TEXT")

(defparameter %sdl::+hint-ios-hide-home-indicator+ "SDL_IOS_HIDE_HOME_INDICATOR")

(defparameter %sdl::+hint-joystick-allow-background-events+ "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS")

(defparameter %sdl::+hint-joystick-device+ "SDL_JOYSTICK_DEVICE")

(defparameter %sdl::+hint-joystick-gamecube-rumble-brake+ "SDL_JOYSTICK_GAMECUBE_RUMBLE_BRAKE")

(defparameter %sdl::+hint-joystick-hidapi+ "SDL_JOYSTICK_HIDAPI")

(defparameter %sdl::+hint-joystick-hidapi-combine-joy-cons+ "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS")

(defparameter %sdl::+hint-joystick-hidapi-gamecube+ "SDL_JOYSTICK_HIDAPI_GAMECUBE")

(defparameter %sdl::+hint-joystick-hidapi-joycon-home-led+ "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED")

(defparameter %sdl::+hint-joystick-hidapi-joy-cons+ "SDL_JOYSTICK_HIDAPI_JOY_CONS")

(defparameter %sdl::+hint-joystick-hidapi-luna+ "SDL_JOYSTICK_HIDAPI_LUNA")

(defparameter %sdl::+hint-joystick-hidapi-nintendo-classic+ "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC")

(defparameter %sdl::+hint-joystick-hidapi-ps4+ "SDL_JOYSTICK_HIDAPI_PS4")

(defparameter %sdl::+hint-joystick-hidapi-ps4-rumble+ "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE")

(defparameter %sdl::+hint-joystick-hidapi-ps5+ "SDL_JOYSTICK_HIDAPI_PS5")

(defparameter %sdl::+hint-joystick-hidapi-ps5-player-led+ "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED")

(defparameter %sdl::+hint-joystick-hidapi-ps5-rumble+ "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE")

(defparameter %sdl::+hint-joystick-hidapi-shield+ "SDL_JOYSTICK_HIDAPI_SHIELD")

(defparameter %sdl::+hint-joystick-hidapi-stadia+ "SDL_JOYSTICK_HIDAPI_STADIA")

(defparameter %sdl::+hint-joystick-hidapi-steam+ "SDL_JOYSTICK_HIDAPI_STEAM")

(defparameter %sdl::+hint-joystick-hidapi-switch+ "SDL_JOYSTICK_HIDAPI_SWITCH")

(defparameter %sdl::+hint-joystick-hidapi-switch-home-led+ "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED")

(defparameter %sdl::+hint-joystick-hidapi-switch-player-led+ "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED")

(defparameter %sdl::+hint-joystick-hidapi-xbox+ "SDL_JOYSTICK_HIDAPI_XBOX")

(defparameter %sdl::+hint-joystick-rawinput+ "SDL_JOYSTICK_RAWINPUT")

(defparameter %sdl::+hint-joystick-rawinput-correlate-xinput+ "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT")

(defparameter %sdl::+hint-joystick-rog-chakram+ "SDL_JOYSTICK_ROG_CHAKRAM")

(defparameter %sdl::+hint-joystick-thread+ "SDL_JOYSTICK_THREAD")

(defparameter %sdl::+hint-kmsdrm-device-index+ "SDL_KMSDRM_DEVICE_INDEX")

(defparameter %sdl::+hint-kmsdrm-require-drm-master+ "SDL_KMSDRM_REQUIRE_DRM_MASTER")

(defparameter %sdl::+hint-linux-digital-hats+ "SDL_LINUX_DIGITAL_HATS")

(defparameter %sdl::+hint-linux-hat-deadzones+ "SDL_LINUX_HAT_DEADZONES")

(defparameter %sdl::+hint-linux-joystick-classic+ "SDL_LINUX_JOYSTICK_CLASSIC")

(defparameter %sdl::+hint-linux-joystick-deadzones+ "SDL_LINUX_JOYSTICK_DEADZONES")

(defparameter %sdl::+hint-mac-background-app+ "SDL_MAC_BACKGROUND_APP")

(defparameter %sdl::+hint-mac-ctrl-click-emulate-right-click+ "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK")

(defparameter %sdl::+hint-mac-opengl-async-dispatch+ "SDL_MAC_OPENGL_ASYNC_DISPATCH")

(defparameter %sdl::+hint-mouse-auto-capture+ "SDL_MOUSE_AUTO_CAPTURE")

(defparameter %sdl::+hint-mouse-double-click-radius+ "SDL_MOUSE_DOUBLE_CLICK_RADIUS")

(defparameter %sdl::+hint-mouse-double-click-time+ "SDL_MOUSE_DOUBLE_CLICK_TIME")

(defparameter %sdl::+hint-mouse-focus-clickthrough+ "SDL_MOUSE_FOCUS_CLICKTHROUGH")

(defparameter %sdl::+hint-mouse-normal-speed-scale+ "SDL_MOUSE_NORMAL_SPEED_SCALE")

(defparameter %sdl::+hint-mouse-relative-mode-center+ "SDL_MOUSE_RELATIVE_MODE_CENTER")

(defparameter %sdl::+hint-mouse-relative-mode-warp+ "SDL_MOUSE_RELATIVE_MODE_WARP")

(defparameter %sdl::+hint-mouse-relative-scaling+ "SDL_MOUSE_RELATIVE_SCALING")

(defparameter %sdl::+hint-mouse-relative-speed-scale+ "SDL_MOUSE_RELATIVE_SPEED_SCALE")

(defparameter %sdl::+hint-mouse-relative-warp-motion+ "SDL_MOUSE_RELATIVE_WARP_MOTION")

(defparameter %sdl::+hint-mouse-touch-events+ "SDL_MOUSE_TOUCH_EVENTS")

(defparameter %sdl::+hint-no-signal-handlers+ "SDL_NO_SIGNAL_HANDLERS")

(defparameter %sdl::+hint-opengl-es-driver+ "SDL_OPENGL_ES_DRIVER")

(defparameter %sdl::+hint-orientations+ "SDL_IOS_ORIENTATIONS")

(defparameter %sdl::+hint-poll-sentinel+ "SDL_POLL_SENTINEL")

(defparameter %sdl::+hint-preferred-locales+ "SDL_PREFERRED_LOCALES")

(defparameter %sdl::+hint-qtwayland-content-orientation+ "SDL_QTWAYLAND_CONTENT_ORIENTATION")

(defparameter %sdl::+hint-qtwayland-window-flags+ "SDL_QTWAYLAND_WINDOW_FLAGS")

(defparameter %sdl::+hint-quit-on-last-window-close+ "SDL_QUIT_ON_LAST_WINDOW_CLOSE")

(defparameter %sdl::+hint-render-batching+ "SDL_RENDER_BATCHING")

(defparameter %sdl::+hint-render-direct3d11-debug+ "SDL_RENDER_DIRECT3D11_DEBUG")

(defparameter %sdl::+hint-render-direct3d-threadsafe+ "SDL_RENDER_DIRECT3D_THREADSAFE")

(defparameter %sdl::+hint-render-driver+ "SDL_RENDER_DRIVER")

(defparameter %sdl::+hint-render-line-method+ "SDL_RENDER_LINE_METHOD")

(defparameter %sdl::+hint-render-logical-size-mode+ "SDL_RENDER_LOGICAL_SIZE_MODE")

(defparameter %sdl::+hint-render-opengl-shaders+ "SDL_RENDER_OPENGL_SHADERS")

(defparameter %sdl::+hint-render-scale-quality+ "SDL_RENDER_SCALE_QUALITY")

(defparameter %sdl::+hint-render-vsync+ "SDL_RENDER_VSYNC")

(defparameter %sdl::+hint-return-key-hides-ime+ "SDL_RETURN_KEY_HIDES_IME")

(defparameter %sdl::+hint-rpi-video-layer+ "SDL_RPI_VIDEO_LAYER")

(defparameter %sdl::+hint-screensaver-inhibit-activity-name+ "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME")

(defparameter %sdl::+hint-thread-force-realtime-time-critical+ "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL")

(defparameter %sdl::+hint-thread-priority-policy+ "SDL_THREAD_PRIORITY_POLICY")

(defparameter %sdl::+hint-thread-stack-size+ "SDL_THREAD_STACK_SIZE")

(defparameter %sdl::+hint-timer-resolution+ "SDL_TIMER_RESOLUTION")

(defparameter %sdl::+hint-touch-mouse-events+ "SDL_TOUCH_MOUSE_EVENTS")

(defparameter %sdl::+hint-trackpad-is-touch-only+ "SDL_TRACKPAD_IS_TOUCH_ONLY")

(defparameter %sdl::+hint-tv-remote-as-joystick+ "SDL_TV_REMOTE_AS_JOYSTICK")

(defparameter %sdl::+hint-videodriver+ "SDL_VIDEODRIVER")

(defparameter %sdl::+hint-video-allow-screensaver+ "SDL_VIDEO_ALLOW_SCREENSAVER")

(defparameter %sdl::+hint-video-double-buffer+ "SDL_VIDEO_DOUBLE_BUFFER")

(defparameter %sdl::+hint-video-egl-allow-transparency+ "SDL_VIDEO_EGL_ALLOW_TRANSPARENCY")

(defparameter %sdl::+hint-video-external-context+ "SDL_VIDEO_EXTERNAL_CONTEXT")

(defparameter %sdl::+hint-video-foreign-window-opengl+ "SDL_VIDEO_FOREIGN_WINDOW_OPENGL")

(defparameter %sdl::+hint-video-foreign-window-vulkan+ "SDL_VIDEO_FOREIGN_WINDOW_VULKAN")

(defparameter %sdl::+hint-video-highdpi-disabled+ "SDL_VIDEO_HIGHDPI_DISABLED")

(defparameter %sdl::+hint-video-mac-fullscreen-spaces+ "SDL_VIDEO_MAC_FULLSCREEN_SPACES")

(defparameter %sdl::+hint-video-minimize-on-focus-loss+ "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS")

(defparameter %sdl::+hint-video-wayland-allow-libdecor+ "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR")

(defparameter %sdl::+hint-video-wayland-mode-emulation+ "SDL_VIDEO_WAYLAND_MODE_EMULATION")

(defparameter %sdl::+hint-video-wayland-prefer-libdecor+ "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR")

(defparameter %sdl::+hint-video-window-share-pixel-format+ "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT")

(defparameter %sdl::+hint-video-win-d3dcompiler+ "SDL_VIDEO_WIN_D3DCOMPILER")

(defparameter %sdl::+hint-video-x11-force-egl+ "SDL_VIDEO_X11_FORCE_EGL")

(defparameter %sdl::+hint-video-x11-net-wm-bypass-compositor+ "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR")

(defparameter %sdl::+hint-video-x11-net-wm-ping+ "SDL_VIDEO_X11_NET_WM_PING")

(defparameter %sdl::+hint-video-x11-window-visualid+ "SDL_VIDEO_X11_WINDOW_VISUALID")

(defparameter %sdl::+hint-video-x11-xinerama+ "SDL_VIDEO_X11_XINERAMA")

(defparameter %sdl::+hint-video-x11-xrandr+ "SDL_VIDEO_X11_XRANDR")

(defparameter %sdl::+hint-video-x11-xvidmode+ "SDL_VIDEO_X11_XVIDMODE")

(defparameter %sdl::+hint-vita-touch-mouse-device+ "SDL_HINT_VITA_TOUCH_MOUSE_DEVICE")

(defparameter %sdl::+hint-wave-fact-chunk+ "SDL_WAVE_FACT_CHUNK")

(defparameter %sdl::+hint-wave-riff-chunk-size+ "SDL_WAVE_RIFF_CHUNK_SIZE")

(defparameter %sdl::+hint-wave-truncation+ "SDL_WAVE_TRUNCATION")

(defparameter %sdl::+hint-windows-disable-thread-naming+ "SDL_WINDOWS_DISABLE_THREAD_NAMING")

(defparameter %sdl::+hint-windows-dpi-awareness+ "SDL_WINDOWS_DPI_AWARENESS")

(defparameter %sdl::+hint-windows-dpi-scaling+ "SDL_WINDOWS_DPI_SCALING")

(defparameter %sdl::+hint-windows-enable-messageloop+ "SDL_WINDOWS_ENABLE_MESSAGELOOP")

(defparameter %sdl::+hint-windows-force-mutex-critical-sections+ "SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS")

(defparameter %sdl::+hint-windows-force-semaphore-kernel+ "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL")

(defparameter %sdl::+hint-windows-intresource-icon+ "SDL_WINDOWS_INTRESOURCE_ICON")

(defparameter %sdl::+hint-windows-intresource-icon-small+ "SDL_WINDOWS_INTRESOURCE_ICON_SMALL")

(defparameter %sdl::+hint-windows-no-close-on-alt-f4+ "SDL_WINDOWS_NO_CLOSE_ON_ALT_F4")

(defparameter %sdl::+hint-windows-use-d3d9ex+ "SDL_WINDOWS_USE_D3D9EX")

(defparameter %sdl::+hint-window-frame-usable-while-cursor-hidden+ "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN")

(defparameter %sdl::+hint-window-no-activation-when-shown+ "SDL_WINDOW_NO_ACTIVATION_WHEN_SHOWN")

(defparameter %sdl::+hint-winrt-handle-back-button+ "SDL_WINRT_HANDLE_BACK_BUTTON")

(defparameter %sdl::+hint-winrt-privacy-policy-label+ "SDL_WINRT_PRIVACY_POLICY_LABEL")

(defparameter %sdl::+hint-winrt-privacy-policy-url+ "SDL_WINRT_PRIVACY_POLICY_URL")

(defparameter %sdl::+hint-x11-force-override-redirect+ "SDL_X11_FORCE_OVERRIDE_REDIRECT")

(defparameter %sdl::+hint-x11-window-type+ "SDL_X11_WINDOW_TYPE")

(defparameter %sdl::+hint-xinput-enabled+ "SDL_XINPUT_ENABLED")

(defparameter %sdl::+hint-xinput-use-old-joystick-mapping+ "SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING")

(defparameter %sdl::+iconv-e2big+ -2)

(defparameter %sdl::+iconv-eilseq+ -3)

(defparameter %sdl::+iconv-einval+ -4)

(defparameter %sdl::+iconv-error+ -1)

(defparameter %sdl::+ignore+ 0)

(defparameter %sdl::+init-audio+ 16)

(defparameter %sdl::+init-events+ 16384)

(defparameter %sdl::+init-everything+ 62001)

(defparameter %sdl::+init-gamecontroller+ 8192)

(defparameter %sdl::+init-haptic+ 4096)

(defparameter %sdl::+init-joystick+ 512)

(defparameter %sdl::+init-noparachute+ 1048576)

(defparameter %sdl::+init-sensor+ 32768)

(defparameter %sdl::+init-timer+ 1)

(defparameter %sdl::+init-video+ 32)

(defparameter %sdl::+inline+ nil)

(defparameter %sdl::+invalid-shape-argument+ -2)

(defparameter %sdl::+iphone-max-gforce+ 5.0D0)

(defparameter %sdl::+joystick-axis-max+ 32767)

(defparameter %sdl::+joystick-axis-min+ -32768)

(defparameter %sdl::+joystick-dinput+ 1)

(defparameter %sdl::+joystick-hidapi+ 1)

(defparameter %sdl::+joystick-virtual+ 1)

(defparameter %sdl::+joystick-xinput+ 1)

(defparameter %sdl::+lil-endian+ 1234)

(defparameter %sdl::+line+ 351)

(defparameter %sdl::+loadso-windows+ 1)

(defparameter %sdl::+main-handled+ 1)

(defparameter %sdl::+major-version+ 2)

(defparameter %sdl::+max-log-message+ 4096)

(defparameter %sdl::+max-sint16+ 32767)

(defparameter %sdl::+max-sint32+ 2147483647)

(defparameter %sdl::+max-sint64+ 9223372036854775807)

(defparameter %sdl::+max-sint8+ 127)

(defparameter %sdl::+max-uint16+ 65535)

(defparameter %sdl::+max-uint32+ 4294967295)

(defparameter %sdl::+max-uint64+ -1)

(defparameter %sdl::+max-uint8+ 255)

(defparameter %sdl::+metalview-tag+ 255)

(defparameter %sdl::+minor-version+ 24)

(defparameter %sdl::+min-sint16+ -32768)

(defparameter %sdl::+min-sint32+ -2147483648)

(defparameter %sdl::+min-sint64+ -9223372036854775808)

(defparameter %sdl::+min-sint8+ -128)

(defparameter %sdl::+min-uint16+ 0)

(defparameter %sdl::+min-uint32+ 0)

(defparameter %sdl::+min-uint64+ 0)

(defparameter %sdl::+min-uint8+ 0)

(defparameter %sdl::+mix-maxvolume+ 128)

(defparameter %sdl::+mouse-touchid+ -1)

(defparameter %sdl::+mutex-maxwait+ 4294967295)

(defparameter %sdl::+mutex-timedout+ 1)

(defparameter %sdl::+nonshapeable-window+ -1)

(defparameter %sdl::+noreturn+ nil)

(defparameter %sdl::+null-while-loop-condition+ 0)

(defparameter %sdl::+passed-beginthread-endthread+ nil)

(defparameter %sdl::+patchlevel+ 1)

(defparameter %sdl::+power-windows+ 1)

(defparameter %sdl::+prealloc+ 1)

(defparameter %sdl::+pressed+ 1)

(defparameter %sdl::+printf-format-string+ nil)

(defparameter %sdl::+prix32+ "X")

(defparameter %sdl::+prix64+ "I64X")

(defparameter %sdl::+pr-is32+ "d")

(defparameter %sdl::+pr-is64+ "I64d")

(defparameter %sdl::+pr-iu32+ "u")

(defparameter %sdl::+pr-iu64+ "I64u")

(defparameter %sdl::+pr-ix32+ "x")

(defparameter %sdl::+pr-ix64+ "I64x")

(defparameter %sdl::+query+ -1)

(defparameter %sdl::+released+ 0)

(defparameter %sdl::+rleaccel+ 2)

(defparameter %sdl::+rwops-jnifile+ 3)

(defparameter %sdl::+rwops-memory+ 4)

(defparameter %sdl::+rwops-memory-ro+ 5)

(defparameter %sdl::+rwops-stdfile+ 2)

(defparameter %sdl::+rwops-unknown+ 0)

(defparameter %sdl::+rwops-winfile+ 1)

(defparameter %sdl::+scanf-format-string+ nil)

(defparameter %sdl::+sensor-windows+ 1)

(defparameter %sdl::+simd-aligned+ 8)

(defparameter %sdl::+size-max+ -1)

(defparameter %sdl::+standard-gravity+ 9.806650161743164D0)

(defparameter %sdl::+swsurface+ 0)

(defparameter %sdl::+texteditingevent-text-size+ 32)

(defparameter %sdl::+textinputevent-text-size+ 32)

(defparameter %sdl::+thread-windows+ 1)

(defparameter %sdl::+timer-windows+ 1)

(defparameter %sdl::+touch-mouseid+ 4294967295)

(defparameter %sdl::+unused+ nil)

(defparameter %sdl::+video-driver-dummy+ 1)

(defparameter %sdl::+video-driver-windows+ 1)

(defparameter %sdl::+video-opengl+ 1)

(defparameter %sdl::+video-opengl-egl+ 1)

(defparameter %sdl::+video-opengl-es2+ 1)

(defparameter %sdl::+video-opengl-wgl+ 1)

(defparameter %sdl::+video-render-d3d+ 1)

(defparameter %sdl::+video-render-d3d11+ 1)

(defparameter %sdl::+video-render-ogl+ 1)

(defparameter %sdl::+video-render-ogl-es2+ 1)

(defparameter %sdl::+video-vulkan+ 1)

(defparameter %sdl::+virtual-joystick-desc-version+ 1)

(defparameter %sdl::+windowpos-centered+ 805240832)

(defparameter %sdl::+windowpos-centered-mask+ 805240832)

(defparameter %sdl::+windowpos-undefined+ 536805376)

(defparameter %sdl::+windowpos-undefined-mask+ 536805376)

(defparameter %sdl::+window-lacks-shape+ -3)

(defparameter %sdl::+assert-data+ nil)

(defparameter %sdl::+assert-state+ nil)

(defparameter %sdl::+beginthread+ nil)

(defparameter %sdl::+endthread+ nil)

(defparameter %sdl::+actctx-compatibility-element-type-unknown+ 0)

(defparameter %sdl::+actctx-compatibility-element-type-os+ 1)

(defparameter %sdl::+actctx-compatibility-element-type-mitigation+ 2)

(defparameter %sdl::+actctx-run-level-unspecified+ 0)

(defparameter %sdl::+actctx-run-level-as-invoker+ 1)

(defparameter %sdl::+actctx-run-level-highest-available+ 2)

(defparameter %sdl::+actctx-run-level-require-admin+ 3)

(defparameter %sdl::+actctx-run-level-numbers+ 4)

(defparameter %sdl::+unspecified-compartment-id+ 0)

(defparameter %sdl::+default-compartment-id+ 1)

(defparameter %sdl::+displayconfig-device-info-get-source-name+ 1)

(defparameter %sdl::+displayconfig-device-info-get-target-name+ 2)

(defparameter %sdl::+displayconfig-device-info-get-target-preferred-mode+ 3)

(defparameter %sdl::+displayconfig-device-info-get-adapter-name+ 4)

(defparameter %sdl::+displayconfig-device-info-set-target-persistence+ 5)

(defparameter %sdl::+displayconfig-device-info-get-target-base-type+ 6)

(defparameter %sdl::+displayconfig-device-info-get-support-virtual-resolution+ 7)

(defparameter %sdl::+displayconfig-device-info-set-support-virtual-resolution+ 8)

(defparameter %sdl::+displayconfig-device-info-get-advanced-color-info+ 9)

(defparameter %sdl::+displayconfig-device-info-set-advanced-color-state+ 10)

(defparameter %sdl::+displayconfig-device-info-get-sdr-white-level+ 11)

(defparameter %sdl::+displayconfig-device-info-force-uint32+ 4294967295)

(defparameter %sdl::+displayconfig-mode-info-type-source+ 1)

(defparameter %sdl::+displayconfig-mode-info-type-target+ 2)

(defparameter %sdl::+displayconfig-mode-info-type-desktop-image+ 3)

(defparameter %sdl::+displayconfig-mode-info-type-force-uint32+ 4294967295)

(defparameter %sdl::+displayconfig-pixelformat-8bpp+ 1)

(defparameter %sdl::+displayconfig-pixelformat-16bpp+ 2)

(defparameter %sdl::+displayconfig-pixelformat-24bpp+ 3)

(defparameter %sdl::+displayconfig-pixelformat-32bpp+ 4)

(defparameter %sdl::+displayconfig-pixelformat-nongdi+ 5)

(defparameter %sdl::+displayconfig-pixelformat-force-uint32+ 4294967295)

(defparameter %sdl::+displayconfig-rotation-identity+ 1)

(defparameter %sdl::+displayconfig-rotation-rotate90+ 2)

(defparameter %sdl::+displayconfig-rotation-rotate180+ 3)

(defparameter %sdl::+displayconfig-rotation-rotate270+ 4)

(defparameter %sdl::+displayconfig-rotation-force-uint32+ 4294967295)

(defparameter %sdl::+displayconfig-scaling-identity+ 1)

(defparameter %sdl::+displayconfig-scaling-centered+ 2)

(defparameter %sdl::+displayconfig-scaling-stretched+ 3)

(defparameter %sdl::+displayconfig-scaling-aspectratiocenteredmax+ 4)

(defparameter %sdl::+displayconfig-scaling-custom+ 5)

(defparameter %sdl::+displayconfig-scaling-preferred+ 128)

(defparameter %sdl::+displayconfig-scaling-force-uint32+ 4294967295)

(defparameter %sdl::+displayconfig-scanline-ordering-unspecified+ 0)

(defparameter %sdl::+displayconfig-scanline-ordering-progressive+ 1)

(defparameter %sdl::+displayconfig-scanline-ordering-interlaced+ 2)

(defparameter %sdl::+displayconfig-scanline-ordering-interlaced-upperfieldfirst+ 2)

(defparameter %sdl::+displayconfig-scanline-ordering-interlaced-lowerfieldfirst+ 3)

(defparameter %sdl::+displayconfig-scanline-ordering-force-uint32+ 4294967295)

(defparameter %sdl::+displayconfig-topology-internal+ 1)

(defparameter %sdl::+displayconfig-topology-clone+ 2)

(defparameter %sdl::+displayconfig-topology-extend+ 4)

(defparameter %sdl::+displayconfig-topology-external+ 8)

(defparameter %sdl::+displayconfig-topology-force-uint32+ 4294967295)

(defparameter %sdl::+displayconfig-output-technology-other+ -1)

(defparameter %sdl::+displayconfig-output-technology-hd15+ 0)

(defparameter %sdl::+displayconfig-output-technology-svideo+ 1)

(defparameter %sdl::+displayconfig-output-technology-composite-video+ 2)

(defparameter %sdl::+displayconfig-output-technology-component-video+ 3)

(defparameter %sdl::+displayconfig-output-technology-dvi+ 4)

(defparameter %sdl::+displayconfig-output-technology-hdmi+ 5)

(defparameter %sdl::+displayconfig-output-technology-lvds+ 6)

(defparameter %sdl::+displayconfig-output-technology-d-jpn+ 8)

(defparameter %sdl::+displayconfig-output-technology-sdi+ 9)

(defparameter %sdl::+displayconfig-output-technology-displayport-external+ 10)

(defparameter %sdl::+displayconfig-output-technology-displayport-embedded+ 11)

(defparameter %sdl::+displayconfig-output-technology-udi-external+ 12)

(defparameter %sdl::+displayconfig-output-technology-udi-embedded+ 13)

(defparameter %sdl::+displayconfig-output-technology-sdtvdongle+ 14)

(defparameter %sdl::+displayconfig-output-technology-miracast+ 15)

(defparameter %sdl::+displayconfig-output-technology-indirect-wired+ 16)

(defparameter %sdl::+displayconfig-output-technology-indirect-virtual+ 17)

(defparameter %sdl::+displayconfig-output-technology-internal+ -2147483648)

(defparameter %sdl::+displayconfig-output-technology-force-uint32+ -1)

(defparameter %sdl::+lt-dont-care+ 0)

(defparameter %sdl::+lt-lowest-latency+ 1)

(defparameter %sdl::+pointer-feedback-default+ 1)

(defparameter %sdl::+pointer-feedback-indirect+ 2)

(defparameter %sdl::+pointer-feedback-none+ 3)

(defparameter %sdl::+power-action-none+ 0)

(defparameter %sdl::+power-action-reserved+ 1)

(defparameter %sdl::+power-action-sleep+ 2)

(defparameter %sdl::+power-action-hibernate+ 3)

(defparameter %sdl::+power-action-shutdown+ 4)

(defparameter %sdl::+power-action-shutdown-reset+ 5)

(defparameter %sdl::+power-action-shutdown-off+ 6)

(defparameter %sdl::+power-action-warm-eject+ 7)

(defparameter %sdl::+system-power-policy-ac+ 0)

(defparameter %sdl::+system-power-policy-dc+ 1)

(defparameter %sdl::+verify-system-policy-ac+ 2)

(defparameter %sdl::+verify-system-policy-dc+ 3)

(defparameter %sdl::+system-power-capabilities+ 4)

(defparameter %sdl::+system-battery-state+ 5)

(defparameter %sdl::+system-power-state-handler+ 6)

(defparameter %sdl::+processor-state-handler+ 7)

(defparameter %sdl::+system-power-policy-current+ 8)

(defparameter %sdl::+administrator-power-policy+ 9)

(defparameter %sdl::+system-reserve-hiber-file+ 10)

(defparameter %sdl::+processor-information+ 11)

(defparameter %sdl::+system-power-information+ 12)

(defparameter %sdl::+processor-state-handler2+ 13)

(defparameter %sdl::+last-wake-time+ 14)

(defparameter %sdl::+last-sleep-time+ 15)

(defparameter %sdl::+system-execution-state+ 16)

(defparameter %sdl::+system-power-state-notify-handler+ 17)

(defparameter %sdl::+processor-power-policy-ac+ 18)

(defparameter %sdl::+processor-power-policy-dc+ 19)

(defparameter %sdl::+verify-processor-power-policy-ac+ 20)

(defparameter %sdl::+verify-processor-power-policy-dc+ 21)

(defparameter %sdl::+processor-power-policy-current+ 22)

(defparameter %sdl::+system-power-state-logging+ 23)

(defparameter %sdl::+system-power-logging-entry+ 24)

(defparameter %sdl::+set-power-setting-value+ 25)

(defparameter %sdl::+notify-user-power-setting+ 26)

(defparameter %sdl::+power-information-level-unused0+ 27)

(defparameter %sdl::+system-monitor-hiber-boot-power-off+ 28)

(defparameter %sdl::+system-video-state+ 29)

(defparameter %sdl::+trace-application-power-message+ 30)

(defparameter %sdl::+trace-application-power-message-end+ 31)

(defparameter %sdl::+processor-perf-states+ 32)

(defparameter %sdl::+processor-idle-states+ 33)

(defparameter %sdl::+processor-cap+ 34)

(defparameter %sdl::+system-wake-source+ 35)

(defparameter %sdl::+system-hiber-file-information+ 36)

(defparameter %sdl::+trace-service-power-message+ 37)

(defparameter %sdl::+processor-load+ 38)

(defparameter %sdl::+power-shutdown-notification+ 39)

(defparameter %sdl::+monitor-capabilities+ 40)

(defparameter %sdl::+session-power-init+ 41)

(defparameter %sdl::+session-display-state+ 42)

(defparameter %sdl::+power-request-create+ 43)

(defparameter %sdl::+power-request-action+ 44)

(defparameter %sdl::+get-power-request-list+ 45)

(defparameter %sdl::+processor-information-ex+ 46)

(defparameter %sdl::+notify-user-mode-legacy-power-event+ 47)

(defparameter %sdl::+group-park+ 48)

(defparameter %sdl::+processor-idle-domains+ 49)

(defparameter %sdl::+wake-timer-list+ 50)

(defparameter %sdl::+system-hiber-file-size+ 51)

(defparameter %sdl::+processor-idle-states-hv+ 52)

(defparameter %sdl::+processor-perf-states-hv+ 53)

(defparameter %sdl::+processor-perf-cap-hv+ 54)

(defparameter %sdl::+processor-set-idle+ 55)

(defparameter %sdl::+logical-processor-idling+ 56)

(defparameter %sdl::+user-presence+ 57)

(defparameter %sdl::+power-setting-notification-name+ 58)

(defparameter %sdl::+get-power-setting-value+ 59)

(defparameter %sdl::+idle-resiliency+ 60)

(defparameter %sdl::+session-rit-state+ 61)

(defparameter %sdl::+session-connect-notification+ 62)

(defparameter %sdl::+session-power-cleanup+ 63)

(defparameter %sdl::+session-lock-state+ 64)

(defparameter %sdl::+system-hiberboot-state+ 65)

(defparameter %sdl::+platform-information+ 66)

(defparameter %sdl::+pdc-invocation+ 67)

(defparameter %sdl::+monitor-invocation+ 68)

(defparameter %sdl::+firmware-table-information-registered+ 69)

(defparameter %sdl::+set-shutdown-selected-time+ 70)

(defparameter %sdl::+suspend-resume-invocation+ 71)

(defparameter %sdl::+plm-power-request-create+ 72)

(defparameter %sdl::+screen-off+ 73)

(defparameter %sdl::+cs-device-notification+ 74)

(defparameter %sdl::+platform-role+ 75)

(defparameter %sdl::+last-resume-performance+ 76)

(defparameter %sdl::+display-burst+ 77)

(defparameter %sdl::+exit-latency-sampling-percentage+ 78)

(defparameter %sdl::+apply-low-power-scenario-settings+ 79)

(defparameter %sdl::+power-information-level-maximum+ 80)

(defparameter %sdl::+monitor-request-reason-unknown+ 0)

(defparameter %sdl::+monitor-request-reason-power-button+ 1)

(defparameter %sdl::+monitor-request-reason-remote-connection+ 2)

(defparameter %sdl::+monitor-request-reason-sc-monitorpower+ 3)

(defparameter %sdl::+monitor-request-reason-user-input+ 4)

(defparameter %sdl::+monitor-request-reason-ac-dc-display-burst+ 5)

(defparameter %sdl::+monitor-request-reason-user-display-burst+ 6)

(defparameter %sdl::+monitor-request-reason-po-set-system-state+ 7)

(defparameter %sdl::+monitor-request-reason-set-thread-execution-state+ 8)

(defparameter %sdl::+monitor-request-reason-full-wake+ 9)

(defparameter %sdl::+monitor-request-reason-session-unlock+ 10)

(defparameter %sdl::+monitor-request-reason-screen-off-request+ 11)

(defparameter %sdl::+monitor-request-reason-idle-timeout+ 12)

(defparameter %sdl::+monitor-request-reason-policy-change+ 13)

(defparameter %sdl::+monitor-request-reason-max+ 14)

(defparameter %sdl::+user-not-present+ 0)

(defparameter %sdl::+user-present+ 1)

(defparameter %sdl::+user-unknown+ 255)

(cffi:defcenum (%sdl::|C:@EA@SDL-ARRAY-ORDER| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_pixels.h:92:9"
               (:none 0)
               (:rgb 1)
               (:rgba 2)
               (:argb 3)
               (:bgr 4)
               (:bgra 5)
               (:abgr 6))

(cffi:defcenum (%sdl::|C:@EA@SDL-ASSERT-STATE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_assert.h:108:9"
               (:retry 0)
               (:break 1)
               (:abort 2)
               (:ignore 3)
               (:always-ignore 4))

(cffi:defcenum (%sdl::|C:@EA@SDL-AUDIO-STATUS| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_audio.h:684:9"
               (:stopped 0)
               (:playing 1)
               (:paused 2))

(cffi:defcenum (%sdl::|C:@EA@SDL-BITMAP-ORDER| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_pixels.h:68:9"
               (:none 0)
               (:|4321| 1)
               (:|1234| 2))

(cffi:defcenum (%sdl::|C:@EA@SDL-BLEND-FACTOR| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_blendmode.h:77:9"
               (:zero 1)
               (:one 2)
               (:src-color 3)
               (:one-minus-src-color 4)
               (:src-alpha 5)
               (:one-minus-src-alpha 6)
               (:dst-color 7)
               (:one-minus-dst-color 8)
               (:dst-alpha 9)
               (:one-minus-dst-alpha 10))

(cffi:defcenum (%sdl::|C:@EA@SDL-BLEND-MODE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_blendmode.h:40:9"
               (:none 0)
               (:blend 1)
               (:add 2)
               (:mod 4)
               (:mul 8)
               (:invalid 2147483647))

(cffi:defcenum (%sdl::|C:@EA@SDL-BLEND-OPERATION| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_blendmode.h:65:9"
               (:add 1)
               (:subtract 2)
               (:rev-subtract 3)
               (:minimum 4)
               (:maximum 5))

(cffi:defcenum (%sdl::|C:@EA@SDL-DUMMY-ENUM| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_stdinc.h:415:9"
               (:dummy-enum-value 0))

(cffi:defcenum (%sdl::|C:@EA@SDL-DISPLAY-EVENT-ID| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_video.h:185:9"
               (:none 0)
               (:orientation 1)
               (:connected 2)
               (:disconnected 3))

(cffi:defcenum (%sdl::|C:@EA@SDL-DISPLAY-ORIENTATION| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_video.h:196:9"
               (:unknown 0)
               (:landscape 1)
               (:landscape-flipped 2)
               (:portrait 3)
               (:portrait-flipped 4))

(cffi:defcenum (%sdl::|C:@EA@SDL-EVENT-TYPE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_events.h:55:9"
               (:firstevent 0)
               (:quit 256)
               (:app-terminating 257)
               (:app-lowmemory 258)
               (:app-willenterbackground 259)
               (:app-didenterbackground 260)
               (:app-willenterforeground 261)
               (:app-didenterforeground 262)
               (:localechanged 263)
               (:displayevent 336)
               (:windowevent 512)
               (:syswmevent 513)
               (:keydown 768)
               (:keyup 769)
               (:textediting 770)
               (:textinput 771)
               (:keymapchanged 772)
               (:textediting-ext 773)
               (:mousemotion 1024)
               (:mousebuttondown 1025)
               (:mousebuttonup 1026)
               (:mousewheel 1027)
               (:joyaxismotion 1536)
               (:joyballmotion 1537)
               (:joyhatmotion 1538)
               (:joybuttondown 1539)
               (:joybuttonup 1540)
               (:joydeviceadded 1541)
               (:joydeviceremoved 1542)
               (:joybatteryupdated 1543)
               (:controlleraxismotion 1616)
               (:controllerbuttondown 1617)
               (:controllerbuttonup 1618)
               (:controllerdeviceadded 1619)
               (:controllerdeviceremoved 1620)
               (:controllerdeviceremapped 1621)
               (:controllertouchpaddown 1622)
               (:controllertouchpadmotion 1623)
               (:controllertouchpadup 1624)
               (:controllersensorupdate 1625)
               (:fingerdown 1792)
               (:fingerup 1793)
               (:fingermotion 1794)
               (:dollargesture 2048)
               (:dollarrecord 2049)
               (:multigesture 2050)
               (:clipboardupdate 2304)
               (:dropfile 4096)
               (:droptext 4097)
               (:dropbegin 4098)
               (:dropcomplete 4099)
               (:audiodeviceadded 4352)
               (:audiodeviceremoved 4353)
               (:sensorupdate 4608)
               (:render-targets-reset 8192)
               (:render-device-reset 8193)
               (:pollsentinel 32512)
               (:userevent 32768)
               (:lastevent 65535))

(cffi:defcenum (%sdl::|C:@EA@SDL-FLASH-OPERATION| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_video.h:208:9"
               (:cancel 0)
               (:briefly 1)
               (:until-focused 2))

(cffi:defcenum (%sdl::|C:@EA@SDL-GL-CONTEXT-RESET-NOTIFICATION|
                :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_video.h:276:9"
               (:no-notification 0)
               (:lose-context 1))

(cffi:defcenum (%sdl::|C:@EA@SDL-G-LATTR| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_video.h:223:9"
               (:red-size 0)
               (:green-size 1)
               (:blue-size 2)
               (:alpha-size 3)
               (:buffer-size 4)
               (:doublebuffer 5)
               (:depth-size 6)
               (:stencil-size 7)
               (:accum-red-size 8)
               (:accum-green-size 9)
               (:accum-blue-size 10)
               (:accum-alpha-size 11)
               (:stereo 12)
               (:multisamplebuffers 13)
               (:multisamplesamples 14)
               (:accelerated-visual 15)
               (:retained-backing 16)
               (:context-major-version 17)
               (:context-minor-version 18)
               (:context-egl 19)
               (:context-flags 20)
               (:context-profile-mask 21)
               (:share-with-current-context 22)
               (:framebuffer-srgb-capable 23)
               (:context-release-behavior 24)
               (:context-reset-notification 25)
               (:context-no-error 26)
               (:floatbuffers 27))

(cffi:defbitfield (%sdl::|C:@EA@SDL-G-LCONTEXT-FLAG| :unsigned-int)
                  "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_video.h:262:9"
                  (:debug-flag 1)
                  (:forward-compatible-flag 2)
                  (:robust-access-flag 4)
                  (:reset-isolation-flag 8))

(cffi:defcenum (%sdl::|C:@EA@SDL-G-LCONTEXT-RELEASE-FLAG|
                :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_video.h:270:9"
               (:none 0)
               (:flush 1))

(cffi:defbitfield (%sdl::|C:@EA@SDL-G-LPROFILE| :unsigned-int)
                  "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_video.h:255:9"
                  (:core 1)
                  (:compatibility 2)
                  (:es 4))

(cffi:defcenum (%sdl::|C:@EA@SDL-GAME-CONTROLLER-AXIS| :int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_gamecontroller.h:603:9"
               (:invalid -1)
               (:leftx 0)
               (:lefty 1)
               (:rightx 2)
               (:righty 3)
               (:triggerleft 4)
               (:triggerright 5)
               (:max 6))

(cffi:defcenum (%sdl::|C:@EA@SDL-GAME-CONTROLLER-BIND-TYPE|
                :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_gamecontroller.h:79:9"
               (:none 0)
               (:button 1)
               (:axis 2)
               (:hat 3))

(cffi:defcenum (%sdl::|C:@EA@SDL-GAME-CONTROLLER-BUTTON| :int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_gamecontroller.h:708:9"
               (:invalid -1)
               (:a 0)
               (:b 1)
               (:x 2)
               (:y 3)
               (:back 4)
               (:guide 5)
               (:start 6)
               (:leftstick 7)
               (:rightstick 8)
               (:leftshoulder 9)
               (:rightshoulder 10)
               (:dpad-up 11)
               (:dpad-down 12)
               (:dpad-left 13)
               (:dpad-right 14)
               (:misc1 15)
               (:paddle1 16)
               (:paddle2 17)
               (:paddle3 18)
               (:paddle4 19)
               (:touchpad 20)
               (:max 21))

(cffi:defcenum (%sdl::|C:@EA@SDL-GAME-CONTROLLER-TYPE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_gamecontroller.h:61:9"
               (:unknown 0)
               (:xbox360 1)
               (:xboxone 2)
               (:ps3 3)
               (:ps4 4)
               (:nintendo-switch-pro 5)
               (:virtual 6)
               (:ps5 7)
               (:amazon-luna 8)
               (:google-stadia 9)
               (:nvidia-shield 10)
               (:nintendo-switch-joycon-left 11)
               (:nintendo-switch-joycon-right 12)
               (:nintendo-switch-joycon-pair 13))

(cffi:defcenum (%sdl::|C:@EA@SDL-HINT-PRIORITY| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_hints.h:2252:9"
               (:default 0)
               (:normal 1)
               (:override 2))

(cffi:defcenum (%sdl::|C:@EA@SDL-HIT-TEST-RESULT| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_video.h:1659:9"
               (:normal 0)
               (:draggable 1)
               (:resize-topleft 2)
               (:resize-top 3)
               (:resize-topright 4)
               (:resize-right 5)
               (:resize-bottomright 6)
               (:resize-bottom 7)
               (:resize-bottomleft 8)
               (:resize-left 9))

(cffi:defcenum (%sdl::|C:@EA@SDL-JOYSTICK-POWER-LEVEL| :int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_joystick.h:98:9"
               (:unknown -1)
               (:empty 0)
               (:low 1)
               (:medium 2)
               (:full 3)
               (:wired 4)
               (:max 5))

(cffi:defcenum (%sdl::|C:@EA@SDL-JOYSTICK-TYPE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_joystick.h:84:9"
               (:unknown 0)
               (:gamecontroller 1)
               (:wheel 2)
               (:arcade-stick 3)
               (:flight-stick 4)
               (:dance-pad 5)
               (:guitar 6)
               (:drum-kit 7)
               (:arcade-pad 8)
               (:throttle 9))

(cffi:defcenum (%sdl::|C:@EA@SDL-KEY-CODE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_keycode.h:50:9"
               (:unknown 0)
               (:return 13)
               (:escape 27)
               (:backspace 8)
               (:tab 9)
               (:space 32)
               (:exclaim 33)
               (:quotedbl 34)
               (:hash 35)
               (:percent 37)
               (:dollar 36)
               (:ampersand 38)
               (:quote 39)
               (:leftparen 40)
               (:rightparen 41)
               (:asterisk 42)
               (:plus 43)
               (:comma 44)
               (:minus 45)
               (:period 46)
               (:slash 47)
               (:|0| 48)
               (:|1| 49)
               (:|2| 50)
               (:|3| 51)
               (:|4| 52)
               (:|5| 53)
               (:|6| 54)
               (:|7| 55)
               (:|8| 56)
               (:|9| 57)
               (:colon 58)
               (:semicolon 59)
               (:less 60)
               (:equals 61)
               (:greater 62)
               (:question 63)
               (:at 64)
               (:leftbracket 91)
               (:backslash 92)
               (:rightbracket 93)
               (:caret 94)
               (:underscore 95)
               (:backquote 96)
               (:a 97)
               (:b 98)
               (:c 99)
               (:d 100)
               (:e 101)
               (:f 102)
               (:g 103)
               (:h 104)
               (:i 105)
               (:j 106)
               (:k 107)
               (:l 108)
               (:m 109)
               (:n 110)
               (:o 111)
               (:p 112)
               (:q 113)
               (:r 114)
               (:s 115)
               (:t 116)
               (:u 117)
               (:v 118)
               (:w 119)
               (:x 120)
               (:y 121)
               (:z 122)
               (:capslock 1073741881)
               (:f1 1073741882)
               (:f2 1073741883)
               (:f3 1073741884)
               (:f4 1073741885)
               (:f5 1073741886)
               (:f6 1073741887)
               (:f7 1073741888)
               (:f8 1073741889)
               (:f9 1073741890)
               (:f10 1073741891)
               (:f11 1073741892)
               (:f12 1073741893)
               (:printscreen 1073741894)
               (:scrolllock 1073741895)
               (:pause 1073741896)
               (:insert 1073741897)
               (:home 1073741898)
               (:pageup 1073741899)
               (:delete 127)
               (:end 1073741901)
               (:pagedown 1073741902)
               (:right 1073741903)
               (:left 1073741904)
               (:down 1073741905)
               (:up 1073741906)
               (:numlockclear 1073741907)
               (:kp-divide 1073741908)
               (:kp-multiply 1073741909)
               (:kp-minus 1073741910)
               (:kp-plus 1073741911)
               (:kp-enter 1073741912)
               (:kp-1 1073741913)
               (:kp-2 1073741914)
               (:kp-3 1073741915)
               (:kp-4 1073741916)
               (:kp-5 1073741917)
               (:kp-6 1073741918)
               (:kp-7 1073741919)
               (:kp-8 1073741920)
               (:kp-9 1073741921)
               (:kp-0 1073741922)
               (:kp-period 1073741923)
               (:application 1073741925)
               (:power 1073741926)
               (:kp-equals 1073741927)
               (:f13 1073741928)
               (:f14 1073741929)
               (:f15 1073741930)
               (:f16 1073741931)
               (:f17 1073741932)
               (:f18 1073741933)
               (:f19 1073741934)
               (:f20 1073741935)
               (:f21 1073741936)
               (:f22 1073741937)
               (:f23 1073741938)
               (:f24 1073741939)
               (:execute 1073741940)
               (:help 1073741941)
               (:menu 1073741942)
               (:select 1073741943)
               (:stop 1073741944)
               (:again 1073741945)
               (:undo 1073741946)
               (:cut 1073741947)
               (:copy 1073741948)
               (:paste 1073741949)
               (:find 1073741950)
               (:mute 1073741951)
               (:volumeup 1073741952)
               (:volumedown 1073741953)
               (:kp-comma 1073741957)
               (:kp-equalsas400 1073741958)
               (:alterase 1073741977)
               (:sysreq 1073741978)
               (:cancel 1073741979)
               (:clear 1073741980)
               (:prior 1073741981)
               (:return2 1073741982)
               (:separator 1073741983)
               (:out 1073741984)
               (:oper 1073741985)
               (:clearagain 1073741986)
               (:crsel 1073741987)
               (:exsel 1073741988)
               (:kp-00 1073742000)
               (:kp-000 1073742001)
               (:thousandsseparator 1073742002)
               (:decimalseparator 1073742003)
               (:currencyunit 1073742004)
               (:currencysubunit 1073742005)
               (:kp-leftparen 1073742006)
               (:kp-rightparen 1073742007)
               (:kp-leftbrace 1073742008)
               (:kp-rightbrace 1073742009)
               (:kp-tab 1073742010)
               (:kp-backspace 1073742011)
               (:kp-a 1073742012)
               (:kp-b 1073742013)
               (:kp-c 1073742014)
               (:kp-d 1073742015)
               (:kp-e 1073742016)
               (:kp-f 1073742017)
               (:kp-xor 1073742018)
               (:kp-power 1073742019)
               (:kp-percent 1073742020)
               (:kp-less 1073742021)
               (:kp-greater 1073742022)
               (:kp-ampersand 1073742023)
               (:kp-dblampersand 1073742024)
               (:kp-verticalbar 1073742025)
               (:kp-dblverticalbar 1073742026)
               (:kp-colon 1073742027)
               (:kp-hash 1073742028)
               (:kp-space 1073742029)
               (:kp-at 1073742030)
               (:kp-exclam 1073742031)
               (:kp-memstore 1073742032)
               (:kp-memrecall 1073742033)
               (:kp-memclear 1073742034)
               (:kp-memadd 1073742035)
               (:kp-memsubtract 1073742036)
               (:kp-memmultiply 1073742037)
               (:kp-memdivide 1073742038)
               (:kp-plusminus 1073742039)
               (:kp-clear 1073742040)
               (:kp-clearentry 1073742041)
               (:kp-binary 1073742042)
               (:kp-octal 1073742043)
               (:kp-decimal 1073742044)
               (:kp-hexadecimal 1073742045)
               (:lctrl 1073742048)
               (:lshift 1073742049)
               (:lalt 1073742050)
               (:lgui 1073742051)
               (:rctrl 1073742052)
               (:rshift 1073742053)
               (:ralt 1073742054)
               (:rgui 1073742055)
               (:mode 1073742081)
               (:audionext 1073742082)
               (:audioprev 1073742083)
               (:audiostop 1073742084)
               (:audioplay 1073742085)
               (:audiomute 1073742086)
               (:mediaselect 1073742087)
               (:www 1073742088)
               (:mail 1073742089)
               (:calculator 1073742090)
               (:computer 1073742091)
               (:ac-search 1073742092)
               (:ac-home 1073742093)
               (:ac-back 1073742094)
               (:ac-forward 1073742095)
               (:ac-stop 1073742096)
               (:ac-refresh 1073742097)
               (:ac-bookmarks 1073742098)
               (:brightnessdown 1073742099)
               (:brightnessup 1073742100)
               (:displayswitch 1073742101)
               (:kbdillumtoggle 1073742102)
               (:kbdillumdown 1073742103)
               (:kbdillumup 1073742104)
               (:eject 1073742105)
               (:sleep 1073742106)
               (:app1 1073742107)
               (:app2 1073742108)
               (:audiorewind 1073742109)
               (:audiofastforward 1073742110)
               (:softleft 1073742111)
               (:softright 1073742112)
               (:call 1073742113)
               (:endcall 1073742114))

(cffi:defcenum (%sdl::|C:@EA@SDL-KEYMOD| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_keycode.h:332:9"
               (:none 0)
               (:lshift 1)
               (:rshift 2)
               (:lctrl 64)
               (:rctrl 128)
               (:lalt 256)
               (:ralt 512)
               (:lgui 1024)
               (:rgui 2048)
               (:num 4096)
               (:caps 8192)
               (:mode 16384)
               (:scroll 32768)
               (:ctrl 192)
               (:shift 3)
               (:alt 768)
               (:gui 3072)
               (:reserved 32768))

(cffi:defcenum (%sdl::|C:@EA@SDL-LOG-CATEGORY| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_log.h:64:9"
               (:application 0)
               (:error 1)
               (:assert 2)
               (:system 3)
               (:audio 4)
               (:video 5)
               (:render 6)
               (:input 7)
               (:test 8)
               (:reserved1 9)
               (:reserved2 10)
               (:reserved3 11)
               (:reserved4 12)
               (:reserved5 13)
               (:reserved6 14)
               (:reserved7 15)
               (:reserved8 16)
               (:reserved9 17)
               (:reserved10 18)
               (:custom 19))

(cffi:defcenum (%sdl::|C:@EA@SDL-LOG-PRIORITY| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_log.h:102:9"
               (:verbose 1)
               (:debug 2)
               (:info 3)
               (:warn 4)
               (:error 5)
               (:critical 6))

(cffi:defbitfield (%sdl::|C:@EA@SDL-MESSAGE-BOX-BUTTON-FLAGS|
                   :unsigned-int)
                  "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_messagebox.h:49:9"
                  (:returnkey-default 1)
                  (:escapekey-default 2))

(cffi:defcenum (%sdl::|C:@EA@SDL-MESSAGE-BOX-COLOR-TYPE|
                :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_messagebox.h:73:9"
               (:background 0)
               (:text 1)
               (:button-border 2)
               (:button-background 3)
               (:button-selected 4)
               (:max 5))

(cffi:defbitfield (%sdl::|C:@EA@SDL-MESSAGE-BOX-FLAGS| :unsigned-int)
                  "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_messagebox.h:37:9"
                  (:error 16)
                  (:warning 32)
                  (:information 64)
                  (:buttons-left-to-right 128)
                  (:buttons-right-to-left 256))

(cffi:defcenum (%sdl::|C:@EA@SDL-MOUSE-WHEEL-DIRECTION|
                :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_mouse.h:66:9"
               (:normal 0)
               (:flipped 1))

(cffi:defcenum (%sdl::|C:@EA@SDL-PACKED-LAYOUT| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_pixels.h:104:9"
               (:none 0)
               (:|332| 1)
               (:|4444| 2)
               (:|1555| 3)
               (:|5551| 4)
               (:|565| 5)
               (:|8888| 6)
               (:|2101010| 7)
               (:|1010102| 8))

(cffi:defcenum (%sdl::|C:@EA@SDL-PACKED-ORDER| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_pixels.h:76:9"
               (:none 0)
               (:xrgb 1)
               (:rgbx 2)
               (:argb 3)
               (:rgba 4)
               (:xbgr 5)
               (:bgrx 6)
               (:abgr 7)
               (:bgra 8))

(cffi:defcenum (%sdl::|C:@EA@SDL-PIXEL-FORMAT-ENUM| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_pixels.h:171:9"
               (:unknown 0)
               (:index1lsb 286261504)
               (:index1msb 287310080)
               (:index4lsb 303039488)
               (:index4msb 304088064)
               (:index8 318769153)
               (:rgb332 336660481)
               (:xrgb4444 353504258)
               (:rgb444 353504258)
               (:xbgr4444 357698562)
               (:bgr444 357698562)
               (:xrgb1555 353570562)
               (:rgb555 353570562)
               (:xbgr1555 357764866)
               (:bgr555 357764866)
               (:argb4444 355602434)
               (:rgba4444 356651010)
               (:abgr4444 359796738)
               (:bgra4444 360845314)
               (:argb1555 355667970)
               (:rgba5551 356782082)
               (:abgr1555 359862274)
               (:bgra5551 360976386)
               (:rgb565 353701890)
               (:bgr565 357896194)
               (:rgb24 386930691)
               (:bgr24 390076419)
               (:xrgb8888 370546692)
               (:rgb888 370546692)
               (:rgbx8888 371595268)
               (:xbgr8888 374740996)
               (:bgr888 374740996)
               (:bgrx8888 375789572)
               (:argb8888 372645892)
               (:rgba8888 373694468)
               (:abgr8888 376840196)
               (:bgra8888 377888772)
               (:argb2101010 372711428)
               (:rgba32 376840196)
               (:argb32 377888772)
               (:bgra32 372645892)
               (:abgr32 373694468)
               (:yv12 842094169)
               (:iyuv 1448433993)
               (:yuy2 844715353)
               (:uyvy 1498831189)
               (:yvyu 1431918169)
               (:nv12 842094158)
               (:nv21 825382478)
               (:external-oes 542328143))

(cffi:defcenum (%sdl::|C:@EA@SDL-PIXEL-TYPE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_pixels.h:51:9"
               (:unknown 0)
               (:index1 1)
               (:index4 2)
               (:index8 3)
               (:packed8 4)
               (:packed16 5)
               (:packed32 6)
               (:arrayu8 7)
               (:arrayu16 8)
               (:arrayu32 9)
               (:arrayf16 10)
               (:arrayf32 11))

(cffi:defcenum (%sdl::|C:@EA@SDL-POWER-STATE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_power.h:42:9"
               (:unknown 0)
               (:on-battery 1)
               (:no-battery 2)
               (:charging 3)
               (:charged 4))

(cffi:defbitfield (%sdl::|C:@EA@SDL-RENDERER-FLAGS| :unsigned-int)
                  "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_render.h:64:9"
                  (:software 1)
                  (:accelerated 2)
                  (:presentvsync 4)
                  (:targettexture 8))

(cffi:defcenum (%sdl::|C:@EA@SDL-RENDERER-FLIP| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_render.h:131:9"
               (:none 0)
               (:horizontal 1)
               (:vertical 2))

(cffi:defcenum (%sdl::|C:@EA@SDL-SYSWM-TYPE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_syswm.h:135:9"
               (:unknown 0)
               (:windows 1)
               (:x11 2)
               (:directfb 3)
               (:cocoa 4)
               (:uikit 5)
               (:wayland 6)
               (:mir 7)
               (:winrt 8)
               (:android 9)
               (:vivante 10)
               (:os2 11)
               (:haiku 12)
               (:kmsdrm 13)
               (:riscos 14))

(cffi:defcenum (%sdl::|C:@EA@SDL-SCALE-MODE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_render.h:101:9"
               (:nearest 0)
               (:linear 1)
               (:best 2))

(cffi:defcenum (%sdl::|C:@EA@SDL-SCANCODE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_scancode.h:43:9"
               (:unknown 0)
               (:a 4)
               (:b 5)
               (:c 6)
               (:d 7)
               (:e 8)
               (:f 9)
               (:g 10)
               (:h 11)
               (:i 12)
               (:j 13)
               (:k 14)
               (:l 15)
               (:m 16)
               (:n 17)
               (:o 18)
               (:p 19)
               (:q 20)
               (:r 21)
               (:s 22)
               (:t 23)
               (:u 24)
               (:v 25)
               (:w 26)
               (:x 27)
               (:y 28)
               (:z 29)
               (:|1| 30)
               (:|2| 31)
               (:|3| 32)
               (:|4| 33)
               (:|5| 34)
               (:|6| 35)
               (:|7| 36)
               (:|8| 37)
               (:|9| 38)
               (:|0| 39)
               (:return 40)
               (:escape 41)
               (:backspace 42)
               (:tab 43)
               (:space 44)
               (:minus 45)
               (:equals 46)
               (:leftbracket 47)
               (:rightbracket 48)
               (:backslash 49)
               (:nonushash 50)
               (:semicolon 51)
               (:apostrophe 52)
               (:grave 53)
               (:comma 54)
               (:period 55)
               (:slash 56)
               (:capslock 57)
               (:f1 58)
               (:f2 59)
               (:f3 60)
               (:f4 61)
               (:f5 62)
               (:f6 63)
               (:f7 64)
               (:f8 65)
               (:f9 66)
               (:f10 67)
               (:f11 68)
               (:f12 69)
               (:printscreen 70)
               (:scrolllock 71)
               (:pause 72)
               (:insert 73)
               (:home 74)
               (:pageup 75)
               (:delete 76)
               (:end 77)
               (:pagedown 78)
               (:right 79)
               (:left 80)
               (:down 81)
               (:up 82)
               (:numlockclear 83)
               (:kp-divide 84)
               (:kp-multiply 85)
               (:kp-minus 86)
               (:kp-plus 87)
               (:kp-enter 88)
               (:kp-1 89)
               (:kp-2 90)
               (:kp-3 91)
               (:kp-4 92)
               (:kp-5 93)
               (:kp-6 94)
               (:kp-7 95)
               (:kp-8 96)
               (:kp-9 97)
               (:kp-0 98)
               (:kp-period 99)
               (:nonusbackslash 100)
               (:application 101)
               (:power 102)
               (:kp-equals 103)
               (:f13 104)
               (:f14 105)
               (:f15 106)
               (:f16 107)
               (:f17 108)
               (:f18 109)
               (:f19 110)
               (:f20 111)
               (:f21 112)
               (:f22 113)
               (:f23 114)
               (:f24 115)
               (:execute 116)
               (:help 117)
               (:menu 118)
               (:select 119)
               (:stop 120)
               (:again 121)
               (:undo 122)
               (:cut 123)
               (:copy 124)
               (:paste 125)
               (:find 126)
               (:mute 127)
               (:volumeup 128)
               (:volumedown 129)
               (:kp-comma 133)
               (:kp-equalsas400 134)
               (:international1 135)
               (:international2 136)
               (:international3 137)
               (:international4 138)
               (:international5 139)
               (:international6 140)
               (:international7 141)
               (:international8 142)
               (:international9 143)
               (:lang1 144)
               (:lang2 145)
               (:lang3 146)
               (:lang4 147)
               (:lang5 148)
               (:lang6 149)
               (:lang7 150)
               (:lang8 151)
               (:lang9 152)
               (:alterase 153)
               (:sysreq 154)
               (:cancel 155)
               (:clear 156)
               (:prior 157)
               (:return2 158)
               (:separator 159)
               (:out 160)
               (:oper 161)
               (:clearagain 162)
               (:crsel 163)
               (:exsel 164)
               (:kp-00 176)
               (:kp-000 177)
               (:thousandsseparator 178)
               (:decimalseparator 179)
               (:currencyunit 180)
               (:currencysubunit 181)
               (:kp-leftparen 182)
               (:kp-rightparen 183)
               (:kp-leftbrace 184)
               (:kp-rightbrace 185)
               (:kp-tab 186)
               (:kp-backspace 187)
               (:kp-a 188)
               (:kp-b 189)
               (:kp-c 190)
               (:kp-d 191)
               (:kp-e 192)
               (:kp-f 193)
               (:kp-xor 194)
               (:kp-power 195)
               (:kp-percent 196)
               (:kp-less 197)
               (:kp-greater 198)
               (:kp-ampersand 199)
               (:kp-dblampersand 200)
               (:kp-verticalbar 201)
               (:kp-dblverticalbar 202)
               (:kp-colon 203)
               (:kp-hash 204)
               (:kp-space 205)
               (:kp-at 206)
               (:kp-exclam 207)
               (:kp-memstore 208)
               (:kp-memrecall 209)
               (:kp-memclear 210)
               (:kp-memadd 211)
               (:kp-memsubtract 212)
               (:kp-memmultiply 213)
               (:kp-memdivide 214)
               (:kp-plusminus 215)
               (:kp-clear 216)
               (:kp-clearentry 217)
               (:kp-binary 218)
               (:kp-octal 219)
               (:kp-decimal 220)
               (:kp-hexadecimal 221)
               (:lctrl 224)
               (:lshift 225)
               (:lalt 226)
               (:lgui 227)
               (:rctrl 228)
               (:rshift 229)
               (:ralt 230)
               (:rgui 231)
               (:mode 257)
               (:audionext 258)
               (:audioprev 259)
               (:audiostop 260)
               (:audioplay 261)
               (:audiomute 262)
               (:mediaselect 263)
               (:www 264)
               (:mail 265)
               (:calculator 266)
               (:computer 267)
               (:ac-search 268)
               (:ac-home 269)
               (:ac-back 270)
               (:ac-forward 271)
               (:ac-stop 272)
               (:ac-refresh 273)
               (:ac-bookmarks 274)
               (:brightnessdown 275)
               (:brightnessup 276)
               (:displayswitch 277)
               (:kbdillumtoggle 278)
               (:kbdillumdown 279)
               (:kbdillumup 280)
               (:eject 281)
               (:sleep 282)
               (:app1 283)
               (:app2 284)
               (:audiorewind 285)
               (:audiofastforward 286)
               (:softleft 287)
               (:softright 288)
               (:call 289)
               (:endcall 290))

(cffi:defcenum (%sdl::|C:@EA@SDL-SENSOR-TYPE| :int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_sensor.h:69:9"
               (:invalid -1)
               (:unknown 0)
               (:accel 1)
               (:gyro 2))

(cffi:defcenum (%sdl::|C:@EA@SDL-SYSTEM-CURSOR| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_mouse.h:46:9"
               (:arrow 0)
               (:ibeam 1)
               (:wait 2)
               (:crosshair 3)
               (:waitarrow 4)
               (:sizenwse 5)
               (:sizenesw 6)
               (:sizewe 7)
               (:sizens 8)
               (:sizeall 9)
               (:no 10)
               (:hand 11))

(cffi:defcenum (%sdl::|C:@EA@SDL-TEXTURE-ACCESS| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_render.h:111:9"
               (:static 0)
               (:streaming 1)
               (:target 2))

(cffi:defcenum (%sdl::|C:@EA@SDL-TEXTURE-MODULATE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_render.h:121:9"
               (:none 0)
               (:color 1)
               (:alpha 2))

(cffi:defcenum (%sdl::|C:@EA@SDL-THREAD-PRIORITY| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_thread.h:75:9"
               (:low 0)
               (:normal 1)
               (:high 2)
               (:time-critical 3))

(cffi:defcenum (%sdl::|C:@EA@SDL-TOUCH-DEVICE-TYPE| :int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_touch.h:44:9"
               (:invalid -1)
               (:direct 0)
               (:indirect-absolute 1)
               (:indirect-relative 2))

(cffi:defcenum (%sdl::|C:@EA@SDL-WINDOW-EVENT-ID| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_video.h:154:9"
               (:none 0)
               (:shown 1)
               (:hidden 2)
               (:exposed 3)
               (:moved 4)
               (:resized 5)
               (:size-changed 6)
               (:minimized 7)
               (:maximized 8)
               (:restored 9)
               (:enter 10)
               (:leave 11)
               (:focus-gained 12)
               (:focus-lost 13)
               (:close 14)
               (:take-focus 15)
               (:hit-test 16)
               (:iccprof-changed 17)
               (:display-changed 18))

(cffi:defcenum (%sdl::|C:@EA@SDL-WINDOW-FLAGS| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_video.h:102:9"
               (:fullscreen 1)
               (:opengl 2)
               (:shown 4)
               (:hidden 8)
               (:borderless 16)
               (:resizable 32)
               (:minimized 64)
               (:maximized 128)
               (:mouse-grabbed 256)
               (:input-focus 512)
               (:mouse-focus 1024)
               (:fullscreen-desktop 4097)
               (:foreign 2048)
               (:allow-highdpi 8192)
               (:mouse-capture 16384)
               (:always-on-top 32768)
               (:skip-taskbar 65536)
               (:utility 131072)
               (:tooltip 262144)
               (:popup-menu 524288)
               (:keyboard-grabbed 1048576)
               (:vulkan 268435456)
               (:metal 536870912)
               (:input-grabbed 256))

(cffi:defcenum (%sdl::|C:@EA@SDL-YUV-CONVERSION-MODE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_surface.h:108:9"
               (:jpeg 0)
               (:bt601 1)
               (:bt709 2)
               (:automatic 3))

(cffi:defcenum (%sdl::|C:@EA@SDL-BOOL| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_stdinc.h:184:9"
               (:false 0)
               (:true 1))

(cffi:defcenum (%sdl::|C:@EA@SDL-ERRORCODE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_error.h:142:9"
               (:enomem 0)
               (:efread 1)
               (:efwrite 2)
               (:efseek 3)
               (:unsupported 4)
               (:lasterror 5))

(cffi:defcenum (%sdl::|C:@EA@SDL-EVENTACTION| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_events.h:702:9"
               (:addevent 0)
               (:peekevent 1)
               (:getevent 2))

(defparameter %sdl::+po-ac+ 0)

(defparameter %sdl::+po-dc+ 1)

(defparameter %sdl::+po-hot+ 2)

(defparameter %sdl::+po-condition-maximum+ 3)

(defparameter %sdl::+win-null-sid+ 0)

(defparameter %sdl::+win-world-sid+ 1)

(defparameter %sdl::+win-local-sid+ 2)

(defparameter %sdl::+win-creator-owner-sid+ 3)

(defparameter %sdl::+win-creator-group-sid+ 4)

(defparameter %sdl::+win-creator-owner-server-sid+ 5)

(defparameter %sdl::+win-creator-group-server-sid+ 6)

(defparameter %sdl::+win-nt-authority-sid+ 7)

(defparameter %sdl::+win-dialup-sid+ 8)

(defparameter %sdl::+win-network-sid+ 9)

(defparameter %sdl::+win-batch-sid+ 10)

(defparameter %sdl::+win-interactive-sid+ 11)

(defparameter %sdl::+win-service-sid+ 12)

(defparameter %sdl::+win-anonymous-sid+ 13)

(defparameter %sdl::+win-proxy-sid+ 14)

(defparameter %sdl::+win-enterprise-controllers-sid+ 15)

(defparameter %sdl::+win-self-sid+ 16)

(defparameter %sdl::+win-authenticated-user-sid+ 17)

(defparameter %sdl::+win-restricted-code-sid+ 18)

(defparameter %sdl::+win-terminal-server-sid+ 19)

(defparameter %sdl::+win-remote-logon-id-sid+ 20)

(defparameter %sdl::+win-logon-ids-sid+ 21)

(defparameter %sdl::+win-local-system-sid+ 22)

(defparameter %sdl::+win-local-service-sid+ 23)

(defparameter %sdl::+win-network-service-sid+ 24)

(defparameter %sdl::+win-builtin-domain-sid+ 25)

(defparameter %sdl::+win-builtin-administrators-sid+ 26)

(defparameter %sdl::+win-builtin-users-sid+ 27)

(defparameter %sdl::+win-builtin-guests-sid+ 28)

(defparameter %sdl::+win-builtin-power-users-sid+ 29)

(defparameter %sdl::+win-builtin-account-operators-sid+ 30)

(defparameter %sdl::+win-builtin-system-operators-sid+ 31)

(defparameter %sdl::+win-builtin-print-operators-sid+ 32)

(defparameter %sdl::+win-builtin-backup-operators-sid+ 33)

(defparameter %sdl::+win-builtin-replicator-sid+ 34)

(defparameter %sdl::+win-builtin-pre-windows2000compatible-access-sid+ 35)

(defparameter %sdl::+win-builtin-remote-desktop-users-sid+ 36)

(defparameter %sdl::+win-builtin-network-configuration-operators-sid+ 37)

(defparameter %sdl::+win-account-administrator-sid+ 38)

(defparameter %sdl::+win-account-guest-sid+ 39)

(defparameter %sdl::+win-account-krbtgt-sid+ 40)

(defparameter %sdl::+win-account-domain-admins-sid+ 41)

(defparameter %sdl::+win-account-domain-users-sid+ 42)

(defparameter %sdl::+win-account-domain-guests-sid+ 43)

(defparameter %sdl::+win-account-computers-sid+ 44)

(defparameter %sdl::+win-account-controllers-sid+ 45)

(defparameter %sdl::+win-account-cert-admins-sid+ 46)

(defparameter %sdl::+win-account-schema-admins-sid+ 47)

(defparameter %sdl::+win-account-enterprise-admins-sid+ 48)

(defparameter %sdl::+win-account-policy-admins-sid+ 49)

(defparameter %sdl::+win-account-ras-and-ias-servers-sid+ 50)

(defparameter %sdl::+win-ntlm-authentication-sid+ 51)

(defparameter %sdl::+win-digest-authentication-sid+ 52)

(defparameter %sdl::+win-s-channel-authentication-sid+ 53)

(defparameter %sdl::+win-this-organization-sid+ 54)

(defparameter %sdl::+win-other-organization-sid+ 55)

(defparameter %sdl::+win-builtin-incoming-forest-trust-builders-sid+ 56)

(defparameter %sdl::+win-builtin-perf-monitoring-users-sid+ 57)

(defparameter %sdl::+win-builtin-perf-logging-users-sid+ 58)

(defparameter %sdl::+win-builtin-authorization-access-sid+ 59)

(defparameter %sdl::+win-builtin-terminal-server-license-servers-sid+ 60)

(defparameter %sdl::+win-builtin-dcom-users-sid+ 61)

(defparameter %sdl::+win-builtin-i-users-sid+ 62)

(defparameter %sdl::+win-i-user-sid+ 63)

(defparameter %sdl::+win-builtin-crypto-operators-sid+ 64)

(defparameter %sdl::+win-untrusted-label-sid+ 65)

(defparameter %sdl::+win-low-label-sid+ 66)

(defparameter %sdl::+win-medium-label-sid+ 67)

(defparameter %sdl::+win-high-label-sid+ 68)

(defparameter %sdl::+win-system-label-sid+ 69)

(defparameter %sdl::+win-write-restricted-code-sid+ 70)

(defparameter %sdl::+win-creator-owner-rights-sid+ 71)

(defparameter %sdl::+win-cacheable-principals-group-sid+ 72)

(defparameter %sdl::+win-non-cacheable-principals-group-sid+ 73)

(defparameter %sdl::+win-enterprise-readonly-controllers-sid+ 74)

(defparameter %sdl::+win-account-readonly-controllers-sid+ 75)

(defparameter %sdl::+win-builtin-event-log-readers-group+ 76)

(defparameter %sdl::+win-new-enterprise-readonly-controllers-sid+ 77)

(defparameter %sdl::+win-builtin-cert-svc-d-com-access-group+ 78)

(defparameter %sdl::+win-medium-plus-label-sid+ 79)

(defparameter %sdl::+win-local-logon-sid+ 80)

(defparameter %sdl::+win-console-logon-sid+ 81)

(defparameter %sdl::+win-this-organization-certificate-sid+ 82)

(defparameter %sdl::+win-application-package-authority-sid+ 83)

(defparameter %sdl::+win-builtin-any-package-sid+ 84)

(defparameter %sdl::+win-capability-internet-client-sid+ 85)

(defparameter %sdl::+win-capability-internet-client-server-sid+ 86)

(defparameter %sdl::+win-capability-private-network-client-server-sid+ 87)

(defparameter %sdl::+win-capability-pictures-library-sid+ 88)

(defparameter %sdl::+win-capability-videos-library-sid+ 89)

(defparameter %sdl::+win-capability-music-library-sid+ 90)

(defparameter %sdl::+win-capability-documents-library-sid+ 91)

(defparameter %sdl::+win-capability-shared-user-certificates-sid+ 92)

(defparameter %sdl::+win-capability-enterprise-authentication-sid+ 93)

(defparameter %sdl::+win-capability-removable-storage-sid+ 94)

(defparameter %sdl::+win-builtin-rds-remote-access-servers-sid+ 95)

(defparameter %sdl::+win-builtin-rds-endpoint-servers-sid+ 96)

(defparameter %sdl::+win-builtin-rds-management-servers-sid+ 97)

(defparameter %sdl::+win-user-mode-drivers-sid+ 98)

(defparameter %sdl::+win-builtin-hyper-v-admins-sid+ 99)

(defparameter %sdl::+win-account-cloneable-controllers-sid+ 100)

(defparameter %sdl::+win-builtin-access-control-assistance-operators-sid+ 101)

(defparameter %sdl::+win-builtin-remote-management-users-sid+ 102)

(defparameter %sdl::+win-authentication-authority-asserted-sid+ 103)

(defparameter %sdl::+win-authentication-service-asserted-sid+ 104)

(defparameter %sdl::+win-local-account-sid+ 105)

(defparameter %sdl::+win-local-account-and-administrator-sid+ 106)

(defparameter %sdl::+win-account-protected-users-sid+ 107)

(defparameter %sdl::+win-capability-appointments-sid+ 108)

(defparameter %sdl::+win-capability-contacts-sid+ 109)

(defparameter %sdl::+win-account-default-system-managed-sid+ 110)

(defparameter %sdl::+win-builtin-default-system-managed-group-sid+ 111)

(defparameter %sdl::+win-builtin-storage-replica-admins-sid+ 112)

(defparameter %sdl::+win-account-key-admins-sid+ 113)

(defparameter %sdl::+win-account-enterprise-key-admins-sid+ 114)

(defparameter %sdl::+win-authentication-key-trust-sid+ 115)

(defparameter %sdl::+win-authentication-key-property-mfa-sid+ 116)

(defparameter %sdl::+win-authentication-key-property-attestation-sid+ 117)

(cffi:defcenum (%sdl::|C:@EA@WINDOW-SHAPE-MODE| :unsigned-int)
               "/home/borodust/devel/repo/awie-projects/aw-sdl/src/lib/sdl/include/SDL_shape.h:85:9"
               (:default 0)
               (:binarize-alpha 1)
               (:reverse-binarize-alpha 2)
               (:color-key 3))

(defparameter %sdl::+%mm-cmpint-eq+ 0)

(defparameter %sdl::+%mm-cmpint-lt+ 1)

(defparameter %sdl::+%mm-cmpint-le+ 2)

(defparameter %sdl::+%mm-cmpint-unused+ 3)

(defparameter %sdl::+%mm-cmpint-ne+ 4)

(defparameter %sdl::+%mm-cmpint-nlt+ 5)

(defparameter %sdl::+%mm-cmpint-nle+ 6)

(defparameter %sdl::+%mm-mant-norm-1-2+ 0)

(defparameter %sdl::+%mm-mant-norm-p5-2+ 1)

(defparameter %sdl::+%mm-mant-norm-p5-1+ 2)

(defparameter %sdl::+%mm-mant-norm-p75-1p5+ 3)

(defparameter %sdl::+%mm-mant-sign-src+ 0)

(defparameter %sdl::+%mm-mant-sign-zero+ 1)

(defparameter %sdl::+%mm-mant-sign-nan+ 2)

(defparameter %sdl::+%mm-perm-aaaa+ 0)

(defparameter %sdl::+%mm-perm-aaab+ 1)

(defparameter %sdl::+%mm-perm-aaac+ 2)

(defparameter %sdl::+%mm-perm-aaad+ 3)

(defparameter %sdl::+%mm-perm-aaba+ 4)

(defparameter %sdl::+%mm-perm-aabb+ 5)

(defparameter %sdl::+%mm-perm-aabc+ 6)

(defparameter %sdl::+%mm-perm-aabd+ 7)

(defparameter %sdl::+%mm-perm-aaca+ 8)

(defparameter %sdl::+%mm-perm-aacb+ 9)

(defparameter %sdl::+%mm-perm-aacc+ 10)

(defparameter %sdl::+%mm-perm-aacd+ 11)

(defparameter %sdl::+%mm-perm-aada+ 12)

(defparameter %sdl::+%mm-perm-aadb+ 13)

(defparameter %sdl::+%mm-perm-aadc+ 14)

(defparameter %sdl::+%mm-perm-aadd+ 15)

(defparameter %sdl::+%mm-perm-abaa+ 16)

(defparameter %sdl::+%mm-perm-abab+ 17)

(defparameter %sdl::+%mm-perm-abac+ 18)

(defparameter %sdl::+%mm-perm-abad+ 19)

(defparameter %sdl::+%mm-perm-abba+ 20)

(defparameter %sdl::+%mm-perm-abbb+ 21)

(defparameter %sdl::+%mm-perm-abbc+ 22)

(defparameter %sdl::+%mm-perm-abbd+ 23)

(defparameter %sdl::+%mm-perm-abca+ 24)

(defparameter %sdl::+%mm-perm-abcb+ 25)

(defparameter %sdl::+%mm-perm-abcc+ 26)

(defparameter %sdl::+%mm-perm-abcd+ 27)

(defparameter %sdl::+%mm-perm-abda+ 28)

(defparameter %sdl::+%mm-perm-abdb+ 29)

(defparameter %sdl::+%mm-perm-abdc+ 30)

(defparameter %sdl::+%mm-perm-abdd+ 31)

(defparameter %sdl::+%mm-perm-acaa+ 32)

(defparameter %sdl::+%mm-perm-acab+ 33)

(defparameter %sdl::+%mm-perm-acac+ 34)

(defparameter %sdl::+%mm-perm-acad+ 35)

(defparameter %sdl::+%mm-perm-acba+ 36)

(defparameter %sdl::+%mm-perm-acbb+ 37)

(defparameter %sdl::+%mm-perm-acbc+ 38)

(defparameter %sdl::+%mm-perm-acbd+ 39)

(defparameter %sdl::+%mm-perm-acca+ 40)

(defparameter %sdl::+%mm-perm-accb+ 41)

(defparameter %sdl::+%mm-perm-accc+ 42)

(defparameter %sdl::+%mm-perm-accd+ 43)

(defparameter %sdl::+%mm-perm-acda+ 44)

(defparameter %sdl::+%mm-perm-acdb+ 45)

(defparameter %sdl::+%mm-perm-acdc+ 46)

(defparameter %sdl::+%mm-perm-acdd+ 47)

(defparameter %sdl::+%mm-perm-adaa+ 48)

(defparameter %sdl::+%mm-perm-adab+ 49)

(defparameter %sdl::+%mm-perm-adac+ 50)

(defparameter %sdl::+%mm-perm-adad+ 51)

(defparameter %sdl::+%mm-perm-adba+ 52)

(defparameter %sdl::+%mm-perm-adbb+ 53)

(defparameter %sdl::+%mm-perm-adbc+ 54)

(defparameter %sdl::+%mm-perm-adbd+ 55)

(defparameter %sdl::+%mm-perm-adca+ 56)

(defparameter %sdl::+%mm-perm-adcb+ 57)

(defparameter %sdl::+%mm-perm-adcc+ 58)

(defparameter %sdl::+%mm-perm-adcd+ 59)

(defparameter %sdl::+%mm-perm-adda+ 60)

(defparameter %sdl::+%mm-perm-addb+ 61)

(defparameter %sdl::+%mm-perm-addc+ 62)

(defparameter %sdl::+%mm-perm-addd+ 63)

(defparameter %sdl::+%mm-perm-baaa+ 64)

(defparameter %sdl::+%mm-perm-baab+ 65)

(defparameter %sdl::+%mm-perm-baac+ 66)

(defparameter %sdl::+%mm-perm-baad+ 67)

(defparameter %sdl::+%mm-perm-baba+ 68)

(defparameter %sdl::+%mm-perm-babb+ 69)

(defparameter %sdl::+%mm-perm-babc+ 70)

(defparameter %sdl::+%mm-perm-babd+ 71)

(defparameter %sdl::+%mm-perm-baca+ 72)

(defparameter %sdl::+%mm-perm-bacb+ 73)

(defparameter %sdl::+%mm-perm-bacc+ 74)

(defparameter %sdl::+%mm-perm-bacd+ 75)

(defparameter %sdl::+%mm-perm-bada+ 76)

(defparameter %sdl::+%mm-perm-badb+ 77)

(defparameter %sdl::+%mm-perm-badc+ 78)

(defparameter %sdl::+%mm-perm-badd+ 79)

(defparameter %sdl::+%mm-perm-bbaa+ 80)

(defparameter %sdl::+%mm-perm-bbab+ 81)

(defparameter %sdl::+%mm-perm-bbac+ 82)

(defparameter %sdl::+%mm-perm-bbad+ 83)

(defparameter %sdl::+%mm-perm-bbba+ 84)

(defparameter %sdl::+%mm-perm-bbbb+ 85)

(defparameter %sdl::+%mm-perm-bbbc+ 86)

(defparameter %sdl::+%mm-perm-bbbd+ 87)

(defparameter %sdl::+%mm-perm-bbca+ 88)

(defparameter %sdl::+%mm-perm-bbcb+ 89)

(defparameter %sdl::+%mm-perm-bbcc+ 90)

(defparameter %sdl::+%mm-perm-bbcd+ 91)

(defparameter %sdl::+%mm-perm-bbda+ 92)

(defparameter %sdl::+%mm-perm-bbdb+ 93)

(defparameter %sdl::+%mm-perm-bbdc+ 94)

(defparameter %sdl::+%mm-perm-bbdd+ 95)

(defparameter %sdl::+%mm-perm-bcaa+ 96)

(defparameter %sdl::+%mm-perm-bcab+ 97)

(defparameter %sdl::+%mm-perm-bcac+ 98)

(defparameter %sdl::+%mm-perm-bcad+ 99)

(defparameter %sdl::+%mm-perm-bcba+ 100)

(defparameter %sdl::+%mm-perm-bcbb+ 101)

(defparameter %sdl::+%mm-perm-bcbc+ 102)

(defparameter %sdl::+%mm-perm-bcbd+ 103)

(defparameter %sdl::+%mm-perm-bcca+ 104)

(defparameter %sdl::+%mm-perm-bccb+ 105)

(defparameter %sdl::+%mm-perm-bccc+ 106)

(defparameter %sdl::+%mm-perm-bccd+ 107)

(defparameter %sdl::+%mm-perm-bcda+ 108)

(defparameter %sdl::+%mm-perm-bcdb+ 109)

(defparameter %sdl::+%mm-perm-bcdc+ 110)

(defparameter %sdl::+%mm-perm-bcdd+ 111)

(defparameter %sdl::+%mm-perm-bdaa+ 112)

(defparameter %sdl::+%mm-perm-bdab+ 113)

(defparameter %sdl::+%mm-perm-bdac+ 114)

(defparameter %sdl::+%mm-perm-bdad+ 115)

(defparameter %sdl::+%mm-perm-bdba+ 116)

(defparameter %sdl::+%mm-perm-bdbb+ 117)

(defparameter %sdl::+%mm-perm-bdbc+ 118)

(defparameter %sdl::+%mm-perm-bdbd+ 119)

(defparameter %sdl::+%mm-perm-bdca+ 120)

(defparameter %sdl::+%mm-perm-bdcb+ 121)

(defparameter %sdl::+%mm-perm-bdcc+ 122)

(defparameter %sdl::+%mm-perm-bdcd+ 123)

(defparameter %sdl::+%mm-perm-bdda+ 124)

(defparameter %sdl::+%mm-perm-bddb+ 125)

(defparameter %sdl::+%mm-perm-bddc+ 126)

(defparameter %sdl::+%mm-perm-bddd+ 127)

(defparameter %sdl::+%mm-perm-caaa+ 128)

(defparameter %sdl::+%mm-perm-caab+ 129)

(defparameter %sdl::+%mm-perm-caac+ 130)

(defparameter %sdl::+%mm-perm-caad+ 131)

(defparameter %sdl::+%mm-perm-caba+ 132)

(defparameter %sdl::+%mm-perm-cabb+ 133)

(defparameter %sdl::+%mm-perm-cabc+ 134)

(defparameter %sdl::+%mm-perm-cabd+ 135)

(defparameter %sdl::+%mm-perm-caca+ 136)

(defparameter %sdl::+%mm-perm-cacb+ 137)

(defparameter %sdl::+%mm-perm-cacc+ 138)

(defparameter %sdl::+%mm-perm-cacd+ 139)

(defparameter %sdl::+%mm-perm-cada+ 140)

(defparameter %sdl::+%mm-perm-cadb+ 141)

(defparameter %sdl::+%mm-perm-cadc+ 142)

(defparameter %sdl::+%mm-perm-cadd+ 143)

(defparameter %sdl::+%mm-perm-cbaa+ 144)

(defparameter %sdl::+%mm-perm-cbab+ 145)

(defparameter %sdl::+%mm-perm-cbac+ 146)

(defparameter %sdl::+%mm-perm-cbad+ 147)

(defparameter %sdl::+%mm-perm-cbba+ 148)

(defparameter %sdl::+%mm-perm-cbbb+ 149)

(defparameter %sdl::+%mm-perm-cbbc+ 150)

(defparameter %sdl::+%mm-perm-cbbd+ 151)

(defparameter %sdl::+%mm-perm-cbca+ 152)

(defparameter %sdl::+%mm-perm-cbcb+ 153)

(defparameter %sdl::+%mm-perm-cbcc+ 154)

(defparameter %sdl::+%mm-perm-cbcd+ 155)

(defparameter %sdl::+%mm-perm-cbda+ 156)

(defparameter %sdl::+%mm-perm-cbdb+ 157)

(defparameter %sdl::+%mm-perm-cbdc+ 158)

(defparameter %sdl::+%mm-perm-cbdd+ 159)

(defparameter %sdl::+%mm-perm-ccaa+ 160)

(defparameter %sdl::+%mm-perm-ccab+ 161)

(defparameter %sdl::+%mm-perm-ccac+ 162)

(defparameter %sdl::+%mm-perm-ccad+ 163)

(defparameter %sdl::+%mm-perm-ccba+ 164)

(defparameter %sdl::+%mm-perm-ccbb+ 165)

(defparameter %sdl::+%mm-perm-ccbc+ 166)

(defparameter %sdl::+%mm-perm-ccbd+ 167)

(defparameter %sdl::+%mm-perm-ccca+ 168)

(defparameter %sdl::+%mm-perm-cccb+ 169)

(defparameter %sdl::+%mm-perm-cccc+ 170)

(defparameter %sdl::+%mm-perm-cccd+ 171)

(defparameter %sdl::+%mm-perm-ccda+ 172)

(defparameter %sdl::+%mm-perm-ccdb+ 173)

(defparameter %sdl::+%mm-perm-ccdc+ 174)

(defparameter %sdl::+%mm-perm-ccdd+ 175)

(defparameter %sdl::+%mm-perm-cdaa+ 176)

(defparameter %sdl::+%mm-perm-cdab+ 177)

(defparameter %sdl::+%mm-perm-cdac+ 178)

(defparameter %sdl::+%mm-perm-cdad+ 179)

(defparameter %sdl::+%mm-perm-cdba+ 180)

(defparameter %sdl::+%mm-perm-cdbb+ 181)

(defparameter %sdl::+%mm-perm-cdbc+ 182)

(defparameter %sdl::+%mm-perm-cdbd+ 183)

(defparameter %sdl::+%mm-perm-cdca+ 184)

(defparameter %sdl::+%mm-perm-cdcb+ 185)

(defparameter %sdl::+%mm-perm-cdcc+ 186)

(defparameter %sdl::+%mm-perm-cdcd+ 187)

(defparameter %sdl::+%mm-perm-cdda+ 188)

(defparameter %sdl::+%mm-perm-cddb+ 189)

(defparameter %sdl::+%mm-perm-cddc+ 190)

(defparameter %sdl::+%mm-perm-cddd+ 191)

(defparameter %sdl::+%mm-perm-daaa+ 192)

(defparameter %sdl::+%mm-perm-daab+ 193)

(defparameter %sdl::+%mm-perm-daac+ 194)

(defparameter %sdl::+%mm-perm-daad+ 195)

(defparameter %sdl::+%mm-perm-daba+ 196)

(defparameter %sdl::+%mm-perm-dabb+ 197)

(defparameter %sdl::+%mm-perm-dabc+ 198)

(defparameter %sdl::+%mm-perm-dabd+ 199)

(defparameter %sdl::+%mm-perm-daca+ 200)

(defparameter %sdl::+%mm-perm-dacb+ 201)

(defparameter %sdl::+%mm-perm-dacc+ 202)

(defparameter %sdl::+%mm-perm-dacd+ 203)

(defparameter %sdl::+%mm-perm-dada+ 204)

(defparameter %sdl::+%mm-perm-dadb+ 205)

(defparameter %sdl::+%mm-perm-dadc+ 206)

(defparameter %sdl::+%mm-perm-dadd+ 207)

(defparameter %sdl::+%mm-perm-dbaa+ 208)

(defparameter %sdl::+%mm-perm-dbab+ 209)

(defparameter %sdl::+%mm-perm-dbac+ 210)

(defparameter %sdl::+%mm-perm-dbad+ 211)

(defparameter %sdl::+%mm-perm-dbba+ 212)

(defparameter %sdl::+%mm-perm-dbbb+ 213)

(defparameter %sdl::+%mm-perm-dbbc+ 214)

(defparameter %sdl::+%mm-perm-dbbd+ 215)

(defparameter %sdl::+%mm-perm-dbca+ 216)

(defparameter %sdl::+%mm-perm-dbcb+ 217)

(defparameter %sdl::+%mm-perm-dbcc+ 218)

(defparameter %sdl::+%mm-perm-dbcd+ 219)

(defparameter %sdl::+%mm-perm-dbda+ 220)

(defparameter %sdl::+%mm-perm-dbdb+ 221)

(defparameter %sdl::+%mm-perm-dbdc+ 222)

(defparameter %sdl::+%mm-perm-dbdd+ 223)

(defparameter %sdl::+%mm-perm-dcaa+ 224)

(defparameter %sdl::+%mm-perm-dcab+ 225)

(defparameter %sdl::+%mm-perm-dcac+ 226)

(defparameter %sdl::+%mm-perm-dcad+ 227)

(defparameter %sdl::+%mm-perm-dcba+ 228)

(defparameter %sdl::+%mm-perm-dcbb+ 229)

(defparameter %sdl::+%mm-perm-dcbc+ 230)

(defparameter %sdl::+%mm-perm-dcbd+ 231)

(defparameter %sdl::+%mm-perm-dcca+ 232)

(defparameter %sdl::+%mm-perm-dccb+ 233)

(defparameter %sdl::+%mm-perm-dccc+ 234)

(defparameter %sdl::+%mm-perm-dccd+ 235)

(defparameter %sdl::+%mm-perm-dcda+ 236)

(defparameter %sdl::+%mm-perm-dcdb+ 237)

(defparameter %sdl::+%mm-perm-dcdc+ 238)

(defparameter %sdl::+%mm-perm-dcdd+ 239)

(defparameter %sdl::+%mm-perm-ddaa+ 240)

(defparameter %sdl::+%mm-perm-ddab+ 241)

(defparameter %sdl::+%mm-perm-ddac+ 242)

(defparameter %sdl::+%mm-perm-ddad+ 243)

(defparameter %sdl::+%mm-perm-ddba+ 244)

(defparameter %sdl::+%mm-perm-ddbb+ 245)

(defparameter %sdl::+%mm-perm-ddbc+ 246)

(defparameter %sdl::+%mm-perm-ddbd+ 247)

(defparameter %sdl::+%mm-perm-ddca+ 248)

(defparameter %sdl::+%mm-perm-ddcb+ 249)

(defparameter %sdl::+%mm-perm-ddcc+ 250)

(defparameter %sdl::+%mm-perm-ddcd+ 251)

(defparameter %sdl::+%mm-perm-ddda+ 252)

(defparameter %sdl::+%mm-perm-dddb+ 253)

(defparameter %sdl::+%mm-perm-dddc+ 254)

(defparameter %sdl::+%mm-perm-dddd+ 255)

(cffi:defctype %sdl::event-filter (claw-utils:claw-pointer :void))

(declaim (inline %sdl::add-event-watch))

(cffi:defcfun ("SDL_AddEventWatch" %sdl::add-event-watch)
              :void
              (%sdl::filter %sdl::event-filter)
              (%sdl::userdata (claw-utils:claw-pointer :void)))

(cffi:defctype %sdl::hint-callback (claw-utils:claw-pointer :void))

(declaim (inline %sdl::add-hint-callback))

(cffi:defcfun ("SDL_AddHintCallback" %sdl::add-hint-callback)
              :void
              (%sdl::name claw-utils:claw-string)
              (%sdl::callback %sdl::hint-callback)
              (%sdl::userdata (claw-utils:claw-pointer :void)))

(cffi:defctype %sdl::timer-id :int)

(cffi:defctype %sdl::uint32 :unsigned-int)

(cffi:defctype %sdl::timer-callback (claw-utils:claw-pointer :void))

(declaim (inline %sdl::add-timer))

(cffi:defcfun ("SDL_AddTimer" %sdl::add-timer)
              %sdl::timer-id
              (%sdl::interval %sdl::uint32)
              (%sdl::callback %sdl::timer-callback)
              (%sdl::param (claw-utils:claw-pointer :void)))

(cffi:defctype %sdl::uint8 :unsigned-char)

(cffi:defcstruct (%sdl::color :size 4)
                 (%sdl::r %sdl::uint8 :offset 0)
                 (%sdl::g %sdl::uint8 :offset 1)
                 (%sdl::b %sdl::uint8 :offset 2)
                 (%sdl::a %sdl::uint8 :offset 3))

(cffi:defctype %sdl::color (:struct %sdl::color))

(cffi:defcstruct (%sdl::palette :size 24)
                 (%sdl::ncolors :int :offset 0)
                 (%sdl::colors (claw-utils:claw-pointer %sdl::color)
                  :offset 8)
                 (%sdl::version %sdl::uint32 :offset 16)
                 (%sdl::refcount :int :offset 20))

(cffi:defctype %sdl::palette (:struct %sdl::palette))

(cffi:defcstruct (%sdl::pixel-format :size 56))

(cffi:defcstruct (%sdl::pixel-format :size 56)
                 (%sdl::format %sdl::uint32 :offset 0)
                 (%sdl::palette
                  (claw-utils:claw-pointer %sdl::palette) :offset 8)
                 (%sdl::bits-per-pixel %sdl::uint8 :offset 16)
                 (%sdl::bytes-per-pixel %sdl::uint8 :offset 17)
                 (%sdl::padding %sdl::uint8 :count 2 :offset 18)
                 (%sdl::rmask %sdl::uint32 :offset 20)
                 (%sdl::gmask %sdl::uint32 :offset 24)
                 (%sdl::bmask %sdl::uint32 :offset 28)
                 (%sdl::amask %sdl::uint32 :offset 32)
                 (%sdl::rloss %sdl::uint8 :offset 36)
                 (%sdl::gloss %sdl::uint8 :offset 37)
                 (%sdl::bloss %sdl::uint8 :offset 38)
                 (%sdl::aloss %sdl::uint8 :offset 39)
                 (%sdl::rshift %sdl::uint8 :offset 40)
                 (%sdl::gshift %sdl::uint8 :offset 41)
                 (%sdl::bshift %sdl::uint8 :offset 42)
                 (%sdl::ashift %sdl::uint8 :offset 43)
                 (%sdl::refcount :int :offset 44)
                 (%sdl::next
                  (claw-utils:claw-pointer
                   (:struct %sdl::pixel-format))
                  :offset 48))

(cffi:defctype %sdl::pixel-format (:struct %sdl::pixel-format))

(declaim (inline %sdl::alloc-format))

(cffi:defcfun ("SDL_AllocFormat" %sdl::alloc-format)
              (claw-utils:claw-pointer %sdl::pixel-format)
              (%sdl::pixel-format %sdl::uint32))

(declaim (inline %sdl::alloc-palette))

(cffi:defcfun ("SDL_AllocPalette" %sdl::alloc-palette)
              (claw-utils:claw-pointer %sdl::palette)
              (%sdl::ncolors :int))

(cffi:defctype %sdl::bool %sdl::|C:@EA@SDL-BOOL|)

(cffi:defctype %sdl::size-t :unsigned-long-long)

(cffi:defcstruct (%sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3337@S@SDL-RWOPS.H@3416|
                  :size 24)
                 (%sdl::data (claw-utils:claw-pointer :void) :offset
                  0)
                 (%sdl::size %sdl::size-t :offset 8)
                 (%sdl::left %sdl::size-t :offset 16))

(cffi:defcstruct (%sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3337|
                  :size 40)
                 (%sdl::append %sdl::bool :offset 0)
                 (%sdl::h (claw-utils:claw-pointer :void) :offset 8)
                 (%sdl::buffer
                  (:struct
                   %sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3337@S@SDL-RWOPS.H@3416|)
                  :offset 16))

(cffi:defcstruct (%sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3705|
                  :size 24)
                 (%sdl::base (claw-utils:claw-pointer %sdl::uint8)
                  :offset 0)
                 (%sdl::here (claw-utils:claw-pointer %sdl::uint8)
                  :offset 8)
                 (%sdl::stop (claw-utils:claw-pointer %sdl::uint8)
                  :offset 16))

(cffi:defcstruct (%sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3820|
                  :size 16)
                 (%sdl::data1 (claw-utils:claw-pointer :void) :offset
                  0)
                 (%sdl::data2 (claw-utils:claw-pointer :void) :offset
                  8))

(cffi:defcunion (%sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176| :size 40)
                (%sdl::windowsio
                 (:struct
                  %sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3337|))
                (%sdl::mem
                 (:struct
                  %sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3705|))
                (%sdl::unknown
                 (:struct
                  %sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3820|)))

(cffi:defcstruct (%sdl::r-wops :size 88)
                 (%sdl::size (claw-utils:claw-pointer :void) :offset
                  0)
                 (%sdl::seek (claw-utils:claw-pointer :void) :offset
                  8)
                 (%sdl::read (claw-utils:claw-pointer :void) :offset
                  16)
                 (%sdl::write (claw-utils:claw-pointer :void) :offset
                  24)
                 (%sdl::close (claw-utils:claw-pointer :void) :offset
                  32)
                 (%sdl::type %sdl::uint32 :offset 40)
                 (%sdl::hidden
                  (:union %sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176|)
                  :offset 48))

(cffi:defctype %sdl::r-wops (:struct %sdl::r-wops))

(declaim (inline %sdl::alloc-rw))

(cffi:defcfun ("SDL_AllocRW" %sdl::alloc-rw)
              (claw-utils:claw-pointer %sdl::r-wops))

(cffi:defcstruct (%sdl::|C:@SA@SDL-ATOMIC-T| :size 4)
                 (%sdl::value :int :offset 0))

(cffi:defctype %sdl::atomic-t (:struct %sdl::|C:@SA@SDL-ATOMIC-T|))

(declaim (inline %sdl::atomic-add))

(cffi:defcfun ("SDL_AtomicAdd" %sdl::atomic-add)
              :int
              (%sdl::a (claw-utils:claw-pointer %sdl::atomic-t))
              (%sdl::v :int))

(declaim (inline %sdl::atomic-cas))

(cffi:defcfun ("SDL_AtomicCAS" %sdl::atomic-cas)
              %sdl::bool
              (%sdl::a (claw-utils:claw-pointer %sdl::atomic-t))
              (%sdl::oldval :int)
              (%sdl::newval :int))

(declaim (inline %sdl::atomic-cas-ptr))

(cffi:defcfun ("SDL_AtomicCASPtr" %sdl::atomic-cas-ptr)
              %sdl::bool
              (%sdl::a
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer :void)))
              (%sdl::oldval (claw-utils:claw-pointer :void))
              (%sdl::newval (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::atomic-get))

(cffi:defcfun ("SDL_AtomicGet" %sdl::atomic-get)
              :int
              (%sdl::a (claw-utils:claw-pointer %sdl::atomic-t)))

(declaim (inline %sdl::atomic-get-ptr))

(cffi:defcfun ("SDL_AtomicGetPtr" %sdl::atomic-get-ptr)
              (claw-utils:claw-pointer :void)
              (%sdl::a
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer :void))))

(cffi:defctype %sdl::spin-lock :int)

(declaim (inline %sdl::atomic-lock))

(cffi:defcfun ("SDL_AtomicLock" %sdl::atomic-lock)
              :void
              (%sdl::lock (claw-utils:claw-pointer %sdl::spin-lock)))

(declaim (inline %sdl::atomic-set))

(cffi:defcfun ("SDL_AtomicSet" %sdl::atomic-set)
              :int
              (%sdl::a (claw-utils:claw-pointer %sdl::atomic-t))
              (%sdl::v :int))

(declaim (inline %sdl::atomic-set-ptr))

(cffi:defcfun ("SDL_AtomicSetPtr" %sdl::atomic-set-ptr)
              (claw-utils:claw-pointer :void)
              (%sdl::a
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer :void)))
              (%sdl::v (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::atomic-try-lock))

(cffi:defcfun ("SDL_AtomicTryLock" %sdl::atomic-try-lock)
              %sdl::bool
              (%sdl::lock (claw-utils:claw-pointer %sdl::spin-lock)))

(declaim (inline %sdl::atomic-unlock))

(cffi:defcfun ("SDL_AtomicUnlock" %sdl::atomic-unlock)
              :void
              (%sdl::lock (claw-utils:claw-pointer %sdl::spin-lock)))

(declaim (inline %sdl::audio-init))

(cffi:defcfun ("SDL_AudioInit" %sdl::audio-init)
              :int
              (%sdl::driver-name claw-utils:claw-string))

(declaim (inline %sdl::audio-quit))

(cffi:defcfun ("SDL_AudioQuit" %sdl::audio-quit) :void)

(cffi:defcstruct (%sdl::%sdl-audio-stream :size 0))

(cffi:defctype %sdl::audio-stream (:struct %sdl::%sdl-audio-stream))

(declaim (inline %sdl::audio-stream-available))

(cffi:defcfun ("SDL_AudioStreamAvailable"
               %sdl::audio-stream-available)
              :int
              (%sdl::stream
               (claw-utils:claw-pointer %sdl::audio-stream)))

(declaim (inline %sdl::audio-stream-clear))

(cffi:defcfun ("SDL_AudioStreamClear" %sdl::audio-stream-clear)
              :void
              (%sdl::stream
               (claw-utils:claw-pointer %sdl::audio-stream)))

(declaim (inline %sdl::audio-stream-flush))

(cffi:defcfun ("SDL_AudioStreamFlush" %sdl::audio-stream-flush)
              :int
              (%sdl::stream
               (claw-utils:claw-pointer %sdl::audio-stream)))

(declaim (inline %sdl::audio-stream-get))

(cffi:defcfun ("SDL_AudioStreamGet" %sdl::audio-stream-get)
              :int
              (%sdl::stream
               (claw-utils:claw-pointer %sdl::audio-stream))
              (%sdl::buf (claw-utils:claw-pointer :void))
              (%sdl::len :int))

(declaim (inline %sdl::audio-stream-put))

(cffi:defcfun ("SDL_AudioStreamPut" %sdl::audio-stream-put)
              :int
              (%sdl::stream
               (claw-utils:claw-pointer %sdl::audio-stream))
              (%sdl::buf (claw-utils:claw-pointer :void))
              (%sdl::len :int))

(cffi:defctype %sdl::audio-format :unsigned-short)

(cffi:defctype %sdl::audio-filter (claw-utils:claw-pointer :void))

(cffi:defcstruct (%sdl::audio-cvt :size 128)
                 (%sdl::needed :int :offset 0)
                 (%sdl::src-format %sdl::audio-format :offset 4)
                 (%sdl::dst-format %sdl::audio-format :offset 6)
                 (%sdl::rate-incr :double :offset 8)
                 (%sdl::buf (claw-utils:claw-pointer %sdl::uint8)
                  :offset 16)
                 (%sdl::len :int :offset 24)
                 (%sdl::len-cvt :int :offset 28)
                 (%sdl::len-mult :int :offset 32)
                 (%sdl::len-ratio :double :offset 36)
                 (%sdl::filters %sdl::audio-filter :count 10 :offset
                  44)
                 (%sdl::filter-index :int :offset 124))

(cffi:defctype %sdl::audio-cvt (:struct %sdl::audio-cvt))

(declaim (inline %sdl::build-audio-cvt))

(cffi:defcfun ("SDL_BuildAudioCVT" %sdl::build-audio-cvt)
              :int
              (%sdl::cvt (claw-utils:claw-pointer %sdl::audio-cvt))
              (%sdl::src-format %sdl::audio-format)
              (%sdl::src-channels %sdl::uint8)
              (%sdl::src-rate :int)
              (%sdl::dst-format %sdl::audio-format)
              (%sdl::dst-channels %sdl::uint8)
              (%sdl::dst-rate :int))

(cffi:defctype %sdl::uint16 :unsigned-short)

(declaim (inline %sdl::calculate-gamma-ramp))

(cffi:defcfun ("SDL_CalculateGammaRamp" %sdl::calculate-gamma-ramp)
              :void
              (%sdl::gamma :float)
              (%sdl::ramp (claw-utils:claw-pointer %sdl::uint16)))

(declaim (inline %sdl::capture-mouse))

(cffi:defcfun ("SDL_CaptureMouse" %sdl::capture-mouse)
              :int
              (%sdl::enabled %sdl::bool))

(declaim (inline %sdl::clear-composition))

(cffi:defcfun ("SDL_ClearComposition" %sdl::clear-composition) :void)

(declaim (inline %sdl::clear-error))

(cffi:defcfun ("SDL_ClearError" %sdl::clear-error) :void)

(declaim (inline %sdl::clear-hints))

(cffi:defcfun ("SDL_ClearHints" %sdl::clear-hints) :void)

(cffi:defctype %sdl::audio-device-id :unsigned-int)

(declaim (inline %sdl::clear-queued-audio))

(cffi:defcfun ("SDL_ClearQueuedAudio" %sdl::clear-queued-audio)
              :void
              (%sdl::dev %sdl::audio-device-id))

(declaim (inline %sdl::close-audio))

(cffi:defcfun ("SDL_CloseAudio" %sdl::close-audio) :void)

(declaim (inline %sdl::close-audio-device))

(cffi:defcfun ("SDL_CloseAudioDevice" %sdl::close-audio-device)
              :void
              (%sdl::dev %sdl::audio-device-id))

(cffi:defctype %sdl::blend-mode %sdl::|C:@EA@SDL-BLEND-MODE|)

(cffi:defctype %sdl::blend-factor %sdl::|C:@EA@SDL-BLEND-FACTOR|)

(cffi:defctype %sdl::blend-operation
               %sdl::|C:@EA@SDL-BLEND-OPERATION|)

(declaim (inline %sdl::compose-custom-blend-mode))

(cffi:defcfun ("SDL_ComposeCustomBlendMode"
               %sdl::compose-custom-blend-mode)
              %sdl::blend-mode
              (%sdl::src-color-factor %sdl::blend-factor)
              (%sdl::dst-color-factor %sdl::blend-factor)
              (%sdl::color-operation %sdl::blend-operation)
              (%sdl::src-alpha-factor %sdl::blend-factor)
              (%sdl::dst-alpha-factor %sdl::blend-factor)
              (%sdl::alpha-operation %sdl::blend-operation))

(cffi:defcstruct (%sdl::cond :size 0))

(cffi:defctype %sdl::cond (:struct %sdl::cond))

(declaim (inline %sdl::cond-broadcast))

(cffi:defcfun ("SDL_CondBroadcast" %sdl::cond-broadcast)
              :int
              (%sdl::cond (claw-utils:claw-pointer %sdl::cond)))

(declaim (inline %sdl::cond-signal))

(cffi:defcfun ("SDL_CondSignal" %sdl::cond-signal)
              :int
              (%sdl::cond (claw-utils:claw-pointer %sdl::cond)))

(cffi:defcstruct (%sdl::mutex :size 0))

(cffi:defctype %sdl::mutex (:struct %sdl::mutex))

(declaim (inline %sdl::cond-wait))

(cffi:defcfun ("SDL_CondWait" %sdl::cond-wait)
              :int
              (%sdl::cond (claw-utils:claw-pointer %sdl::cond))
              (%sdl::mutex (claw-utils:claw-pointer %sdl::mutex)))

(declaim (inline %sdl::cond-wait-timeout))

(cffi:defcfun ("SDL_CondWaitTimeout" %sdl::cond-wait-timeout)
              :int
              (%sdl::cond (claw-utils:claw-pointer %sdl::cond))
              (%sdl::mutex (claw-utils:claw-pointer %sdl::mutex))
              (%sdl::ms %sdl::uint32))

(declaim (inline %sdl::convert-audio))

(cffi:defcfun ("SDL_ConvertAudio" %sdl::convert-audio)
              :int
              (%sdl::cvt (claw-utils:claw-pointer %sdl::audio-cvt)))

(declaim (inline %sdl::convert-pixels))

(cffi:defcfun ("SDL_ConvertPixels" %sdl::convert-pixels)
              :int
              (%sdl::width :int)
              (%sdl::height :int)
              (%sdl::src-format %sdl::uint32)
              (%sdl::src (claw-utils:claw-pointer :void))
              (%sdl::src-pitch :int)
              (%sdl::dst-format %sdl::uint32)
              (%sdl::dst (claw-utils:claw-pointer :void))
              (%sdl::dst-pitch :int))

(cffi:defcstruct (%sdl::rect :size 16)
                 (%sdl::x :int :offset 0)
                 (%sdl::y :int :offset 4)
                 (%sdl::w :int :offset 8)
                 (%sdl::h :int :offset 12))

(cffi:defctype %sdl::rect (:struct %sdl::rect))

(cffi:defcstruct (%sdl::blit-map :size 0))

(cffi:defctype %sdl::blit-map (:struct %sdl::blit-map))

(cffi:defcstruct (%sdl::surface :size 96)
                 (%sdl::flags %sdl::uint32 :offset 0)
                 (%sdl::format
                  (claw-utils:claw-pointer %sdl::pixel-format)
                  :offset 8)
                 (%sdl::w :int :offset 16)
                 (%sdl::h :int :offset 20)
                 (%sdl::pitch :int :offset 24)
                 (%sdl::pixels (claw-utils:claw-pointer :void)
                  :offset 32)
                 (%sdl::userdata (claw-utils:claw-pointer :void)
                  :offset 40)
                 (%sdl::locked :int :offset 48)
                 (%sdl::list-blitmap (claw-utils:claw-pointer :void)
                  :offset 56)
                 (%sdl::clip-rect %sdl::rect :offset 64)
                 (%sdl::map (claw-utils:claw-pointer %sdl::blit-map)
                  :offset 80)
                 (%sdl::refcount :int :offset 88))

(cffi:defctype %sdl::surface (:struct %sdl::surface))

(declaim (inline %sdl::convert-surface))

(cffi:defcfun ("SDL_ConvertSurface" %sdl::convert-surface)
              (claw-utils:claw-pointer %sdl::surface)
              (%sdl::src (claw-utils:claw-pointer %sdl::surface))
              (%sdl::fmt
               (claw-utils:claw-pointer %sdl::pixel-format))
              (%sdl::flags %sdl::uint32))

(declaim (inline %sdl::convert-surface-format))

(cffi:defcfun ("SDL_ConvertSurfaceFormat"
               %sdl::convert-surface-format)
              (claw-utils:claw-pointer %sdl::surface)
              (%sdl::src (claw-utils:claw-pointer %sdl::surface))
              (%sdl::pixel-format %sdl::uint32)
              (%sdl::flags %sdl::uint32))

(cffi:defcstruct (%sdl::cursor :size 0))

(cffi:defctype %sdl::cursor (:struct %sdl::cursor))

(declaim (inline %sdl::create-color-cursor))

(cffi:defcfun ("SDL_CreateColorCursor" %sdl::create-color-cursor)
              (claw-utils:claw-pointer %sdl::cursor)
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::hot-x :int)
              (%sdl::hot-y :int))

(declaim (inline %sdl::create-cond))

(cffi:defcfun ("SDL_CreateCond" %sdl::create-cond)
              (claw-utils:claw-pointer %sdl::cond))

(declaim (inline %sdl::create-cursor))

(cffi:defcfun ("SDL_CreateCursor" %sdl::create-cursor)
              (claw-utils:claw-pointer %sdl::cursor)
              (%sdl::data (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::mask (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::w :int)
              (%sdl::h :int)
              (%sdl::hot-x :int)
              (%sdl::hot-y :int))

(declaim (inline %sdl::create-mutex))

(cffi:defcfun ("SDL_CreateMutex" %sdl::create-mutex)
              (claw-utils:claw-pointer %sdl::mutex))

(declaim (inline %sdl::create-rgb-surface))

(cffi:defcfun ("SDL_CreateRGBSurface" %sdl::create-rgb-surface)
              (claw-utils:claw-pointer %sdl::surface)
              (%sdl::flags %sdl::uint32)
              (%sdl::width :int)
              (%sdl::height :int)
              (%sdl::depth :int)
              (%sdl::rmask %sdl::uint32)
              (%sdl::gmask %sdl::uint32)
              (%sdl::bmask %sdl::uint32)
              (%sdl::amask %sdl::uint32))

(declaim (inline %sdl::create-rgb-surface-from))

(cffi:defcfun ("SDL_CreateRGBSurfaceFrom"
               %sdl::create-rgb-surface-from)
              (claw-utils:claw-pointer %sdl::surface)
              (%sdl::pixels (claw-utils:claw-pointer :void))
              (%sdl::width :int)
              (%sdl::height :int)
              (%sdl::depth :int)
              (%sdl::pitch :int)
              (%sdl::rmask %sdl::uint32)
              (%sdl::gmask %sdl::uint32)
              (%sdl::bmask %sdl::uint32)
              (%sdl::amask %sdl::uint32))

(declaim (inline %sdl::create-rgb-surface-with-format))

(cffi:defcfun ("SDL_CreateRGBSurfaceWithFormat"
               %sdl::create-rgb-surface-with-format)
              (claw-utils:claw-pointer %sdl::surface)
              (%sdl::flags %sdl::uint32)
              (%sdl::width :int)
              (%sdl::height :int)
              (%sdl::depth :int)
              (%sdl::format %sdl::uint32))

(declaim (inline %sdl::create-rgb-surface-with-format-from))

(cffi:defcfun ("SDL_CreateRGBSurfaceWithFormatFrom"
               %sdl::create-rgb-surface-with-format-from)
              (claw-utils:claw-pointer %sdl::surface)
              (%sdl::pixels (claw-utils:claw-pointer :void))
              (%sdl::width :int)
              (%sdl::height :int)
              (%sdl::depth :int)
              (%sdl::pitch :int)
              (%sdl::format %sdl::uint32))

(cffi:defcstruct (%sdl::renderer :size 0))

(cffi:defctype %sdl::renderer (:struct %sdl::renderer))

(cffi:defcstruct (%sdl::window :size 0))

(cffi:defctype %sdl::window (:struct %sdl::window))

(declaim (inline %sdl::create-renderer))

(cffi:defcfun ("SDL_CreateRenderer" %sdl::create-renderer)
              (claw-utils:claw-pointer %sdl::renderer)
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::index :int)
              (%sdl::flags %sdl::uint32))

(cffi:defcstruct (%sdl::semaphore :size 0))

(cffi:defctype %sdl::sem (:struct %sdl::semaphore))

(declaim (inline %sdl::create-semaphore))

(cffi:defcfun ("SDL_CreateSemaphore" %sdl::create-semaphore)
              (claw-utils:claw-pointer %sdl::sem)
              (%sdl::initial-value %sdl::uint32))

(declaim (inline %sdl::create-shaped-window))

(cffi:defcfun ("SDL_CreateShapedWindow" %sdl::create-shaped-window)
              (claw-utils:claw-pointer %sdl::window)
              (%sdl::title claw-utils:claw-string)
              (%sdl::x :unsigned-int)
              (%sdl::y :unsigned-int)
              (%sdl::w :unsigned-int)
              (%sdl::h :unsigned-int)
              (%sdl::flags %sdl::uint32))

(declaim (inline %sdl::create-software-renderer))

(cffi:defcfun ("SDL_CreateSoftwareRenderer"
               %sdl::create-software-renderer)
              (claw-utils:claw-pointer %sdl::renderer)
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface)))

(cffi:defctype %sdl::system-cursor %sdl::|C:@EA@SDL-SYSTEM-CURSOR|)

(declaim (inline %sdl::create-system-cursor))

(cffi:defcfun ("SDL_CreateSystemCursor" %sdl::create-system-cursor)
              (claw-utils:claw-pointer %sdl::cursor)
              (%sdl::id %sdl::system-cursor))

(cffi:defcstruct (%sdl::texture :size 0))

(cffi:defctype %sdl::texture (:struct %sdl::texture))

(declaim (inline %sdl::create-texture))

(cffi:defcfun ("SDL_CreateTexture" %sdl::create-texture)
              (claw-utils:claw-pointer %sdl::texture)
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::format %sdl::uint32)
              (%sdl::access :int)
              (%sdl::w :int)
              (%sdl::h :int))

(declaim (inline %sdl::create-texture-from-surface))

(cffi:defcfun ("SDL_CreateTextureFromSurface"
               %sdl::create-texture-from-surface)
              (claw-utils:claw-pointer %sdl::texture)
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface)))

(cffi:defcstruct (%sdl::thread :size 0))

(cffi:defctype %sdl::thread (:struct %sdl::thread))

(cffi:defctype %sdl::thread-function (claw-utils:claw-pointer :void))

(cffi:defctype %sdl::pfn-sdl-current-begin-thread
               (claw-utils:claw-pointer :void))

(cffi:defctype %sdl::pfn-sdl-current-end-thread
               (claw-utils:claw-pointer :void))

(declaim (inline %sdl::create-thread))

(cffi:defcfun ("SDL_CreateThread" %sdl::create-thread)
              (claw-utils:claw-pointer %sdl::thread)
              (%sdl::fn %sdl::thread-function)
              (%sdl::name claw-utils:claw-string)
              (%sdl::data (claw-utils:claw-pointer :void))
              (%sdl::pfn-begin-thread
               %sdl::pfn-sdl-current-begin-thread)
              (%sdl::pfn-end-thread %sdl::pfn-sdl-current-end-thread))

(declaim (inline %sdl::create-thread-with-stack-size))

(cffi:defcfun ("SDL_CreateThreadWithStackSize"
               %sdl::create-thread-with-stack-size)
              (claw-utils:claw-pointer %sdl::thread)
              (%sdl::fn %sdl::thread-function)
              (%sdl::name claw-utils:claw-string)
              (%sdl::stacksize %sdl::size-t)
              (%sdl::data (claw-utils:claw-pointer :void))
              (%sdl::pfn-begin-thread
               %sdl::pfn-sdl-current-begin-thread)
              (%sdl::pfn-end-thread %sdl::pfn-sdl-current-end-thread))

(declaim (inline %sdl::create-window))

(cffi:defcfun ("SDL_CreateWindow" %sdl::create-window)
              (claw-utils:claw-pointer %sdl::window)
              (%sdl::title claw-utils:claw-string)
              (%sdl::x :int)
              (%sdl::y :int)
              (%sdl::w :int)
              (%sdl::h :int)
              (%sdl::flags %sdl::uint32))

(declaim (inline %sdl::create-window-and-renderer))

(cffi:defcfun ("SDL_CreateWindowAndRenderer"
               %sdl::create-window-and-renderer)
              :int
              (%sdl::width :int)
              (%sdl::height :int)
              (%sdl::window-flags %sdl::uint32)
              (%sdl::window
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer %sdl::window)))
              (%sdl::renderer
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer %sdl::renderer))))

(declaim (inline %sdl::create-window-from))

(cffi:defcfun ("SDL_CreateWindowFrom" %sdl::create-window-from)
              (claw-utils:claw-pointer %sdl::window)
              (%sdl::data (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::dxgi-get-output-info))

(cffi:defcfun ("SDL_DXGIGetOutputInfo" %sdl::dxgi-get-output-info)
              %sdl::bool
              (%sdl::display-index :int)
              (%sdl::adapter-index (claw-utils:claw-pointer :int))
              (%sdl::output-index (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::del-event-watch))

(cffi:defcfun ("SDL_DelEventWatch" %sdl::del-event-watch)
              :void
              (%sdl::filter %sdl::event-filter)
              (%sdl::userdata (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::del-hint-callback))

(cffi:defcfun ("SDL_DelHintCallback" %sdl::del-hint-callback)
              :void
              (%sdl::name claw-utils:claw-string)
              (%sdl::callback %sdl::hint-callback)
              (%sdl::userdata (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::delay))

(cffi:defcfun ("SDL_Delay" %sdl::delay) :void (%sdl::ms %sdl::uint32))

(declaim (inline %sdl::dequeue-audio))

(cffi:defcfun ("SDL_DequeueAudio" %sdl::dequeue-audio)
              %sdl::uint32
              (%sdl::dev %sdl::audio-device-id)
              (%sdl::data (claw-utils:claw-pointer :void))
              (%sdl::len %sdl::uint32))

(declaim (inline %sdl::destroy-cond))

(cffi:defcfun ("SDL_DestroyCond" %sdl::destroy-cond)
              :void
              (%sdl::cond (claw-utils:claw-pointer %sdl::cond)))

(declaim (inline %sdl::destroy-mutex))

(cffi:defcfun ("SDL_DestroyMutex" %sdl::destroy-mutex)
              :void
              (%sdl::mutex (claw-utils:claw-pointer %sdl::mutex)))

(declaim (inline %sdl::destroy-renderer))

(cffi:defcfun ("SDL_DestroyRenderer" %sdl::destroy-renderer)
              :void
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(declaim (inline %sdl::destroy-semaphore))

(cffi:defcfun ("SDL_DestroySemaphore" %sdl::destroy-semaphore)
              :void
              (%sdl::sem (claw-utils:claw-pointer %sdl::sem)))

(declaim (inline %sdl::destroy-texture))

(cffi:defcfun ("SDL_DestroyTexture" %sdl::destroy-texture)
              :void
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture)))

(declaim (inline %sdl::destroy-window))

(cffi:defcfun ("SDL_DestroyWindow" %sdl::destroy-window)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::detach-thread))

(cffi:defcfun ("SDL_DetachThread" %sdl::detach-thread)
              :void
              (%sdl::thread (claw-utils:claw-pointer %sdl::thread)))

(declaim (inline %sdl::direct3d9get-adapter-index))

(cffi:defcfun ("SDL_Direct3D9GetAdapterIndex"
               %sdl::direct3d9get-adapter-index)
              :int
              (%sdl::display-index :int))

(declaim (inline %sdl::disable-screen-saver))

(cffi:defcfun ("SDL_DisableScreenSaver" %sdl::disable-screen-saver)
              :void)

(declaim (inline %sdl::duplicate-surface))

(cffi:defcfun ("SDL_DuplicateSurface" %sdl::duplicate-surface)
              (claw-utils:claw-pointer %sdl::surface)
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface)))

(declaim (inline %sdl::enable-screen-saver))

(cffi:defcfun ("SDL_EnableScreenSaver" %sdl::enable-screen-saver)
              :void)

(cffi:defcstruct (%sdl::f-point :size 8)
                 (%sdl::x :float :offset 0)
                 (%sdl::y :float :offset 4))

(cffi:defctype %sdl::f-point (:struct %sdl::f-point))

(cffi:defcstruct (%sdl::f-rect :size 16)
                 (%sdl::x :float :offset 0)
                 (%sdl::y :float :offset 4)
                 (%sdl::w :float :offset 8)
                 (%sdl::h :float :offset 12))

(cffi:defctype %sdl::f-rect (:struct %sdl::f-rect))

(declaim (inline %sdl::enclose-f-points))

(cffi:defcfun ("SDL_EncloseFPoints" %sdl::enclose-f-points)
              %sdl::bool
              (%sdl::points (claw-utils:claw-pointer %sdl::f-point))
              (%sdl::count :int)
              (%sdl::clip (claw-utils:claw-pointer %sdl::f-rect))
              (%sdl::result (claw-utils:claw-pointer %sdl::f-rect)))

(cffi:defcstruct (%sdl::point :size 8)
                 (%sdl::x :int :offset 0)
                 (%sdl::y :int :offset 4))

(cffi:defctype %sdl::point (:struct %sdl::point))

(declaim (inline %sdl::enclose-points))

(cffi:defcfun ("SDL_EnclosePoints" %sdl::enclose-points)
              %sdl::bool
              (%sdl::points (claw-utils:claw-pointer %sdl::point))
              (%sdl::count :int)
              (%sdl::clip (claw-utils:claw-pointer %sdl::rect))
              (%sdl::result (claw-utils:claw-pointer %sdl::rect)))

(cffi:defctype %sdl::errorcode %sdl::|C:@EA@SDL-ERRORCODE|)

(declaim (inline %sdl::error))

(cffi:defcfun ("SDL_Error" %sdl::error)
              :int
              (%sdl::code %sdl::errorcode))

(declaim (inline %sdl::event-state))

(cffi:defcfun ("SDL_EventState" %sdl::event-state)
              %sdl::uint8
              (%sdl::type %sdl::uint32)
              (%sdl::state :int))

(declaim (inline %sdl::fill-rect))

(cffi:defcfun ("SDL_FillRect" %sdl::fill-rect)
              :int
              (%sdl::dst (claw-utils:claw-pointer %sdl::surface))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::color %sdl::uint32))

(declaim (inline %sdl::fill-rects))

(cffi:defcfun ("SDL_FillRects" %sdl::fill-rects)
              :int
              (%sdl::dst (claw-utils:claw-pointer %sdl::surface))
              (%sdl::rects (claw-utils:claw-pointer %sdl::rect))
              (%sdl::count :int)
              (%sdl::color %sdl::uint32))

(declaim (inline %sdl::filter-events))

(cffi:defcfun ("SDL_FilterEvents" %sdl::filter-events)
              :void
              (%sdl::filter %sdl::event-filter)
              (%sdl::userdata (claw-utils:claw-pointer :void)))

(cffi:defctype %sdl::flash-operation
               %sdl::|C:@EA@SDL-FLASH-OPERATION|)

(declaim (inline %sdl::flash-window))

(cffi:defcfun ("SDL_FlashWindow" %sdl::flash-window)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::operation %sdl::flash-operation))

(declaim (inline %sdl::flush-event))

(cffi:defcfun ("SDL_FlushEvent" %sdl::flush-event)
              :void
              (%sdl::type %sdl::uint32))

(declaim (inline %sdl::flush-events))

(cffi:defcfun ("SDL_FlushEvents" %sdl::flush-events)
              :void
              (%sdl::min-type %sdl::uint32)
              (%sdl::max-type %sdl::uint32))

(declaim (inline %sdl::free-audio-stream))

(cffi:defcfun ("SDL_FreeAudioStream" %sdl::free-audio-stream)
              :void
              (%sdl::stream
               (claw-utils:claw-pointer %sdl::audio-stream)))

(declaim (inline %sdl::free-cursor))

(cffi:defcfun ("SDL_FreeCursor" %sdl::free-cursor)
              :void
              (%sdl::cursor (claw-utils:claw-pointer %sdl::cursor)))

(declaim (inline %sdl::free-format))

(cffi:defcfun ("SDL_FreeFormat" %sdl::free-format)
              :void
              (%sdl::format
               (claw-utils:claw-pointer %sdl::pixel-format)))

(declaim (inline %sdl::free-palette))

(cffi:defcfun ("SDL_FreePalette" %sdl::free-palette)
              :void
              (%sdl::palette (claw-utils:claw-pointer %sdl::palette)))

(declaim (inline %sdl::free-rw))

(cffi:defcfun ("SDL_FreeRW" %sdl::free-rw)
              :void
              (%sdl::area (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::free-surface))

(cffi:defcfun ("SDL_FreeSurface" %sdl::free-surface)
              :void
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface)))

(declaim (inline %sdl::free-wav))

(cffi:defcfun ("SDL_FreeWAV" %sdl::free-wav)
              :void
              (%sdl::audio-buf (claw-utils:claw-pointer %sdl::uint8)))

(declaim (inline %sdl::gl-bind-texture))

(cffi:defcfun ("SDL_GL_BindTexture" %sdl::gl-bind-texture)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::texw (claw-utils:claw-pointer :float))
              (%sdl::texh (claw-utils:claw-pointer :float)))

(cffi:defctype %sdl::gl-context (claw-utils:claw-pointer :void))

(declaim (inline %sdl::gl-create-context))

(cffi:defcfun ("SDL_GL_CreateContext" %sdl::gl-create-context)
              %sdl::gl-context
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::gl-delete-context))

(cffi:defcfun ("SDL_GL_DeleteContext" %sdl::gl-delete-context)
              :void
              (%sdl::context %sdl::gl-context))

(declaim (inline %sdl::gl-extension-supported))

(cffi:defcfun ("SDL_GL_ExtensionSupported"
               %sdl::gl-extension-supported)
              %sdl::bool
              (%sdl::extension claw-utils:claw-string))

(cffi:defctype %sdl::g-lattr %sdl::|C:@EA@SDL-G-LATTR|)

(declaim (inline %sdl::gl-get-attribute))

(cffi:defcfun ("SDL_GL_GetAttribute" %sdl::gl-get-attribute)
              :int
              (%sdl::attr %sdl::g-lattr)
              (%sdl::value (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::gl-get-current-context))

(cffi:defcfun ("SDL_GL_GetCurrentContext"
               %sdl::gl-get-current-context)
              %sdl::gl-context)

(declaim (inline %sdl::gl-get-current-window))

(cffi:defcfun ("SDL_GL_GetCurrentWindow" %sdl::gl-get-current-window)
              (claw-utils:claw-pointer %sdl::window))

(declaim (inline %sdl::gl-get-drawable-size))

(cffi:defcfun ("SDL_GL_GetDrawableSize" %sdl::gl-get-drawable-size)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::w (claw-utils:claw-pointer :int))
              (%sdl::h (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::gl-get-proc-address))

(cffi:defcfun ("SDL_GL_GetProcAddress" %sdl::gl-get-proc-address)
              (claw-utils:claw-pointer :void)
              (%sdl::proc claw-utils:claw-string))

(declaim (inline %sdl::gl-get-swap-interval))

(cffi:defcfun ("SDL_GL_GetSwapInterval" %sdl::gl-get-swap-interval)
              :int)

(declaim (inline %sdl::gl-load-library))

(cffi:defcfun ("SDL_GL_LoadLibrary" %sdl::gl-load-library)
              :int
              (%sdl::path claw-utils:claw-string))

(declaim (inline %sdl::gl-make-current))

(cffi:defcfun ("SDL_GL_MakeCurrent" %sdl::gl-make-current)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::context %sdl::gl-context))

(declaim (inline %sdl::gl-reset-attributes))

(cffi:defcfun ("SDL_GL_ResetAttributes" %sdl::gl-reset-attributes)
              :void)

(declaim (inline %sdl::gl-set-attribute))

(cffi:defcfun ("SDL_GL_SetAttribute" %sdl::gl-set-attribute)
              :int
              (%sdl::attr %sdl::g-lattr)
              (%sdl::value :int))

(declaim (inline %sdl::gl-set-swap-interval))

(cffi:defcfun ("SDL_GL_SetSwapInterval" %sdl::gl-set-swap-interval)
              :int
              (%sdl::interval :int))

(declaim (inline %sdl::gl-swap-window))

(cffi:defcfun ("SDL_GL_SwapWindow" %sdl::gl-swap-window)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::gl-unbind-texture))

(cffi:defcfun ("SDL_GL_UnbindTexture" %sdl::gl-unbind-texture)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture)))

(declaim (inline %sdl::gl-unload-library))

(cffi:defcfun ("SDL_GL_UnloadLibrary" %sdl::gl-unload-library) :void)

(cffi:defcstruct (%sdl::|C:@SA@SDL-GUID| :size 16)
                 (%sdl::data %sdl::uint8 :count 16 :offset 0))

(cffi:defctype %sdl::guid (:struct %sdl::|C:@SA@SDL-GUID|))

(declaim (inline %sdl::guid-from-string))

(cffi:defcfun ("__claw_SDL_GUIDFromString" %sdl::guid-from-string)
              (claw-utils:claw-pointer %sdl::guid)
              (%sdl::%%claw-result-
               (claw-utils:claw-pointer %sdl::guid))
              (%sdl::pch-guid claw-utils:claw-string))

(declaim (inline %sdl::guid-to-string))

(cffi:defcfun ("__claw_SDL_GUIDToString" %sdl::guid-to-string)
              :void
              (%sdl::guid (claw-utils:claw-pointer %sdl::guid))
              (%sdl::psz-guid claw-utils:claw-string)
              (%sdl::cb-guid :int))

(declaim (inline %sdl::game-controller-add-mapping))

(cffi:defcfun ("SDL_GameControllerAddMapping"
               %sdl::game-controller-add-mapping)
              :int
              (%sdl::mapping-string claw-utils:claw-string))

(declaim (inline %sdl::game-controller-add-mappings-from-rw))

(cffi:defcfun ("SDL_GameControllerAddMappingsFromRW"
               %sdl::game-controller-add-mappings-from-rw)
              :int
              (%sdl::rw (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::freerw :int))

(cffi:defcstruct (%sdl::%sdl-game-controller :size 0))

(cffi:defctype %sdl::game-controller
               (:struct %sdl::%sdl-game-controller))

(declaim (inline %sdl::game-controller-close))

(cffi:defcfun ("SDL_GameControllerClose" %sdl::game-controller-close)
              :void
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-event-state))

(cffi:defcfun ("SDL_GameControllerEventState"
               %sdl::game-controller-event-state)
              :int
              (%sdl::state :int))

(cffi:defctype %sdl::joystick-id :int)

(declaim (inline %sdl::game-controller-from-instance-id))

(cffi:defcfun ("SDL_GameControllerFromInstanceID"
               %sdl::game-controller-from-instance-id)
              (claw-utils:claw-pointer %sdl::game-controller)
              (%sdl::joyid %sdl::joystick-id))

(declaim (inline %sdl::game-controller-from-player-index))

(cffi:defcfun ("SDL_GameControllerFromPlayerIndex"
               %sdl::game-controller-from-player-index)
              (claw-utils:claw-pointer %sdl::game-controller)
              (%sdl::player-index :int))

(cffi:defctype %sdl::game-controller-axis
               %sdl::|C:@EA@SDL-GAME-CONTROLLER-AXIS|)

(declaim (inline
          %sdl::game-controller-get-apple-sf-symbols-name-for-axis))

(cffi:defcfun ("SDL_GameControllerGetAppleSFSymbolsNameForAxis"
               %sdl::game-controller-get-apple-sf-symbols-name-for-axis)
              claw-utils:claw-string
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::axis %sdl::game-controller-axis))

(cffi:defctype %sdl::game-controller-button
               %sdl::|C:@EA@SDL-GAME-CONTROLLER-BUTTON|)

(declaim (inline
          %sdl::game-controller-get-apple-sf-symbols-name-for-button))

(cffi:defcfun ("SDL_GameControllerGetAppleSFSymbolsNameForButton"
               %sdl::game-controller-get-apple-sf-symbols-name-for-button)
              claw-utils:claw-string
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::button %sdl::game-controller-button))

(declaim (inline %sdl::game-controller-get-attached))

(cffi:defcfun ("SDL_GameControllerGetAttached"
               %sdl::game-controller-get-attached)
              %sdl::bool
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(cffi:defctype %sdl::sint16 :short)

(declaim (inline %sdl::game-controller-get-axis))

(cffi:defcfun ("SDL_GameControllerGetAxis"
               %sdl::game-controller-get-axis)
              %sdl::sint16
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::axis %sdl::game-controller-axis))

(declaim (inline %sdl::game-controller-get-axis-from-string))

(cffi:defcfun ("SDL_GameControllerGetAxisFromString"
               %sdl::game-controller-get-axis-from-string)
              %sdl::game-controller-axis
              (%sdl::str claw-utils:claw-string))

(cffi:defctype %sdl::game-controller-bind-type
               %sdl::|C:@EA@SDL-GAME-CONTROLLER-BIND-TYPE|)

(cffi:defcstruct (%sdl::|C:@S@SDL-GAME-CONTROLLER-BUTTON-BIND@U@SDL-GAMECONTROLLER.H@2918@S@SDL-GAMECONTROLLER.H@2976|
                  :size 8)
                 (%sdl::hat :int :offset 0)
                 (%sdl::hat-mask :int :offset 4))

(cffi:defcunion (%sdl::|C:@S@SDL-GAME-CONTROLLER-BUTTON-BIND@U@SDL-GAMECONTROLLER.H@2918|
                 :size 8)
                (%sdl::button :int)
                (%sdl::axis :int)
                (%sdl::hat
                 (:struct
                  %sdl::|C:@S@SDL-GAME-CONTROLLER-BUTTON-BIND@U@SDL-GAMECONTROLLER.H@2918@S@SDL-GAMECONTROLLER.H@2976|)))

(cffi:defcstruct (%sdl::game-controller-button-bind :size 12)
                 (%sdl::bind-type %sdl::game-controller-bind-type
                  :offset 0)
                 (%sdl::value
                  (:union
                   %sdl::|C:@S@SDL-GAME-CONTROLLER-BUTTON-BIND@U@SDL-GAMECONTROLLER.H@2918|)
                  :offset 4))

(cffi:defctype %sdl::game-controller-button-bind
               (:struct %sdl::game-controller-button-bind))

(declaim (inline %sdl::game-controller-get-bind-for-axis))

(cffi:defcfun ("__claw_SDL_GameControllerGetBindForAxis"
               %sdl::game-controller-get-bind-for-axis)
              (claw-utils:claw-pointer
               %sdl::game-controller-button-bind)
              (%sdl::%%claw-result-
               (claw-utils:claw-pointer
                %sdl::game-controller-button-bind))
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::axis %sdl::game-controller-axis))

(declaim (inline %sdl::game-controller-get-bind-for-button))

(cffi:defcfun ("__claw_SDL_GameControllerGetBindForButton"
               %sdl::game-controller-get-bind-for-button)
              (claw-utils:claw-pointer
               %sdl::game-controller-button-bind)
              (%sdl::%%claw-result-
               (claw-utils:claw-pointer
                %sdl::game-controller-button-bind))
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::button %sdl::game-controller-button))

(declaim (inline %sdl::game-controller-get-button))

(cffi:defcfun ("SDL_GameControllerGetButton"
               %sdl::game-controller-get-button)
              %sdl::uint8
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::button %sdl::game-controller-button))

(declaim (inline %sdl::game-controller-get-button-from-string))

(cffi:defcfun ("SDL_GameControllerGetButtonFromString"
               %sdl::game-controller-get-button-from-string)
              %sdl::game-controller-button
              (%sdl::str claw-utils:claw-string))

(declaim (inline %sdl::game-controller-get-firmware-version))

(cffi:defcfun ("SDL_GameControllerGetFirmwareVersion"
               %sdl::game-controller-get-firmware-version)
              %sdl::uint16
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(cffi:defcstruct (%sdl::%sdl-joystick :size 0))

(cffi:defctype %sdl::joystick (:struct %sdl::%sdl-joystick))

(declaim (inline %sdl::game-controller-get-joystick))

(cffi:defcfun ("SDL_GameControllerGetJoystick"
               %sdl::game-controller-get-joystick)
              (claw-utils:claw-pointer %sdl::joystick)
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-get-num-touchpad-fingers))

(cffi:defcfun ("SDL_GameControllerGetNumTouchpadFingers"
               %sdl::game-controller-get-num-touchpad-fingers)
              :int
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::touchpad :int))

(declaim (inline %sdl::game-controller-get-num-touchpads))

(cffi:defcfun ("SDL_GameControllerGetNumTouchpads"
               %sdl::game-controller-get-num-touchpads)
              :int
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-get-player-index))

(cffi:defcfun ("SDL_GameControllerGetPlayerIndex"
               %sdl::game-controller-get-player-index)
              :int
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-get-product))

(cffi:defcfun ("SDL_GameControllerGetProduct"
               %sdl::game-controller-get-product)
              %sdl::uint16
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-get-product-version))

(cffi:defcfun ("SDL_GameControllerGetProductVersion"
               %sdl::game-controller-get-product-version)
              %sdl::uint16
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(cffi:defctype %sdl::sensor-type %sdl::|C:@EA@SDL-SENSOR-TYPE|)

(declaim (inline %sdl::game-controller-get-sensor-data))

(cffi:defcfun ("SDL_GameControllerGetSensorData"
               %sdl::game-controller-get-sensor-data)
              :int
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::type %sdl::sensor-type)
              (%sdl::data (claw-utils:claw-pointer :float))
              (%sdl::num-values :int))

(declaim (inline %sdl::game-controller-get-sensor-data-rate))

(cffi:defcfun ("SDL_GameControllerGetSensorDataRate"
               %sdl::game-controller-get-sensor-data-rate)
              :float
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::type %sdl::sensor-type))

(declaim (inline %sdl::game-controller-get-serial))

(cffi:defcfun ("SDL_GameControllerGetSerial"
               %sdl::game-controller-get-serial)
              claw-utils:claw-string
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-get-string-for-axis))

(cffi:defcfun ("SDL_GameControllerGetStringForAxis"
               %sdl::game-controller-get-string-for-axis)
              claw-utils:claw-string
              (%sdl::axis %sdl::game-controller-axis))

(declaim (inline %sdl::game-controller-get-string-for-button))

(cffi:defcfun ("SDL_GameControllerGetStringForButton"
               %sdl::game-controller-get-string-for-button)
              claw-utils:claw-string
              (%sdl::button %sdl::game-controller-button))

(declaim (inline %sdl::game-controller-get-touchpad-finger))

(cffi:defcfun ("SDL_GameControllerGetTouchpadFinger"
               %sdl::game-controller-get-touchpad-finger)
              :int
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::touchpad :int)
              (%sdl::finger :int)
              (%sdl::state (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::x (claw-utils:claw-pointer :float))
              (%sdl::y (claw-utils:claw-pointer :float))
              (%sdl::pressure (claw-utils:claw-pointer :float)))

(cffi:defctype %sdl::game-controller-type
               %sdl::|C:@EA@SDL-GAME-CONTROLLER-TYPE|)

(declaim (inline %sdl::game-controller-get-type))

(cffi:defcfun ("SDL_GameControllerGetType"
               %sdl::game-controller-get-type)
              %sdl::game-controller-type
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-get-vendor))

(cffi:defcfun ("SDL_GameControllerGetVendor"
               %sdl::game-controller-get-vendor)
              %sdl::uint16
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-has-axis))

(cffi:defcfun ("SDL_GameControllerHasAxis"
               %sdl::game-controller-has-axis)
              %sdl::bool
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::axis %sdl::game-controller-axis))

(declaim (inline %sdl::game-controller-has-button))

(cffi:defcfun ("SDL_GameControllerHasButton"
               %sdl::game-controller-has-button)
              %sdl::bool
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::button %sdl::game-controller-button))

(declaim (inline %sdl::game-controller-has-led))

(cffi:defcfun ("SDL_GameControllerHasLED"
               %sdl::game-controller-has-led)
              %sdl::bool
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-has-rumble))

(cffi:defcfun ("SDL_GameControllerHasRumble"
               %sdl::game-controller-has-rumble)
              %sdl::bool
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-has-rumble-triggers))

(cffi:defcfun ("SDL_GameControllerHasRumbleTriggers"
               %sdl::game-controller-has-rumble-triggers)
              %sdl::bool
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-has-sensor))

(cffi:defcfun ("SDL_GameControllerHasSensor"
               %sdl::game-controller-has-sensor)
              %sdl::bool
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::type %sdl::sensor-type))

(declaim (inline %sdl::game-controller-is-sensor-enabled))

(cffi:defcfun ("SDL_GameControllerIsSensorEnabled"
               %sdl::game-controller-is-sensor-enabled)
              %sdl::bool
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::type %sdl::sensor-type))

(declaim (inline %sdl::game-controller-mapping))

(cffi:defcfun ("SDL_GameControllerMapping"
               %sdl::game-controller-mapping)
              claw-utils:claw-string
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-mapping-for-device-index))

(cffi:defcfun ("SDL_GameControllerMappingForDeviceIndex"
               %sdl::game-controller-mapping-for-device-index)
              claw-utils:claw-string
              (%sdl::joystick-index :int))

(cffi:defctype %sdl::joystick-guid (:struct %sdl::|C:@SA@SDL-GUID|))

(declaim (inline %sdl::game-controller-mapping-for-guid))

(cffi:defcfun ("__claw_SDL_GameControllerMappingForGUID"
               %sdl::game-controller-mapping-for-guid)
              claw-utils:claw-string
              (%sdl::guid
               (claw-utils:claw-pointer %sdl::joystick-guid)))

(declaim (inline %sdl::game-controller-mapping-for-index))

(cffi:defcfun ("SDL_GameControllerMappingForIndex"
               %sdl::game-controller-mapping-for-index)
              claw-utils:claw-string
              (%sdl::mapping-index :int))

(declaim (inline %sdl::game-controller-name))

(cffi:defcfun ("SDL_GameControllerName" %sdl::game-controller-name)
              claw-utils:claw-string
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-name-for-index))

(cffi:defcfun ("SDL_GameControllerNameForIndex"
               %sdl::game-controller-name-for-index)
              claw-utils:claw-string
              (%sdl::joystick-index :int))

(declaim (inline %sdl::game-controller-num-mappings))

(cffi:defcfun ("SDL_GameControllerNumMappings"
               %sdl::game-controller-num-mappings)
              :int)

(declaim (inline %sdl::game-controller-open))

(cffi:defcfun ("SDL_GameControllerOpen" %sdl::game-controller-open)
              (claw-utils:claw-pointer %sdl::game-controller)
              (%sdl::joystick-index :int))

(declaim (inline %sdl::game-controller-path))

(cffi:defcfun ("SDL_GameControllerPath" %sdl::game-controller-path)
              claw-utils:claw-string
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller)))

(declaim (inline %sdl::game-controller-path-for-index))

(cffi:defcfun ("SDL_GameControllerPathForIndex"
               %sdl::game-controller-path-for-index)
              claw-utils:claw-string
              (%sdl::joystick-index :int))

(declaim (inline %sdl::game-controller-rumble))

(cffi:defcfun ("SDL_GameControllerRumble"
               %sdl::game-controller-rumble)
              :int
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::low-frequency-rumble %sdl::uint16)
              (%sdl::high-frequency-rumble %sdl::uint16)
              (%sdl::duration-ms %sdl::uint32))

(declaim (inline %sdl::game-controller-rumble-triggers))

(cffi:defcfun ("SDL_GameControllerRumbleTriggers"
               %sdl::game-controller-rumble-triggers)
              :int
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::left-rumble %sdl::uint16)
              (%sdl::right-rumble %sdl::uint16)
              (%sdl::duration-ms %sdl::uint32))

(declaim (inline %sdl::game-controller-send-effect))

(cffi:defcfun ("SDL_GameControllerSendEffect"
               %sdl::game-controller-send-effect)
              :int
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::data (claw-utils:claw-pointer :void))
              (%sdl::size :int))

(declaim (inline %sdl::game-controller-set-led))

(cffi:defcfun ("SDL_GameControllerSetLED"
               %sdl::game-controller-set-led)
              :int
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::red %sdl::uint8)
              (%sdl::green %sdl::uint8)
              (%sdl::blue %sdl::uint8))

(declaim (inline %sdl::game-controller-set-player-index))

(cffi:defcfun ("SDL_GameControllerSetPlayerIndex"
               %sdl::game-controller-set-player-index)
              :void
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::player-index :int))

(declaim (inline %sdl::game-controller-set-sensor-enabled))

(cffi:defcfun ("SDL_GameControllerSetSensorEnabled"
               %sdl::game-controller-set-sensor-enabled)
              :int
              (%sdl::gamecontroller
               (claw-utils:claw-pointer %sdl::game-controller))
              (%sdl::type %sdl::sensor-type)
              (%sdl::enabled %sdl::bool))

(declaim (inline %sdl::game-controller-type-for-index))

(cffi:defcfun ("SDL_GameControllerTypeForIndex"
               %sdl::game-controller-type-for-index)
              %sdl::game-controller-type
              (%sdl::joystick-index :int))

(declaim (inline %sdl::game-controller-update))

(cffi:defcfun ("SDL_GameControllerUpdate"
               %sdl::game-controller-update)
              :void)

(cffi:defctype %sdl::assertion-handler
               (claw-utils:claw-pointer :void))

(declaim (inline %sdl::get-assertion-handler))

(cffi:defcfun ("SDL_GetAssertionHandler" %sdl::get-assertion-handler)
              %sdl::assertion-handler
              (%sdl::puserdata
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer :void))))

(cffi:defcstruct (%sdl::assert-data :size 48))

(cffi:defcstruct (%sdl::assert-data :size 48)
                 (%sdl::always-ignore :int :offset 0)
                 (%sdl::trigger-count :unsigned-int :offset 4)
                 (%sdl::condition claw-utils:claw-string :offset 8)
                 (%sdl::filename claw-utils:claw-string :offset 16)
                 (%sdl::linenum :int :offset 24)
                 (%sdl::function claw-utils:claw-string :offset 32)
                 (%sdl::next
                  (claw-utils:claw-pointer
                   (:struct %sdl::assert-data))
                  :offset 40))

(cffi:defctype %sdl::assert-data (:struct %sdl::assert-data))

(declaim (inline %sdl::get-assertion-report))

(cffi:defcfun ("SDL_GetAssertionReport" %sdl::get-assertion-report)
              (claw-utils:claw-pointer %sdl::assert-data))

(declaim (inline %sdl::get-audio-device-name))

(cffi:defcfun ("SDL_GetAudioDeviceName" %sdl::get-audio-device-name)
              claw-utils:claw-string
              (%sdl::index :int)
              (%sdl::iscapture :int))

(cffi:defctype %sdl::audio-callback (claw-utils:claw-pointer :void))

(cffi:defcstruct (%sdl::audio-spec :size 32)
                 (%sdl::freq :int :offset 0)
                 (%sdl::format %sdl::audio-format :offset 4)
                 (%sdl::channels %sdl::uint8 :offset 6)
                 (%sdl::silence %sdl::uint8 :offset 7)
                 (%sdl::samples %sdl::uint16 :offset 8)
                 (%sdl::padding %sdl::uint16 :offset 10)
                 (%sdl::size %sdl::uint32 :offset 12)
                 (%sdl::callback %sdl::audio-callback :offset 16)
                 (%sdl::userdata (claw-utils:claw-pointer :void)
                  :offset 24))

(cffi:defctype %sdl::audio-spec (:struct %sdl::audio-spec))

(declaim (inline %sdl::get-audio-device-spec))

(cffi:defcfun ("SDL_GetAudioDeviceSpec" %sdl::get-audio-device-spec)
              :int
              (%sdl::index :int)
              (%sdl::iscapture :int)
              (%sdl::spec (claw-utils:claw-pointer %sdl::audio-spec)))

(cffi:defctype %sdl::audio-status %sdl::|C:@EA@SDL-AUDIO-STATUS|)

(declaim (inline %sdl::get-audio-device-status))

(cffi:defcfun ("SDL_GetAudioDeviceStatus"
               %sdl::get-audio-device-status)
              %sdl::audio-status
              (%sdl::dev %sdl::audio-device-id))

(declaim (inline %sdl::get-audio-driver))

(cffi:defcfun ("SDL_GetAudioDriver" %sdl::get-audio-driver)
              claw-utils:claw-string
              (%sdl::index :int))

(declaim (inline %sdl::get-audio-status))

(cffi:defcfun ("SDL_GetAudioStatus" %sdl::get-audio-status)
              %sdl::audio-status)

(declaim (inline %sdl::get-base-path))

(cffi:defcfun ("SDL_GetBasePath" %sdl::get-base-path)
              claw-utils:claw-string)

(declaim (inline %sdl::get-cpu-cache-line-size))

(cffi:defcfun ("SDL_GetCPUCacheLineSize"
               %sdl::get-cpu-cache-line-size)
              :int)

(declaim (inline %sdl::get-cpu-count))

(cffi:defcfun ("SDL_GetCPUCount" %sdl::get-cpu-count) :int)

(declaim (inline %sdl::get-clip-rect))

(cffi:defcfun ("SDL_GetClipRect" %sdl::get-clip-rect)
              :void
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::get-clipboard-text))

(cffi:defcfun ("SDL_GetClipboardText" %sdl::get-clipboard-text)
              claw-utils:claw-string)

(cffi:defcstruct (%sdl::|C:@SA@SDL-DISPLAY-MODE| :size 24)
                 (%sdl::format %sdl::uint32 :offset 0)
                 (%sdl::w :int :offset 4)
                 (%sdl::h :int :offset 8)
                 (%sdl::refresh-rate :int :offset 12)
                 (%sdl::driverdata (claw-utils:claw-pointer :void)
                  :offset 16))

(cffi:defctype %sdl::display-mode
               (:struct %sdl::|C:@SA@SDL-DISPLAY-MODE|))

(declaim (inline %sdl::get-closest-display-mode))

(cffi:defcfun ("SDL_GetClosestDisplayMode"
               %sdl::get-closest-display-mode)
              (claw-utils:claw-pointer %sdl::display-mode)
              (%sdl::display-index :int)
              (%sdl::mode
               (claw-utils:claw-pointer %sdl::display-mode))
              (%sdl::closest
               (claw-utils:claw-pointer %sdl::display-mode)))

(declaim (inline %sdl::get-color-key))

(cffi:defcfun ("SDL_GetColorKey" %sdl::get-color-key)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::key (claw-utils:claw-pointer %sdl::uint32)))

(declaim (inline %sdl::get-current-audio-driver))

(cffi:defcfun ("SDL_GetCurrentAudioDriver"
               %sdl::get-current-audio-driver)
              claw-utils:claw-string)

(declaim (inline %sdl::get-current-display-mode))

(cffi:defcfun ("SDL_GetCurrentDisplayMode"
               %sdl::get-current-display-mode)
              :int
              (%sdl::display-index :int)
              (%sdl::mode
               (claw-utils:claw-pointer %sdl::display-mode)))

(declaim (inline %sdl::get-current-video-driver))

(cffi:defcfun ("SDL_GetCurrentVideoDriver"
               %sdl::get-current-video-driver)
              claw-utils:claw-string)

(declaim (inline %sdl::get-cursor))

(cffi:defcfun ("SDL_GetCursor" %sdl::get-cursor)
              (claw-utils:claw-pointer %sdl::cursor))

(declaim (inline %sdl::get-default-assertion-handler))

(cffi:defcfun ("SDL_GetDefaultAssertionHandler"
               %sdl::get-default-assertion-handler)
              %sdl::assertion-handler)

(declaim (inline %sdl::get-default-audio-info))

(cffi:defcfun ("SDL_GetDefaultAudioInfo"
               %sdl::get-default-audio-info)
              :int
              (%sdl::name claw-utils:claw-string)
              (%sdl::spec (claw-utils:claw-pointer %sdl::audio-spec))
              (%sdl::iscapture :int))

(declaim (inline %sdl::get-default-cursor))

(cffi:defcfun ("SDL_GetDefaultCursor" %sdl::get-default-cursor)
              (claw-utils:claw-pointer %sdl::cursor))

(declaim (inline %sdl::get-desktop-display-mode))

(cffi:defcfun ("SDL_GetDesktopDisplayMode"
               %sdl::get-desktop-display-mode)
              :int
              (%sdl::display-index :int)
              (%sdl::mode
               (claw-utils:claw-pointer %sdl::display-mode)))

(declaim (inline %sdl::get-display-bounds))

(cffi:defcfun ("SDL_GetDisplayBounds" %sdl::get-display-bounds)
              :int
              (%sdl::display-index :int)
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::get-display-dpi))

(cffi:defcfun ("SDL_GetDisplayDPI" %sdl::get-display-dpi)
              :int
              (%sdl::display-index :int)
              (%sdl::ddpi (claw-utils:claw-pointer :float))
              (%sdl::hdpi (claw-utils:claw-pointer :float))
              (%sdl::vdpi (claw-utils:claw-pointer :float)))

(declaim (inline %sdl::get-display-mode))

(cffi:defcfun ("SDL_GetDisplayMode" %sdl::get-display-mode)
              :int
              (%sdl::display-index :int)
              (%sdl::mode-index :int)
              (%sdl::mode
               (claw-utils:claw-pointer %sdl::display-mode)))

(declaim (inline %sdl::get-display-name))

(cffi:defcfun ("SDL_GetDisplayName" %sdl::get-display-name)
              claw-utils:claw-string
              (%sdl::display-index :int))

(cffi:defctype %sdl::display-orientation
               %sdl::|C:@EA@SDL-DISPLAY-ORIENTATION|)

(declaim (inline %sdl::get-display-orientation))

(cffi:defcfun ("SDL_GetDisplayOrientation"
               %sdl::get-display-orientation)
              %sdl::display-orientation
              (%sdl::display-index :int))

(declaim (inline %sdl::get-display-usable-bounds))

(cffi:defcfun ("SDL_GetDisplayUsableBounds"
               %sdl::get-display-usable-bounds)
              :int
              (%sdl::display-index :int)
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::get-error))

(cffi:defcfun ("SDL_GetError" %sdl::get-error) claw-utils:claw-string)

(declaim (inline %sdl::get-error-msg))

(cffi:defcfun ("SDL_GetErrorMsg" %sdl::get-error-msg)
              claw-utils:claw-string
              (%sdl::errstr claw-utils:claw-string)
              (%sdl::maxlen :int))

(declaim (inline %sdl::get-event-filter))

(cffi:defcfun ("SDL_GetEventFilter" %sdl::get-event-filter)
              %sdl::bool
              (%sdl::filter
               (claw-utils:claw-pointer %sdl::event-filter))
              (%sdl::userdata
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer :void))))

(declaim (inline %sdl::get-global-mouse-state))

(cffi:defcfun ("SDL_GetGlobalMouseState"
               %sdl::get-global-mouse-state)
              %sdl::uint32
              (%sdl::x (claw-utils:claw-pointer :int))
              (%sdl::y (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::get-grabbed-window))

(cffi:defcfun ("SDL_GetGrabbedWindow" %sdl::get-grabbed-window)
              (claw-utils:claw-pointer %sdl::window))

(declaim (inline %sdl::get-hint))

(cffi:defcfun ("SDL_GetHint" %sdl::get-hint)
              claw-utils:claw-string
              (%sdl::name claw-utils:claw-string))

(declaim (inline %sdl::get-hint-boolean))

(cffi:defcfun ("SDL_GetHintBoolean" %sdl::get-hint-boolean)
              %sdl::bool
              (%sdl::name claw-utils:claw-string)
              (%sdl::default-value %sdl::bool))

(cffi:defctype %sdl::keycode :int)

(declaim (inline %sdl::get-key-from-name))

(cffi:defcfun ("SDL_GetKeyFromName" %sdl::get-key-from-name)
              %sdl::keycode
              (%sdl::name claw-utils:claw-string))

(cffi:defctype %sdl::scancode %sdl::|C:@EA@SDL-SCANCODE|)

(declaim (inline %sdl::get-key-from-scancode))

(cffi:defcfun ("SDL_GetKeyFromScancode" %sdl::get-key-from-scancode)
              %sdl::keycode
              (%sdl::scancode %sdl::scancode))

(declaim (inline %sdl::get-key-name))

(cffi:defcfun ("SDL_GetKeyName" %sdl::get-key-name)
              claw-utils:claw-string
              (%sdl::key %sdl::keycode))

(declaim (inline %sdl::get-keyboard-focus))

(cffi:defcfun ("SDL_GetKeyboardFocus" %sdl::get-keyboard-focus)
              (claw-utils:claw-pointer %sdl::window))

(declaim (inline %sdl::get-keyboard-state))

(cffi:defcfun ("SDL_GetKeyboardState" %sdl::get-keyboard-state)
              (claw-utils:claw-pointer %sdl::uint8)
              (%sdl::numkeys (claw-utils:claw-pointer :int)))

(cffi:defctype %sdl::malloc-func (claw-utils:claw-pointer :void))

(cffi:defctype %sdl::calloc-func (claw-utils:claw-pointer :void))

(cffi:defctype %sdl::realloc-func (claw-utils:claw-pointer :void))

(cffi:defctype %sdl::free-func (claw-utils:claw-pointer :void))

(declaim (inline %sdl::get-memory-functions))

(cffi:defcfun ("SDL_GetMemoryFunctions" %sdl::get-memory-functions)
              :void
              (%sdl::malloc-func
               (claw-utils:claw-pointer %sdl::malloc-func))
              (%sdl::calloc-func
               (claw-utils:claw-pointer %sdl::calloc-func))
              (%sdl::realloc-func
               (claw-utils:claw-pointer %sdl::realloc-func))
              (%sdl::free-func
               (claw-utils:claw-pointer %sdl::free-func)))

(cffi:defctype %sdl::keymod %sdl::|C:@EA@SDL-KEYMOD|)

(declaim (inline %sdl::get-mod-state))

(cffi:defcfun ("SDL_GetModState" %sdl::get-mod-state) %sdl::keymod)

(declaim (inline %sdl::get-mouse-focus))

(cffi:defcfun ("SDL_GetMouseFocus" %sdl::get-mouse-focus)
              (claw-utils:claw-pointer %sdl::window))

(declaim (inline %sdl::get-mouse-state))

(cffi:defcfun ("SDL_GetMouseState" %sdl::get-mouse-state)
              %sdl::uint32
              (%sdl::x (claw-utils:claw-pointer :int))
              (%sdl::y (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::get-num-allocations))

(cffi:defcfun ("SDL_GetNumAllocations" %sdl::get-num-allocations)
              :int)

(declaim (inline %sdl::get-num-audio-devices))

(cffi:defcfun ("SDL_GetNumAudioDevices" %sdl::get-num-audio-devices)
              :int
              (%sdl::iscapture :int))

(declaim (inline %sdl::get-num-audio-drivers))

(cffi:defcfun ("SDL_GetNumAudioDrivers" %sdl::get-num-audio-drivers)
              :int)

(declaim (inline %sdl::get-num-display-modes))

(cffi:defcfun ("SDL_GetNumDisplayModes" %sdl::get-num-display-modes)
              :int
              (%sdl::display-index :int))

(declaim (inline %sdl::get-num-render-drivers))

(cffi:defcfun ("SDL_GetNumRenderDrivers"
               %sdl::get-num-render-drivers)
              :int)

(declaim (inline %sdl::get-num-touch-devices))

(cffi:defcfun ("SDL_GetNumTouchDevices" %sdl::get-num-touch-devices)
              :int)

(cffi:defctype %sdl::touch-id :long-long)

(declaim (inline %sdl::get-num-touch-fingers))

(cffi:defcfun ("SDL_GetNumTouchFingers" %sdl::get-num-touch-fingers)
              :int
              (%sdl::touch-id %sdl::touch-id))

(declaim (inline %sdl::get-num-video-displays))

(cffi:defcfun ("SDL_GetNumVideoDisplays"
               %sdl::get-num-video-displays)
              :int)

(declaim (inline %sdl::get-num-video-drivers))

(cffi:defcfun ("SDL_GetNumVideoDrivers" %sdl::get-num-video-drivers)
              :int)

(declaim (inline %sdl::get-original-memory-functions))

(cffi:defcfun ("SDL_GetOriginalMemoryFunctions"
               %sdl::get-original-memory-functions)
              :void
              (%sdl::malloc-func
               (claw-utils:claw-pointer %sdl::malloc-func))
              (%sdl::calloc-func
               (claw-utils:claw-pointer %sdl::calloc-func))
              (%sdl::realloc-func
               (claw-utils:claw-pointer %sdl::realloc-func))
              (%sdl::free-func
               (claw-utils:claw-pointer %sdl::free-func)))

(cffi:defctype %sdl::uint64 :unsigned-long-long)

(declaim (inline %sdl::get-performance-counter))

(cffi:defcfun ("SDL_GetPerformanceCounter"
               %sdl::get-performance-counter)
              %sdl::uint64)

(declaim (inline %sdl::get-performance-frequency))

(cffi:defcfun ("SDL_GetPerformanceFrequency"
               %sdl::get-performance-frequency)
              %sdl::uint64)

(declaim (inline %sdl::get-pixel-format-name))

(cffi:defcfun ("SDL_GetPixelFormatName" %sdl::get-pixel-format-name)
              claw-utils:claw-string
              (%sdl::format %sdl::uint32))

(declaim (inline %sdl::get-platform))

(cffi:defcfun ("SDL_GetPlatform" %sdl::get-platform)
              claw-utils:claw-string)

(declaim (inline %sdl::get-point-display-index))

(cffi:defcfun ("SDL_GetPointDisplayIndex"
               %sdl::get-point-display-index)
              :int
              (%sdl::point (claw-utils:claw-pointer %sdl::point)))

(cffi:defctype %sdl::power-state %sdl::|C:@EA@SDL-POWER-STATE|)

(declaim (inline %sdl::get-power-info))

(cffi:defcfun ("SDL_GetPowerInfo" %sdl::get-power-info)
              %sdl::power-state
              (%sdl::secs (claw-utils:claw-pointer :int))
              (%sdl::pct (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::get-pref-path))

(cffi:defcfun ("SDL_GetPrefPath" %sdl::get-pref-path)
              claw-utils:claw-string
              (%sdl::org claw-utils:claw-string)
              (%sdl::app claw-utils:claw-string))

(cffi:defcstruct (%sdl::locale :size 16)
                 (%sdl::language claw-utils:claw-string :offset 0)
                 (%sdl::country claw-utils:claw-string :offset 8))

(cffi:defctype %sdl::locale (:struct %sdl::locale))

(declaim (inline %sdl::get-preferred-locales))

(cffi:defcfun ("SDL_GetPreferredLocales" %sdl::get-preferred-locales)
              (claw-utils:claw-pointer %sdl::locale))

(declaim (inline %sdl::get-queued-audio-size))

(cffi:defcfun ("SDL_GetQueuedAudioSize" %sdl::get-queued-audio-size)
              %sdl::uint32
              (%sdl::dev %sdl::audio-device-id))

(declaim (inline %sdl::get-rgb))

(cffi:defcfun ("SDL_GetRGB" %sdl::get-rgb)
              :void
              (%sdl::pixel %sdl::uint32)
              (%sdl::format
               (claw-utils:claw-pointer %sdl::pixel-format))
              (%sdl::r (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::g (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::b (claw-utils:claw-pointer %sdl::uint8)))

(declaim (inline %sdl::get-rgba))

(cffi:defcfun ("SDL_GetRGBA" %sdl::get-rgba)
              :void
              (%sdl::pixel %sdl::uint32)
              (%sdl::format
               (claw-utils:claw-pointer %sdl::pixel-format))
              (%sdl::r (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::g (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::b (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::a (claw-utils:claw-pointer %sdl::uint8)))

(declaim (inline %sdl::get-rect-display-index))

(cffi:defcfun ("SDL_GetRectDisplayIndex"
               %sdl::get-rect-display-index)
              :int
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::get-relative-mouse-mode))

(cffi:defcfun ("SDL_GetRelativeMouseMode"
               %sdl::get-relative-mouse-mode)
              %sdl::bool)

(declaim (inline %sdl::get-relative-mouse-state))

(cffi:defcfun ("SDL_GetRelativeMouseState"
               %sdl::get-relative-mouse-state)
              %sdl::uint32
              (%sdl::x (claw-utils:claw-pointer :int))
              (%sdl::y (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::get-render-draw-blend-mode))

(cffi:defcfun ("SDL_GetRenderDrawBlendMode"
               %sdl::get-render-draw-blend-mode)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::blend-mode
               (claw-utils:claw-pointer %sdl::blend-mode)))

(declaim (inline %sdl::get-render-draw-color))

(cffi:defcfun ("SDL_GetRenderDrawColor" %sdl::get-render-draw-color)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::r (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::g (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::b (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::a (claw-utils:claw-pointer %sdl::uint8)))

(cffi:defcstruct (%sdl::renderer-info :size 88)
                 (%sdl::name claw-utils:claw-string :offset 0)
                 (%sdl::flags %sdl::uint32 :offset 8)
                 (%sdl::num-texture-formats %sdl::uint32 :offset 12)
                 (%sdl::texture-formats %sdl::uint32 :count 16
                  :offset 16)
                 (%sdl::max-texture-width :int :offset 80)
                 (%sdl::max-texture-height :int :offset 84))

(cffi:defctype %sdl::renderer-info (:struct %sdl::renderer-info))

(declaim (inline %sdl::get-render-driver-info))

(cffi:defcfun ("SDL_GetRenderDriverInfo"
               %sdl::get-render-driver-info)
              :int
              (%sdl::index :int)
              (%sdl::info
               (claw-utils:claw-pointer %sdl::renderer-info)))

(declaim (inline %sdl::get-render-target))

(cffi:defcfun ("SDL_GetRenderTarget" %sdl::get-render-target)
              (claw-utils:claw-pointer %sdl::texture)
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(declaim (inline %sdl::get-renderer))

(cffi:defcfun ("SDL_GetRenderer" %sdl::get-renderer)
              (claw-utils:claw-pointer %sdl::renderer)
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::get-renderer-info))

(cffi:defcfun ("SDL_GetRendererInfo" %sdl::get-renderer-info)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::info
               (claw-utils:claw-pointer %sdl::renderer-info)))

(declaim (inline %sdl::get-renderer-output-size))

(cffi:defcfun ("SDL_GetRendererOutputSize"
               %sdl::get-renderer-output-size)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::w (claw-utils:claw-pointer :int))
              (%sdl::h (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::get-revision))

(cffi:defcfun ("SDL_GetRevision" %sdl::get-revision)
              claw-utils:claw-string)

(declaim (inline %sdl::get-revision-number))

(cffi:defcfun ("SDL_GetRevisionNumber" %sdl::get-revision-number)
              :int)

(declaim (inline %sdl::get-scancode-from-key))

(cffi:defcfun ("SDL_GetScancodeFromKey" %sdl::get-scancode-from-key)
              %sdl::scancode
              (%sdl::key %sdl::keycode))

(declaim (inline %sdl::get-scancode-from-name))

(cffi:defcfun ("SDL_GetScancodeFromName"
               %sdl::get-scancode-from-name)
              %sdl::scancode
              (%sdl::name claw-utils:claw-string))

(declaim (inline %sdl::get-scancode-name))

(cffi:defcfun ("SDL_GetScancodeName" %sdl::get-scancode-name)
              claw-utils:claw-string
              (%sdl::scancode %sdl::scancode))

(cffi:defctype %sdl::window-shape-mode
               %sdl::|C:@EA@WINDOW-SHAPE-MODE|)

(cffi:defcunion (%sdl::|C:@UA@SDL-WINDOW-SHAPE-PARAMS| :size 4)
                (%sdl::binarization-cutoff %sdl::uint8)
                (%sdl::color-key %sdl::color))

(cffi:defctype %sdl::window-shape-params
               (:union %sdl::|C:@UA@SDL-WINDOW-SHAPE-PARAMS|))

(cffi:defcstruct (%sdl::window-shape-mode :size 8)
                 (%sdl::mode %sdl::window-shape-mode :offset 0)
                 (%sdl::parameters %sdl::window-shape-params :offset
                  4))

(cffi:defctype %sdl::window-shape-mode
               (:struct %sdl::window-shape-mode))

(declaim (inline %sdl::get-shaped-window-mode))

(cffi:defcfun ("SDL_GetShapedWindowMode"
               %sdl::get-shaped-window-mode)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::shape-mode
               (claw-utils:claw-pointer %sdl::window-shape-mode)))

(declaim (inline %sdl::get-surface-alpha-mod))

(cffi:defcfun ("SDL_GetSurfaceAlphaMod" %sdl::get-surface-alpha-mod)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::alpha (claw-utils:claw-pointer %sdl::uint8)))

(declaim (inline %sdl::get-surface-blend-mode))

(cffi:defcfun ("SDL_GetSurfaceBlendMode"
               %sdl::get-surface-blend-mode)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::blend-mode
               (claw-utils:claw-pointer %sdl::blend-mode)))

(declaim (inline %sdl::get-surface-color-mod))

(cffi:defcfun ("SDL_GetSurfaceColorMod" %sdl::get-surface-color-mod)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::r (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::g (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::b (claw-utils:claw-pointer %sdl::uint8)))

(declaim (inline %sdl::get-system-ram))

(cffi:defcfun ("SDL_GetSystemRAM" %sdl::get-system-ram) :int)

(declaim (inline %sdl::get-texture-alpha-mod))

(cffi:defcfun ("SDL_GetTextureAlphaMod" %sdl::get-texture-alpha-mod)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::alpha (claw-utils:claw-pointer %sdl::uint8)))

(declaim (inline %sdl::get-texture-blend-mode))

(cffi:defcfun ("SDL_GetTextureBlendMode"
               %sdl::get-texture-blend-mode)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::blend-mode
               (claw-utils:claw-pointer %sdl::blend-mode)))

(declaim (inline %sdl::get-texture-color-mod))

(cffi:defcfun ("SDL_GetTextureColorMod" %sdl::get-texture-color-mod)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::r (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::g (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::b (claw-utils:claw-pointer %sdl::uint8)))

(cffi:defctype %sdl::scale-mode %sdl::|C:@EA@SDL-SCALE-MODE|)

(declaim (inline %sdl::get-texture-scale-mode))

(cffi:defcfun ("SDL_GetTextureScaleMode"
               %sdl::get-texture-scale-mode)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::scale-mode
               (claw-utils:claw-pointer %sdl::scale-mode)))

(declaim (inline %sdl::get-texture-user-data))

(cffi:defcfun ("SDL_GetTextureUserData" %sdl::get-texture-user-data)
              (claw-utils:claw-pointer :void)
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture)))

(cffi:defctype %sdl::thread-id :unsigned-long)

(declaim (inline %sdl::get-thread-id))

(cffi:defcfun ("SDL_GetThreadID" %sdl::get-thread-id)
              %sdl::thread-id
              (%sdl::thread (claw-utils:claw-pointer %sdl::thread)))

(declaim (inline %sdl::get-thread-name))

(cffi:defcfun ("SDL_GetThreadName" %sdl::get-thread-name)
              claw-utils:claw-string
              (%sdl::thread (claw-utils:claw-pointer %sdl::thread)))

(declaim (inline %sdl::get-ticks))

(cffi:defcfun ("SDL_GetTicks" %sdl::get-ticks) %sdl::uint32)

(declaim (inline %sdl::get-ticks64))

(cffi:defcfun ("SDL_GetTicks64" %sdl::get-ticks64) %sdl::uint64)

(declaim (inline %sdl::get-touch-device))

(cffi:defcfun ("SDL_GetTouchDevice" %sdl::get-touch-device)
              %sdl::touch-id
              (%sdl::index :int))

(cffi:defctype %sdl::touch-device-type
               %sdl::|C:@EA@SDL-TOUCH-DEVICE-TYPE|)

(declaim (inline %sdl::get-touch-device-type))

(cffi:defcfun ("SDL_GetTouchDeviceType" %sdl::get-touch-device-type)
              %sdl::touch-device-type
              (%sdl::touch-id %sdl::touch-id))

(cffi:defctype %sdl::finger-id :long-long)

(cffi:defcstruct (%sdl::finger :size 24)
                 (%sdl::id %sdl::finger-id :offset 0)
                 (%sdl::x :float :offset 8)
                 (%sdl::y :float :offset 12)
                 (%sdl::pressure :float :offset 16))

(cffi:defctype %sdl::finger (:struct %sdl::finger))

(declaim (inline %sdl::get-touch-finger))

(cffi:defcfun ("SDL_GetTouchFinger" %sdl::get-touch-finger)
              (claw-utils:claw-pointer %sdl::finger)
              (%sdl::touch-id %sdl::touch-id)
              (%sdl::index :int))

(declaim (inline %sdl::get-touch-name))

(cffi:defcfun ("SDL_GetTouchName" %sdl::get-touch-name)
              claw-utils:claw-string
              (%sdl::index :int))

(cffi:defcstruct (%sdl::version :size 3)
                 (%sdl::major %sdl::uint8 :offset 0)
                 (%sdl::minor %sdl::uint8 :offset 1)
                 (%sdl::patch %sdl::uint8 :offset 2))

(cffi:defctype %sdl::version (:struct %sdl::version))

(declaim (inline %sdl::get-version))

(cffi:defcfun ("SDL_GetVersion" %sdl::get-version)
              :void
              (%sdl::ver (claw-utils:claw-pointer %sdl::version)))

(declaim (inline %sdl::get-video-driver))

(cffi:defcfun ("SDL_GetVideoDriver" %sdl::get-video-driver)
              claw-utils:claw-string
              (%sdl::index :int))

(declaim (inline %sdl::get-window-borders-size))

(cffi:defcfun ("SDL_GetWindowBordersSize"
               %sdl::get-window-borders-size)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::top (claw-utils:claw-pointer :int))
              (%sdl::left (claw-utils:claw-pointer :int))
              (%sdl::bottom (claw-utils:claw-pointer :int))
              (%sdl::right (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::get-window-brightness))

(cffi:defcfun ("SDL_GetWindowBrightness" %sdl::get-window-brightness)
              :float
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::get-window-data))

(cffi:defcfun ("SDL_GetWindowData" %sdl::get-window-data)
              (claw-utils:claw-pointer :void)
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::name claw-utils:claw-string))

(declaim (inline %sdl::get-window-display-index))

(cffi:defcfun ("SDL_GetWindowDisplayIndex"
               %sdl::get-window-display-index)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::get-window-display-mode))

(cffi:defcfun ("SDL_GetWindowDisplayMode"
               %sdl::get-window-display-mode)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::mode
               (claw-utils:claw-pointer %sdl::display-mode)))

(declaim (inline %sdl::get-window-flags))

(cffi:defcfun ("SDL_GetWindowFlags" %sdl::get-window-flags)
              %sdl::uint32
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::get-window-from-id))

(cffi:defcfun ("SDL_GetWindowFromID" %sdl::get-window-from-id)
              (claw-utils:claw-pointer %sdl::window)
              (%sdl::id %sdl::uint32))

(declaim (inline %sdl::get-window-gamma-ramp))

(cffi:defcfun ("SDL_GetWindowGammaRamp" %sdl::get-window-gamma-ramp)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::red (claw-utils:claw-pointer %sdl::uint16))
              (%sdl::green (claw-utils:claw-pointer %sdl::uint16))
              (%sdl::blue (claw-utils:claw-pointer %sdl::uint16)))

(declaim (inline %sdl::get-window-grab))

(cffi:defcfun ("SDL_GetWindowGrab" %sdl::get-window-grab)
              %sdl::bool
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::get-window-icc-profile))

(cffi:defcfun ("SDL_GetWindowICCProfile"
               %sdl::get-window-icc-profile)
              (claw-utils:claw-pointer :void)
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::size (claw-utils:claw-pointer %sdl::size-t)))

(declaim (inline %sdl::get-window-id))

(cffi:defcfun ("SDL_GetWindowID" %sdl::get-window-id)
              %sdl::uint32
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::get-window-keyboard-grab))

(cffi:defcfun ("SDL_GetWindowKeyboardGrab"
               %sdl::get-window-keyboard-grab)
              %sdl::bool
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::get-window-maximum-size))

(cffi:defcfun ("SDL_GetWindowMaximumSize"
               %sdl::get-window-maximum-size)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::w (claw-utils:claw-pointer :int))
              (%sdl::h (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::get-window-minimum-size))

(cffi:defcfun ("SDL_GetWindowMinimumSize"
               %sdl::get-window-minimum-size)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::w (claw-utils:claw-pointer :int))
              (%sdl::h (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::get-window-mouse-grab))

(cffi:defcfun ("SDL_GetWindowMouseGrab" %sdl::get-window-mouse-grab)
              %sdl::bool
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::get-window-mouse-rect))

(cffi:defcfun ("SDL_GetWindowMouseRect" %sdl::get-window-mouse-rect)
              (claw-utils:claw-pointer %sdl::rect)
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::get-window-opacity))

(cffi:defcfun ("SDL_GetWindowOpacity" %sdl::get-window-opacity)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::out-opacity (claw-utils:claw-pointer :float)))

(declaim (inline %sdl::get-window-pixel-format))

(cffi:defcfun ("SDL_GetWindowPixelFormat"
               %sdl::get-window-pixel-format)
              %sdl::uint32
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::get-window-position))

(cffi:defcfun ("SDL_GetWindowPosition" %sdl::get-window-position)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::x (claw-utils:claw-pointer :int))
              (%sdl::y (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::get-window-size))

(cffi:defcfun ("SDL_GetWindowSize" %sdl::get-window-size)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::w (claw-utils:claw-pointer :int))
              (%sdl::h (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::get-window-surface))

(cffi:defcfun ("SDL_GetWindowSurface" %sdl::get-window-surface)
              (claw-utils:claw-pointer %sdl::surface)
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::get-window-title))

(cffi:defcfun ("SDL_GetWindowTitle" %sdl::get-window-title)
              claw-utils:claw-string
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(cffi:defctype %sdl::syswm-type %sdl::|C:@EA@SDL-SYSWM-TYPE|)

(cffi:defcstruct (%sdl::hwnd-- :size 4) (%sdl::unused :int :offset 0))

(cffi:defctype %sdl::hwnd
               (claw-utils:claw-pointer (:struct %sdl::hwnd--)))

(cffi:defcstruct (%sdl::hdc-- :size 4) (%sdl::unused :int :offset 0))

(cffi:defctype %sdl::hdc
               (claw-utils:claw-pointer (:struct %sdl::hdc--)))

(cffi:defcstruct (%sdl::hinstance-- :size 4)
                 (%sdl::unused :int :offset 0))

(cffi:defctype %sdl::hinstance
               (claw-utils:claw-pointer (:struct %sdl::hinstance--)))

(cffi:defcstruct (%sdl::|C:@S@SDL-SYS-W-MINFO@U@SDL-SYSWM.H@5897@S@SDL-SYSWM.H@5955|
                  :size 24)
                 (%sdl::window %sdl::hwnd :offset 0)
                 (%sdl::hdc %sdl::hdc :offset 8)
                 (%sdl::hinstance %sdl::hinstance :offset 16))

(cffi:defcunion (%sdl::|C:@S@SDL-SYS-W-MINFO@U@SDL-SYSWM.H@5897|
                 :size 64)
                (%sdl::win
                 (:struct
                  %sdl::|C:@S@SDL-SYS-W-MINFO@U@SDL-SYSWM.H@5897@S@SDL-SYSWM.H@5955|))
                (%sdl::dummy %sdl::uint8 :count 64))

(cffi:defcstruct (%sdl::sys-w-minfo :size 72)
                 (%sdl::version %sdl::version :offset 0)
                 (%sdl::subsystem %sdl::syswm-type :offset 4)
                 (%sdl::info
                  (:union
                   %sdl::|C:@S@SDL-SYS-W-MINFO@U@SDL-SYSWM.H@5897|)
                  :offset 8))

(cffi:defctype %sdl::sys-w-minfo (:struct %sdl::sys-w-minfo))

(declaim (inline %sdl::get-window-wm-info))

(cffi:defcfun ("SDL_GetWindowWMInfo" %sdl::get-window-wm-info)
              %sdl::bool
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::info
               (claw-utils:claw-pointer %sdl::sys-w-minfo)))

(cffi:defctype %sdl::yuv-conversion-mode
               %sdl::|C:@EA@SDL-YUV-CONVERSION-MODE|)

(declaim (inline %sdl::get-yuv-conversion-mode))

(cffi:defcfun ("SDL_GetYUVConversionMode"
               %sdl::get-yuv-conversion-mode)
              %sdl::yuv-conversion-mode)

(declaim (inline %sdl::get-yuv-conversion-mode-for-resolution))

(cffi:defcfun ("SDL_GetYUVConversionModeForResolution"
               %sdl::get-yuv-conversion-mode-for-resolution)
              %sdl::yuv-conversion-mode
              (%sdl::width :int)
              (%sdl::height :int))

(cffi:defcstruct (%sdl::%sdl-haptic :size 0))

(cffi:defctype %sdl::haptic (:struct %sdl::%sdl-haptic))

(declaim (inline %sdl::haptic-close))

(cffi:defcfun ("SDL_HapticClose" %sdl::haptic-close)
              :void
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-destroy-effect))

(cffi:defcfun ("SDL_HapticDestroyEffect" %sdl::haptic-destroy-effect)
              :void
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic))
              (%sdl::effect :int))

(cffi:defctype %sdl::sint32 :int)

(cffi:defcstruct (%sdl::haptic-direction :size 16)
                 (%sdl::type %sdl::uint8 :offset 0)
                 (%sdl::dir %sdl::sint32 :count 3 :offset 4))

(cffi:defctype %sdl::haptic-direction
               (:struct %sdl::haptic-direction))

(cffi:defcstruct (%sdl::haptic-constant :size 40)
                 (%sdl::type %sdl::uint16 :offset 0)
                 (%sdl::direction %sdl::haptic-direction :offset 4)
                 (%sdl::length %sdl::uint32 :offset 20)
                 (%sdl::delay %sdl::uint16 :offset 24)
                 (%sdl::button %sdl::uint16 :offset 26)
                 (%sdl::interval %sdl::uint16 :offset 28)
                 (%sdl::level %sdl::sint16 :offset 30)
                 (%sdl::attack-length %sdl::uint16 :offset 32)
                 (%sdl::attack-level %sdl::uint16 :offset 34)
                 (%sdl::fade-length %sdl::uint16 :offset 36)
                 (%sdl::fade-level %sdl::uint16 :offset 38))

(cffi:defctype %sdl::haptic-constant (:struct %sdl::haptic-constant))

(cffi:defcstruct (%sdl::haptic-periodic :size 48)
                 (%sdl::type %sdl::uint16 :offset 0)
                 (%sdl::direction %sdl::haptic-direction :offset 4)
                 (%sdl::length %sdl::uint32 :offset 20)
                 (%sdl::delay %sdl::uint16 :offset 24)
                 (%sdl::button %sdl::uint16 :offset 26)
                 (%sdl::interval %sdl::uint16 :offset 28)
                 (%sdl::period %sdl::uint16 :offset 30)
                 (%sdl::magnitude %sdl::sint16 :offset 32)
                 (%sdl::offset %sdl::sint16 :offset 34)
                 (%sdl::phase %sdl::uint16 :offset 36)
                 (%sdl::attack-length %sdl::uint16 :offset 38)
                 (%sdl::attack-level %sdl::uint16 :offset 40)
                 (%sdl::fade-length %sdl::uint16 :offset 42)
                 (%sdl::fade-level %sdl::uint16 :offset 44))

(cffi:defctype %sdl::haptic-periodic (:struct %sdl::haptic-periodic))

(cffi:defcstruct (%sdl::haptic-condition :size 68)
                 (%sdl::type %sdl::uint16 :offset 0)
                 (%sdl::direction %sdl::haptic-direction :offset 4)
                 (%sdl::length %sdl::uint32 :offset 20)
                 (%sdl::delay %sdl::uint16 :offset 24)
                 (%sdl::button %sdl::uint16 :offset 26)
                 (%sdl::interval %sdl::uint16 :offset 28)
                 (%sdl::right-sat %sdl::uint16 :count 3 :offset 30)
                 (%sdl::left-sat %sdl::uint16 :count 3 :offset 36)
                 (%sdl::right-coeff %sdl::sint16 :count 3 :offset 42)
                 (%sdl::left-coeff %sdl::sint16 :count 3 :offset 48)
                 (%sdl::deadband %sdl::uint16 :count 3 :offset 54)
                 (%sdl::center %sdl::sint16 :count 3 :offset 60))

(cffi:defctype %sdl::haptic-condition
               (:struct %sdl::haptic-condition))

(cffi:defcstruct (%sdl::haptic-ramp :size 44)
                 (%sdl::type %sdl::uint16 :offset 0)
                 (%sdl::direction %sdl::haptic-direction :offset 4)
                 (%sdl::length %sdl::uint32 :offset 20)
                 (%sdl::delay %sdl::uint16 :offset 24)
                 (%sdl::button %sdl::uint16 :offset 26)
                 (%sdl::interval %sdl::uint16 :offset 28)
                 (%sdl::start %sdl::sint16 :offset 30)
                 (%sdl::end %sdl::sint16 :offset 32)
                 (%sdl::attack-length %sdl::uint16 :offset 34)
                 (%sdl::attack-level %sdl::uint16 :offset 36)
                 (%sdl::fade-length %sdl::uint16 :offset 38)
                 (%sdl::fade-level %sdl::uint16 :offset 40))

(cffi:defctype %sdl::haptic-ramp (:struct %sdl::haptic-ramp))

(cffi:defcstruct (%sdl::haptic-left-right :size 12)
                 (%sdl::type %sdl::uint16 :offset 0)
                 (%sdl::length %sdl::uint32 :offset 4)
                 (%sdl::large-magnitude %sdl::uint16 :offset 8)
                 (%sdl::small-magnitude %sdl::uint16 :offset 10))

(cffi:defctype %sdl::haptic-left-right
               (:struct %sdl::haptic-left-right))

(cffi:defcstruct (%sdl::haptic-custom :size 56)
                 (%sdl::type %sdl::uint16 :offset 0)
                 (%sdl::direction %sdl::haptic-direction :offset 4)
                 (%sdl::length %sdl::uint32 :offset 20)
                 (%sdl::delay %sdl::uint16 :offset 24)
                 (%sdl::button %sdl::uint16 :offset 26)
                 (%sdl::interval %sdl::uint16 :offset 28)
                 (%sdl::channels %sdl::uint8 :offset 30)
                 (%sdl::period %sdl::uint16 :offset 32)
                 (%sdl::samples %sdl::uint16 :offset 34)
                 (%sdl::data (claw-utils:claw-pointer %sdl::uint16)
                  :offset 40)
                 (%sdl::attack-length %sdl::uint16 :offset 48)
                 (%sdl::attack-level %sdl::uint16 :offset 50)
                 (%sdl::fade-length %sdl::uint16 :offset 52)
                 (%sdl::fade-level %sdl::uint16 :offset 54))

(cffi:defctype %sdl::haptic-custom (:struct %sdl::haptic-custom))

(cffi:defcunion (%sdl::haptic-effect :size 72)
                (%sdl::type %sdl::uint16)
                (%sdl::constant %sdl::haptic-constant)
                (%sdl::periodic %sdl::haptic-periodic)
                (%sdl::condition %sdl::haptic-condition)
                (%sdl::ramp %sdl::haptic-ramp)
                (%sdl::leftright %sdl::haptic-left-right)
                (%sdl::custom %sdl::haptic-custom))

(cffi:defctype %sdl::haptic-effect (:union %sdl::haptic-effect))

(declaim (inline %sdl::haptic-effect-supported))

(cffi:defcfun ("SDL_HapticEffectSupported"
               %sdl::haptic-effect-supported)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic))
              (%sdl::effect
               (claw-utils:claw-pointer %sdl::haptic-effect)))

(declaim (inline %sdl::haptic-get-effect-status))

(cffi:defcfun ("SDL_HapticGetEffectStatus"
               %sdl::haptic-get-effect-status)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic))
              (%sdl::effect :int))

(declaim (inline %sdl::haptic-index))

(cffi:defcfun ("SDL_HapticIndex" %sdl::haptic-index)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-name))

(cffi:defcfun ("SDL_HapticName" %sdl::haptic-name)
              claw-utils:claw-string
              (%sdl::device-index :int))

(declaim (inline %sdl::haptic-new-effect))

(cffi:defcfun ("SDL_HapticNewEffect" %sdl::haptic-new-effect)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic))
              (%sdl::effect
               (claw-utils:claw-pointer %sdl::haptic-effect)))

(declaim (inline %sdl::haptic-num-axes))

(cffi:defcfun ("SDL_HapticNumAxes" %sdl::haptic-num-axes)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-num-effects))

(cffi:defcfun ("SDL_HapticNumEffects" %sdl::haptic-num-effects)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-num-effects-playing))

(cffi:defcfun ("SDL_HapticNumEffectsPlaying"
               %sdl::haptic-num-effects-playing)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-open))

(cffi:defcfun ("SDL_HapticOpen" %sdl::haptic-open)
              (claw-utils:claw-pointer %sdl::haptic)
              (%sdl::device-index :int))

(declaim (inline %sdl::haptic-open-from-joystick))

(cffi:defcfun ("SDL_HapticOpenFromJoystick"
               %sdl::haptic-open-from-joystick)
              (claw-utils:claw-pointer %sdl::haptic)
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::haptic-open-from-mouse))

(cffi:defcfun ("SDL_HapticOpenFromMouse"
               %sdl::haptic-open-from-mouse)
              (claw-utils:claw-pointer %sdl::haptic))

(declaim (inline %sdl::haptic-opened))

(cffi:defcfun ("SDL_HapticOpened" %sdl::haptic-opened)
              :int
              (%sdl::device-index :int))

(declaim (inline %sdl::haptic-pause))

(cffi:defcfun ("SDL_HapticPause" %sdl::haptic-pause)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-query))

(cffi:defcfun ("SDL_HapticQuery" %sdl::haptic-query)
              :unsigned-int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-rumble-init))

(cffi:defcfun ("SDL_HapticRumbleInit" %sdl::haptic-rumble-init)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-rumble-play))

(cffi:defcfun ("SDL_HapticRumblePlay" %sdl::haptic-rumble-play)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic))
              (%sdl::strength :float)
              (%sdl::length %sdl::uint32))

(declaim (inline %sdl::haptic-rumble-stop))

(cffi:defcfun ("SDL_HapticRumbleStop" %sdl::haptic-rumble-stop)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-rumble-supported))

(cffi:defcfun ("SDL_HapticRumbleSupported"
               %sdl::haptic-rumble-supported)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-run-effect))

(cffi:defcfun ("SDL_HapticRunEffect" %sdl::haptic-run-effect)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic))
              (%sdl::effect :int)
              (%sdl::iterations %sdl::uint32))

(declaim (inline %sdl::haptic-set-autocenter))

(cffi:defcfun ("SDL_HapticSetAutocenter" %sdl::haptic-set-autocenter)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic))
              (%sdl::autocenter :int))

(declaim (inline %sdl::haptic-set-gain))

(cffi:defcfun ("SDL_HapticSetGain" %sdl::haptic-set-gain)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic))
              (%sdl::gain :int))

(declaim (inline %sdl::haptic-stop-all))

(cffi:defcfun ("SDL_HapticStopAll" %sdl::haptic-stop-all)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-stop-effect))

(cffi:defcfun ("SDL_HapticStopEffect" %sdl::haptic-stop-effect)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic))
              (%sdl::effect :int))

(declaim (inline %sdl::haptic-unpause))

(cffi:defcfun ("SDL_HapticUnpause" %sdl::haptic-unpause)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic)))

(declaim (inline %sdl::haptic-update-effect))

(cffi:defcfun ("SDL_HapticUpdateEffect" %sdl::haptic-update-effect)
              :int
              (%sdl::haptic (claw-utils:claw-pointer %sdl::haptic))
              (%sdl::effect :int)
              (%sdl::data
               (claw-utils:claw-pointer %sdl::haptic-effect)))

(declaim (inline %sdl::has3d-now))

(cffi:defcfun ("SDL_Has3DNow" %sdl::has3d-now) %sdl::bool)

(declaim (inline %sdl::has-armsimd))

(cffi:defcfun ("SDL_HasARMSIMD" %sdl::has-armsimd) %sdl::bool)

(declaim (inline %sdl::has-avx))

(cffi:defcfun ("SDL_HasAVX" %sdl::has-avx) %sdl::bool)

(declaim (inline %sdl::has-avx2))

(cffi:defcfun ("SDL_HasAVX2" %sdl::has-avx2) %sdl::bool)

(declaim (inline %sdl::has-avx512f))

(cffi:defcfun ("SDL_HasAVX512F" %sdl::has-avx512f) %sdl::bool)

(declaim (inline %sdl::has-alti-vec))

(cffi:defcfun ("SDL_HasAltiVec" %sdl::has-alti-vec) %sdl::bool)

(declaim (inline %sdl::has-clipboard-text))

(cffi:defcfun ("SDL_HasClipboardText" %sdl::has-clipboard-text)
              %sdl::bool)

(declaim (inline %sdl::has-color-key))

(cffi:defcfun ("SDL_HasColorKey" %sdl::has-color-key)
              %sdl::bool
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface)))

(declaim (inline %sdl::has-event))

(cffi:defcfun ("SDL_HasEvent" %sdl::has-event)
              %sdl::bool
              (%sdl::type %sdl::uint32))

(declaim (inline %sdl::has-events))

(cffi:defcfun ("SDL_HasEvents" %sdl::has-events)
              %sdl::bool
              (%sdl::min-type %sdl::uint32)
              (%sdl::max-type %sdl::uint32))

(declaim (inline %sdl::has-intersection))

(cffi:defcfun ("SDL_HasIntersection" %sdl::has-intersection)
              %sdl::bool
              (%sdl::a (claw-utils:claw-pointer %sdl::rect))
              (%sdl::b (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::has-intersection-f))

(cffi:defcfun ("SDL_HasIntersectionF" %sdl::has-intersection-f)
              %sdl::bool
              (%sdl::a (claw-utils:claw-pointer %sdl::f-rect))
              (%sdl::b (claw-utils:claw-pointer %sdl::f-rect)))

(declaim (inline %sdl::has-lasx))

(cffi:defcfun ("SDL_HasLASX" %sdl::has-lasx) %sdl::bool)

(declaim (inline %sdl::has-lsx))

(cffi:defcfun ("SDL_HasLSX" %sdl::has-lsx) %sdl::bool)

(declaim (inline %sdl::has-mmx))

(cffi:defcfun ("SDL_HasMMX" %sdl::has-mmx) %sdl::bool)

(declaim (inline %sdl::has-neon))

(cffi:defcfun ("SDL_HasNEON" %sdl::has-neon) %sdl::bool)

(declaim (inline %sdl::has-rdtsc))

(cffi:defcfun ("SDL_HasRDTSC" %sdl::has-rdtsc) %sdl::bool)

(declaim (inline %sdl::has-sse))

(cffi:defcfun ("SDL_HasSSE" %sdl::has-sse) %sdl::bool)

(declaim (inline %sdl::has-sse2))

(cffi:defcfun ("SDL_HasSSE2" %sdl::has-sse2) %sdl::bool)

(declaim (inline %sdl::has-sse3))

(cffi:defcfun ("SDL_HasSSE3" %sdl::has-sse3) %sdl::bool)

(declaim (inline %sdl::has-sse41))

(cffi:defcfun ("SDL_HasSSE41" %sdl::has-sse41) %sdl::bool)

(declaim (inline %sdl::has-sse42))

(cffi:defcfun ("SDL_HasSSE42" %sdl::has-sse42) %sdl::bool)

(declaim (inline %sdl::has-screen-keyboard-support))

(cffi:defcfun ("SDL_HasScreenKeyboardSupport"
               %sdl::has-screen-keyboard-support)
              %sdl::bool)

(declaim (inline %sdl::has-surface-rle))

(cffi:defcfun ("SDL_HasSurfaceRLE" %sdl::has-surface-rle)
              %sdl::bool
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface)))

(declaim (inline %sdl::hide-window))

(cffi:defcfun ("SDL_HideWindow" %sdl::hide-window)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::init))

(cffi:defcfun ("SDL_Init" %sdl::init) :int (%sdl::flags %sdl::uint32))

(declaim (inline %sdl::init-sub-system))

(cffi:defcfun ("SDL_InitSubSystem" %sdl::init-sub-system)
              :int
              (%sdl::flags %sdl::uint32))

(declaim (inline %sdl::intersect-f-rect))

(cffi:defcfun ("SDL_IntersectFRect" %sdl::intersect-f-rect)
              %sdl::bool
              (%sdl::a (claw-utils:claw-pointer %sdl::f-rect))
              (%sdl::b (claw-utils:claw-pointer %sdl::f-rect))
              (%sdl::result (claw-utils:claw-pointer %sdl::f-rect)))

(declaim (inline %sdl::intersect-f-rect-and-line))

(cffi:defcfun ("SDL_IntersectFRectAndLine"
               %sdl::intersect-f-rect-and-line)
              %sdl::bool
              (%sdl::rect (claw-utils:claw-pointer %sdl::f-rect))
              (%sdl::x1 (claw-utils:claw-pointer :float))
              (%sdl::y1 (claw-utils:claw-pointer :float))
              (%sdl::x2 (claw-utils:claw-pointer :float))
              (%sdl::y2 (claw-utils:claw-pointer :float)))

(declaim (inline %sdl::intersect-rect))

(cffi:defcfun ("SDL_IntersectRect" %sdl::intersect-rect)
              %sdl::bool
              (%sdl::a (claw-utils:claw-pointer %sdl::rect))
              (%sdl::b (claw-utils:claw-pointer %sdl::rect))
              (%sdl::result (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::intersect-rect-and-line))

(cffi:defcfun ("SDL_IntersectRectAndLine"
               %sdl::intersect-rect-and-line)
              %sdl::bool
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::x1 (claw-utils:claw-pointer :int))
              (%sdl::y1 (claw-utils:claw-pointer :int))
              (%sdl::x2 (claw-utils:claw-pointer :int))
              (%sdl::y2 (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::is-game-controller))

(cffi:defcfun ("SDL_IsGameController" %sdl::is-game-controller)
              %sdl::bool
              (%sdl::joystick-index :int))

(declaim (inline %sdl::is-screen-keyboard-shown))

(cffi:defcfun ("SDL_IsScreenKeyboardShown"
               %sdl::is-screen-keyboard-shown)
              %sdl::bool
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::is-screen-saver-enabled))

(cffi:defcfun ("SDL_IsScreenSaverEnabled"
               %sdl::is-screen-saver-enabled)
              %sdl::bool)

(declaim (inline %sdl::is-shaped-window))

(cffi:defcfun ("SDL_IsShapedWindow" %sdl::is-shaped-window)
              %sdl::bool
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::is-tablet))

(cffi:defcfun ("SDL_IsTablet" %sdl::is-tablet) %sdl::bool)

(declaim (inline %sdl::is-text-input-active))

(cffi:defcfun ("SDL_IsTextInputActive" %sdl::is-text-input-active)
              %sdl::bool)

(declaim (inline %sdl::is-text-input-shown))

(cffi:defcfun ("SDL_IsTextInputShown" %sdl::is-text-input-shown)
              %sdl::bool)

(cffi:defctype %sdl::joystick-type %sdl::|C:@EA@SDL-JOYSTICK-TYPE|)

(declaim (inline %sdl::joystick-attach-virtual))

(cffi:defcfun ("SDL_JoystickAttachVirtual"
               %sdl::joystick-attach-virtual)
              :int
              (%sdl::type %sdl::joystick-type)
              (%sdl::naxes :int)
              (%sdl::nbuttons :int)
              (%sdl::nhats :int))

(cffi:defcstruct (%sdl::virtual-joystick-desc :size 88)
                 (%sdl::version %sdl::uint16 :offset 0)
                 (%sdl::type %sdl::uint16 :offset 2)
                 (%sdl::naxes %sdl::uint16 :offset 4)
                 (%sdl::nbuttons %sdl::uint16 :offset 6)
                 (%sdl::nhats %sdl::uint16 :offset 8)
                 (%sdl::vendor-id %sdl::uint16 :offset 10)
                 (%sdl::product-id %sdl::uint16 :offset 12)
                 (%sdl::padding %sdl::uint16 :offset 14)
                 (%sdl::button-mask %sdl::uint32 :offset 16)
                 (%sdl::axis-mask %sdl::uint32 :offset 20)
                 (%sdl::name claw-utils:claw-string :offset 24)
                 (%sdl::userdata (claw-utils:claw-pointer :void)
                  :offset 32)
                 (%sdl::update (claw-utils:claw-pointer :void)
                  :offset 40)
                 (%sdl::set-player-index
                  (claw-utils:claw-pointer :void) :offset 48)
                 (%sdl::rumble (claw-utils:claw-pointer :void)
                  :offset 56)
                 (%sdl::rumble-triggers
                  (claw-utils:claw-pointer :void) :offset 64)
                 (%sdl::set-led (claw-utils:claw-pointer :void)
                  :offset 72)
                 (%sdl::send-effect (claw-utils:claw-pointer :void)
                  :offset 80))

(cffi:defctype %sdl::virtual-joystick-desc
               (:struct %sdl::virtual-joystick-desc))

(declaim (inline %sdl::joystick-attach-virtual-ex))

(cffi:defcfun ("SDL_JoystickAttachVirtualEx"
               %sdl::joystick-attach-virtual-ex)
              :int
              (%sdl::desc
               (claw-utils:claw-pointer %sdl::virtual-joystick-desc)))

(declaim (inline %sdl::joystick-close))

(cffi:defcfun ("SDL_JoystickClose" %sdl::joystick-close)
              :void
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(cffi:defctype %sdl::joystick-power-level
               %sdl::|C:@EA@SDL-JOYSTICK-POWER-LEVEL|)

(declaim (inline %sdl::joystick-current-power-level))

(cffi:defcfun ("SDL_JoystickCurrentPowerLevel"
               %sdl::joystick-current-power-level)
              %sdl::joystick-power-level
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-detach-virtual))

(cffi:defcfun ("SDL_JoystickDetachVirtual"
               %sdl::joystick-detach-virtual)
              :int
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-event-state))

(cffi:defcfun ("SDL_JoystickEventState" %sdl::joystick-event-state)
              :int
              (%sdl::state :int))

(declaim (inline %sdl::joystick-from-instance-id))

(cffi:defcfun ("SDL_JoystickFromInstanceID"
               %sdl::joystick-from-instance-id)
              (claw-utils:claw-pointer %sdl::joystick)
              (%sdl::instance-id %sdl::joystick-id))

(declaim (inline %sdl::joystick-from-player-index))

(cffi:defcfun ("SDL_JoystickFromPlayerIndex"
               %sdl::joystick-from-player-index)
              (claw-utils:claw-pointer %sdl::joystick)
              (%sdl::player-index :int))

(declaim (inline %sdl::joystick-get-attached))

(cffi:defcfun ("SDL_JoystickGetAttached" %sdl::joystick-get-attached)
              %sdl::bool
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-get-axis))

(cffi:defcfun ("SDL_JoystickGetAxis" %sdl::joystick-get-axis)
              %sdl::sint16
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::axis :int))

(declaim (inline %sdl::joystick-get-axis-initial-state))

(cffi:defcfun ("SDL_JoystickGetAxisInitialState"
               %sdl::joystick-get-axis-initial-state)
              %sdl::bool
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::axis :int)
              (%sdl::state (claw-utils:claw-pointer %sdl::sint16)))

(declaim (inline %sdl::joystick-get-ball))

(cffi:defcfun ("SDL_JoystickGetBall" %sdl::joystick-get-ball)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::ball :int)
              (%sdl::dx (claw-utils:claw-pointer :int))
              (%sdl::dy (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::joystick-get-button))

(cffi:defcfun ("SDL_JoystickGetButton" %sdl::joystick-get-button)
              %sdl::uint8
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::button :int))

(declaim (inline %sdl::joystick-get-device-guid))

(cffi:defcfun ("__claw_SDL_JoystickGetDeviceGUID"
               %sdl::joystick-get-device-guid)
              (claw-utils:claw-pointer %sdl::joystick-guid)
              (%sdl::%%claw-result-
               (claw-utils:claw-pointer %sdl::joystick-guid))
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-get-device-instance-id))

(cffi:defcfun ("SDL_JoystickGetDeviceInstanceID"
               %sdl::joystick-get-device-instance-id)
              %sdl::joystick-id
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-get-device-player-index))

(cffi:defcfun ("SDL_JoystickGetDevicePlayerIndex"
               %sdl::joystick-get-device-player-index)
              :int
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-get-device-product))

(cffi:defcfun ("SDL_JoystickGetDeviceProduct"
               %sdl::joystick-get-device-product)
              %sdl::uint16
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-get-device-product-version))

(cffi:defcfun ("SDL_JoystickGetDeviceProductVersion"
               %sdl::joystick-get-device-product-version)
              %sdl::uint16
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-get-device-type))

(cffi:defcfun ("SDL_JoystickGetDeviceType"
               %sdl::joystick-get-device-type)
              %sdl::joystick-type
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-get-device-vendor))

(cffi:defcfun ("SDL_JoystickGetDeviceVendor"
               %sdl::joystick-get-device-vendor)
              %sdl::uint16
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-get-firmware-version))

(cffi:defcfun ("SDL_JoystickGetFirmwareVersion"
               %sdl::joystick-get-firmware-version)
              %sdl::uint16
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-get-guid))

(cffi:defcfun ("__claw_SDL_JoystickGetGUID" %sdl::joystick-get-guid)
              (claw-utils:claw-pointer %sdl::joystick-guid)
              (%sdl::%%claw-result-
               (claw-utils:claw-pointer %sdl::joystick-guid))
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-get-guid-from-string))

(cffi:defcfun ("__claw_SDL_JoystickGetGUIDFromString"
               %sdl::joystick-get-guid-from-string)
              (claw-utils:claw-pointer %sdl::joystick-guid)
              (%sdl::%%claw-result-
               (claw-utils:claw-pointer %sdl::joystick-guid))
              (%sdl::pch-guid claw-utils:claw-string))

(declaim (inline %sdl::joystick-get-guid-string))

(cffi:defcfun ("__claw_SDL_JoystickGetGUIDString"
               %sdl::joystick-get-guid-string)
              :void
              (%sdl::guid
               (claw-utils:claw-pointer %sdl::joystick-guid))
              (%sdl::psz-guid claw-utils:claw-string)
              (%sdl::cb-guid :int))

(declaim (inline %sdl::joystick-get-hat))

(cffi:defcfun ("SDL_JoystickGetHat" %sdl::joystick-get-hat)
              %sdl::uint8
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::hat :int))

(declaim (inline %sdl::joystick-get-player-index))

(cffi:defcfun ("SDL_JoystickGetPlayerIndex"
               %sdl::joystick-get-player-index)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-get-product))

(cffi:defcfun ("SDL_JoystickGetProduct" %sdl::joystick-get-product)
              %sdl::uint16
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-get-product-version))

(cffi:defcfun ("SDL_JoystickGetProductVersion"
               %sdl::joystick-get-product-version)
              %sdl::uint16
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-get-serial))

(cffi:defcfun ("SDL_JoystickGetSerial" %sdl::joystick-get-serial)
              claw-utils:claw-string
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-get-type))

(cffi:defcfun ("SDL_JoystickGetType" %sdl::joystick-get-type)
              %sdl::joystick-type
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-get-vendor))

(cffi:defcfun ("SDL_JoystickGetVendor" %sdl::joystick-get-vendor)
              %sdl::uint16
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-has-led))

(cffi:defcfun ("SDL_JoystickHasLED" %sdl::joystick-has-led)
              %sdl::bool
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-has-rumble))

(cffi:defcfun ("SDL_JoystickHasRumble" %sdl::joystick-has-rumble)
              %sdl::bool
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-has-rumble-triggers))

(cffi:defcfun ("SDL_JoystickHasRumbleTriggers"
               %sdl::joystick-has-rumble-triggers)
              %sdl::bool
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-instance-id))

(cffi:defcfun ("SDL_JoystickInstanceID" %sdl::joystick-instance-id)
              %sdl::joystick-id
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-is-haptic))

(cffi:defcfun ("SDL_JoystickIsHaptic" %sdl::joystick-is-haptic)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-is-virtual))

(cffi:defcfun ("SDL_JoystickIsVirtual" %sdl::joystick-is-virtual)
              %sdl::bool
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-name))

(cffi:defcfun ("SDL_JoystickName" %sdl::joystick-name)
              claw-utils:claw-string
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-name-for-index))

(cffi:defcfun ("SDL_JoystickNameForIndex"
               %sdl::joystick-name-for-index)
              claw-utils:claw-string
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-num-axes))

(cffi:defcfun ("SDL_JoystickNumAxes" %sdl::joystick-num-axes)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-num-balls))

(cffi:defcfun ("SDL_JoystickNumBalls" %sdl::joystick-num-balls)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-num-buttons))

(cffi:defcfun ("SDL_JoystickNumButtons" %sdl::joystick-num-buttons)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-num-hats))

(cffi:defcfun ("SDL_JoystickNumHats" %sdl::joystick-num-hats)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-open))

(cffi:defcfun ("SDL_JoystickOpen" %sdl::joystick-open)
              (claw-utils:claw-pointer %sdl::joystick)
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-path))

(cffi:defcfun ("SDL_JoystickPath" %sdl::joystick-path)
              claw-utils:claw-string
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick)))

(declaim (inline %sdl::joystick-path-for-index))

(cffi:defcfun ("SDL_JoystickPathForIndex"
               %sdl::joystick-path-for-index)
              claw-utils:claw-string
              (%sdl::device-index :int))

(declaim (inline %sdl::joystick-rumble))

(cffi:defcfun ("SDL_JoystickRumble" %sdl::joystick-rumble)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::low-frequency-rumble %sdl::uint16)
              (%sdl::high-frequency-rumble %sdl::uint16)
              (%sdl::duration-ms %sdl::uint32))

(declaim (inline %sdl::joystick-rumble-triggers))

(cffi:defcfun ("SDL_JoystickRumbleTriggers"
               %sdl::joystick-rumble-triggers)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::left-rumble %sdl::uint16)
              (%sdl::right-rumble %sdl::uint16)
              (%sdl::duration-ms %sdl::uint32))

(declaim (inline %sdl::joystick-send-effect))

(cffi:defcfun ("SDL_JoystickSendEffect" %sdl::joystick-send-effect)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::data (claw-utils:claw-pointer :void))
              (%sdl::size :int))

(declaim (inline %sdl::joystick-set-led))

(cffi:defcfun ("SDL_JoystickSetLED" %sdl::joystick-set-led)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::red %sdl::uint8)
              (%sdl::green %sdl::uint8)
              (%sdl::blue %sdl::uint8))

(declaim (inline %sdl::joystick-set-player-index))

(cffi:defcfun ("SDL_JoystickSetPlayerIndex"
               %sdl::joystick-set-player-index)
              :void
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::player-index :int))

(declaim (inline %sdl::joystick-set-virtual-axis))

(cffi:defcfun ("SDL_JoystickSetVirtualAxis"
               %sdl::joystick-set-virtual-axis)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::axis :int)
              (%sdl::value %sdl::sint16))

(declaim (inline %sdl::joystick-set-virtual-button))

(cffi:defcfun ("SDL_JoystickSetVirtualButton"
               %sdl::joystick-set-virtual-button)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::button :int)
              (%sdl::value %sdl::uint8))

(declaim (inline %sdl::joystick-set-virtual-hat))

(cffi:defcfun ("SDL_JoystickSetVirtualHat"
               %sdl::joystick-set-virtual-hat)
              :int
              (%sdl::joystick
               (claw-utils:claw-pointer %sdl::joystick))
              (%sdl::hat :int)
              (%sdl::value %sdl::uint8))

(declaim (inline %sdl::joystick-update))

(cffi:defcfun ("SDL_JoystickUpdate" %sdl::joystick-update) :void)

(declaim (inline %sdl::load-bmp-rw))

(cffi:defcfun ("SDL_LoadBMP_RW" %sdl::load-bmp-rw)
              (claw-utils:claw-pointer %sdl::surface)
              (%sdl::src (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::freesrc :int))

(declaim (inline %sdl::load-dollar-templates))

(cffi:defcfun ("SDL_LoadDollarTemplates" %sdl::load-dollar-templates)
              :int
              (%sdl::touch-id %sdl::touch-id)
              (%sdl::src (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::load-file))

(cffi:defcfun ("SDL_LoadFile" %sdl::load-file)
              (claw-utils:claw-pointer :void)
              (%sdl::file claw-utils:claw-string)
              (%sdl::datasize (claw-utils:claw-pointer %sdl::size-t)))

(declaim (inline %sdl::load-file-rw))

(cffi:defcfun ("SDL_LoadFile_RW" %sdl::load-file-rw)
              (claw-utils:claw-pointer :void)
              (%sdl::src (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::datasize (claw-utils:claw-pointer %sdl::size-t))
              (%sdl::freesrc :int))

(declaim (inline %sdl::load-function))

(cffi:defcfun ("SDL_LoadFunction" %sdl::load-function)
              (claw-utils:claw-pointer :void)
              (%sdl::handle (claw-utils:claw-pointer :void))
              (%sdl::name claw-utils:claw-string))

(declaim (inline %sdl::load-object))

(cffi:defcfun ("SDL_LoadObject" %sdl::load-object)
              (claw-utils:claw-pointer :void)
              (%sdl::sofile claw-utils:claw-string))

(declaim (inline %sdl::load-wav-rw))

(cffi:defcfun ("SDL_LoadWAV_RW" %sdl::load-wav-rw)
              (claw-utils:claw-pointer %sdl::audio-spec)
              (%sdl::src (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::freesrc :int)
              (%sdl::spec (claw-utils:claw-pointer %sdl::audio-spec))
              (%sdl::audio-buf
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer %sdl::uint8)))
              (%sdl::audio-len
               (claw-utils:claw-pointer %sdl::uint32)))

(declaim (inline %sdl::lock-audio))

(cffi:defcfun ("SDL_LockAudio" %sdl::lock-audio) :void)

(declaim (inline %sdl::lock-audio-device))

(cffi:defcfun ("SDL_LockAudioDevice" %sdl::lock-audio-device)
              :void
              (%sdl::dev %sdl::audio-device-id))

(declaim (inline %sdl::lock-joysticks))

(cffi:defcfun ("SDL_LockJoysticks" %sdl::lock-joysticks) :void)

(declaim (inline %sdl::lock-mutex))

(cffi:defcfun ("SDL_LockMutex" %sdl::lock-mutex)
              :int
              (%sdl::mutex (claw-utils:claw-pointer %sdl::mutex)))

(declaim (inline %sdl::lock-sensors))

(cffi:defcfun ("SDL_LockSensors" %sdl::lock-sensors) :void)

(declaim (inline %sdl::lock-surface))

(cffi:defcfun ("SDL_LockSurface" %sdl::lock-surface)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface)))

(declaim (inline %sdl::lock-texture))

(cffi:defcfun ("SDL_LockTexture" %sdl::lock-texture)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::pixels
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer :void)))
              (%sdl::pitch (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::lock-texture-to-surface))

(cffi:defcfun ("SDL_LockTextureToSurface"
               %sdl::lock-texture-to-surface)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::surface
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer %sdl::surface))))

(declaim (inline %sdl::log))

(cffi:defcfun ("SDL_Log" %sdl::log)
              :void
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(declaim (inline %sdl::log-critical))

(cffi:defcfun ("SDL_LogCritical" %sdl::log-critical)
              :void
              (%sdl::category :int)
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(declaim (inline %sdl::log-debug))

(cffi:defcfun ("SDL_LogDebug" %sdl::log-debug)
              :void
              (%sdl::category :int)
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(declaim (inline %sdl::log-error))

(cffi:defcfun ("SDL_LogError" %sdl::log-error)
              :void
              (%sdl::category :int)
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(cffi:defctype %sdl::log-output-function
               (claw-utils:claw-pointer :void))

(declaim (inline %sdl::log-get-output-function))

(cffi:defcfun ("SDL_LogGetOutputFunction"
               %sdl::log-get-output-function)
              :void
              (%sdl::callback
               (claw-utils:claw-pointer %sdl::log-output-function))
              (%sdl::userdata
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer :void))))

(cffi:defctype %sdl::log-priority %sdl::|C:@EA@SDL-LOG-PRIORITY|)

(declaim (inline %sdl::log-get-priority))

(cffi:defcfun ("SDL_LogGetPriority" %sdl::log-get-priority)
              %sdl::log-priority
              (%sdl::category :int))

(declaim (inline %sdl::log-info))

(cffi:defcfun ("SDL_LogInfo" %sdl::log-info)
              :void
              (%sdl::category :int)
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(declaim (inline %sdl::log-message))

(cffi:defcfun ("SDL_LogMessage" %sdl::log-message)
              :void
              (%sdl::category :int)
              (%sdl::priority %sdl::log-priority)
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(cffi:defctype %sdl::va-list (:pointer :void))

(declaim (inline %sdl::log-message-v))

(cffi:defcfun ("SDL_LogMessageV" %sdl::log-message-v)
              :void
              (%sdl::category :int)
              (%sdl::priority %sdl::log-priority)
              (%sdl::fmt claw-utils:claw-string)
              (%sdl::ap %sdl::va-list))

(declaim (inline %sdl::log-reset-priorities))

(cffi:defcfun ("SDL_LogResetPriorities" %sdl::log-reset-priorities)
              :void)

(declaim (inline %sdl::log-set-all-priority))

(cffi:defcfun ("SDL_LogSetAllPriority" %sdl::log-set-all-priority)
              :void
              (%sdl::priority %sdl::log-priority))

(declaim (inline %sdl::log-set-output-function))

(cffi:defcfun ("SDL_LogSetOutputFunction"
               %sdl::log-set-output-function)
              :void
              (%sdl::callback %sdl::log-output-function)
              (%sdl::userdata (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::log-set-priority))

(cffi:defcfun ("SDL_LogSetPriority" %sdl::log-set-priority)
              :void
              (%sdl::category :int)
              (%sdl::priority %sdl::log-priority))

(declaim (inline %sdl::log-verbose))

(cffi:defcfun ("SDL_LogVerbose" %sdl::log-verbose)
              :void
              (%sdl::category :int)
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(declaim (inline %sdl::log-warn))

(cffi:defcfun ("SDL_LogWarn" %sdl::log-warn)
              :void
              (%sdl::category :int)
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(declaim (inline %sdl::lower-blit))

(cffi:defcfun ("SDL_LowerBlit" %sdl::lower-blit)
              :int
              (%sdl::src (claw-utils:claw-pointer %sdl::surface))
              (%sdl::srcrect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::dst (claw-utils:claw-pointer %sdl::surface))
              (%sdl::dstrect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::lower-blit-scaled))

(cffi:defcfun ("SDL_LowerBlitScaled" %sdl::lower-blit-scaled)
              :int
              (%sdl::src (claw-utils:claw-pointer %sdl::surface))
              (%sdl::srcrect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::dst (claw-utils:claw-pointer %sdl::surface))
              (%sdl::dstrect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::map-rgb))

(cffi:defcfun ("SDL_MapRGB" %sdl::map-rgb)
              %sdl::uint32
              (%sdl::format
               (claw-utils:claw-pointer %sdl::pixel-format))
              (%sdl::r %sdl::uint8)
              (%sdl::g %sdl::uint8)
              (%sdl::b %sdl::uint8))

(declaim (inline %sdl::map-rgba))

(cffi:defcfun ("SDL_MapRGBA" %sdl::map-rgba)
              %sdl::uint32
              (%sdl::format
               (claw-utils:claw-pointer %sdl::pixel-format))
              (%sdl::r %sdl::uint8)
              (%sdl::g %sdl::uint8)
              (%sdl::b %sdl::uint8)
              (%sdl::a %sdl::uint8))

(declaim (inline %sdl::masks-to-pixel-format-enum))

(cffi:defcfun ("SDL_MasksToPixelFormatEnum"
               %sdl::masks-to-pixel-format-enum)
              %sdl::uint32
              (%sdl::bpp :int)
              (%sdl::rmask %sdl::uint32)
              (%sdl::gmask %sdl::uint32)
              (%sdl::bmask %sdl::uint32)
              (%sdl::amask %sdl::uint32))

(declaim (inline %sdl::maximize-window))

(cffi:defcfun ("SDL_MaximizeWindow" %sdl::maximize-window)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::memory-barrier-acquire-function))

(cffi:defcfun ("SDL_MemoryBarrierAcquireFunction"
               %sdl::memory-barrier-acquire-function)
              :void)

(declaim (inline %sdl::memory-barrier-release-function))

(cffi:defcfun ("SDL_MemoryBarrierReleaseFunction"
               %sdl::memory-barrier-release-function)
              :void)

(cffi:defctype %sdl::metal-view (claw-utils:claw-pointer :void))

(declaim (inline %sdl::metal-create-view))

(cffi:defcfun ("SDL_Metal_CreateView" %sdl::metal-create-view)
              %sdl::metal-view
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::metal-destroy-view))

(cffi:defcfun ("SDL_Metal_DestroyView" %sdl::metal-destroy-view)
              :void
              (%sdl::view %sdl::metal-view))

(declaim (inline %sdl::metal-get-drawable-size))

(cffi:defcfun ("SDL_Metal_GetDrawableSize"
               %sdl::metal-get-drawable-size)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::w (claw-utils:claw-pointer :int))
              (%sdl::h (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::metal-get-layer))

(cffi:defcfun ("SDL_Metal_GetLayer" %sdl::metal-get-layer)
              (claw-utils:claw-pointer :void)
              (%sdl::view %sdl::metal-view))

(declaim (inline %sdl::minimize-window))

(cffi:defcfun ("SDL_MinimizeWindow" %sdl::minimize-window)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::mix-audio))

(cffi:defcfun ("SDL_MixAudio" %sdl::mix-audio)
              :void
              (%sdl::dst (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::src (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::len %sdl::uint32)
              (%sdl::volume :int))

(declaim (inline %sdl::mix-audio-format))

(cffi:defcfun ("SDL_MixAudioFormat" %sdl::mix-audio-format)
              :void
              (%sdl::dst (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::src (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::format %sdl::audio-format)
              (%sdl::len %sdl::uint32)
              (%sdl::volume :int))

(declaim (inline %sdl::mouse-is-haptic))

(cffi:defcfun ("SDL_MouseIsHaptic" %sdl::mouse-is-haptic) :int)

(declaim (inline %sdl::new-audio-stream))

(cffi:defcfun ("SDL_NewAudioStream" %sdl::new-audio-stream)
              (claw-utils:claw-pointer %sdl::audio-stream)
              (%sdl::src-format %sdl::audio-format)
              (%sdl::src-channels %sdl::uint8)
              (%sdl::src-rate :int)
              (%sdl::dst-format %sdl::audio-format)
              (%sdl::dst-channels %sdl::uint8)
              (%sdl::dst-rate :int))

(declaim (inline %sdl::num-haptics))

(cffi:defcfun ("SDL_NumHaptics" %sdl::num-haptics) :int)

(declaim (inline %sdl::num-joysticks))

(cffi:defcfun ("SDL_NumJoysticks" %sdl::num-joysticks) :int)

(declaim (inline %sdl::num-sensors))

(cffi:defcfun ("SDL_NumSensors" %sdl::num-sensors) :int)

(declaim (inline %sdl::on-application-did-become-active))

(cffi:defcfun ("SDL_OnApplicationDidBecomeActive"
               %sdl::on-application-did-become-active)
              :void)

(declaim (inline %sdl::on-application-did-enter-background))

(cffi:defcfun ("SDL_OnApplicationDidEnterBackground"
               %sdl::on-application-did-enter-background)
              :void)

(declaim (inline %sdl::on-application-did-receive-memory-warning))

(cffi:defcfun ("SDL_OnApplicationDidReceiveMemoryWarning"
               %sdl::on-application-did-receive-memory-warning)
              :void)

(declaim (inline %sdl::on-application-will-enter-foreground))

(cffi:defcfun ("SDL_OnApplicationWillEnterForeground"
               %sdl::on-application-will-enter-foreground)
              :void)

(declaim (inline %sdl::on-application-will-resign-active))

(cffi:defcfun ("SDL_OnApplicationWillResignActive"
               %sdl::on-application-will-resign-active)
              :void)

(declaim (inline %sdl::on-application-will-terminate))

(cffi:defcfun ("SDL_OnApplicationWillTerminate"
               %sdl::on-application-will-terminate)
              :void)

(declaim (inline %sdl::open-audio))

(cffi:defcfun ("SDL_OpenAudio" %sdl::open-audio)
              :int
              (%sdl::desired
               (claw-utils:claw-pointer %sdl::audio-spec))
              (%sdl::obtained
               (claw-utils:claw-pointer %sdl::audio-spec)))

(declaim (inline %sdl::open-audio-device))

(cffi:defcfun ("SDL_OpenAudioDevice" %sdl::open-audio-device)
              %sdl::audio-device-id
              (%sdl::device claw-utils:claw-string)
              (%sdl::iscapture :int)
              (%sdl::desired
               (claw-utils:claw-pointer %sdl::audio-spec))
              (%sdl::obtained
               (claw-utils:claw-pointer %sdl::audio-spec))
              (%sdl::allowed-changes :int))

(declaim (inline %sdl::open-url))

(cffi:defcfun ("SDL_OpenURL" %sdl::open-url)
              :int
              (%sdl::url claw-utils:claw-string))

(declaim (inline %sdl::pause-audio))

(cffi:defcfun ("SDL_PauseAudio" %sdl::pause-audio)
              :void
              (%sdl::pause-on :int))

(declaim (inline %sdl::pause-audio-device))

(cffi:defcfun ("SDL_PauseAudioDevice" %sdl::pause-audio-device)
              :void
              (%sdl::dev %sdl::audio-device-id)
              (%sdl::pause-on :int))

(cffi:defcstruct (%sdl::common-event :size 8)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4))

(cffi:defctype %sdl::common-event (:struct %sdl::common-event))

(cffi:defcstruct (%sdl::display-event :size 20)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::display %sdl::uint32 :offset 8)
                 (%sdl::event %sdl::uint8 :offset 12)
                 (%sdl::padding1 %sdl::uint8 :offset 13)
                 (%sdl::padding2 %sdl::uint8 :offset 14)
                 (%sdl::padding3 %sdl::uint8 :offset 15)
                 (%sdl::data1 %sdl::sint32 :offset 16))

(cffi:defctype %sdl::display-event (:struct %sdl::display-event))

(cffi:defcstruct (%sdl::window-event :size 24)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::window-id %sdl::uint32 :offset 8)
                 (%sdl::event %sdl::uint8 :offset 12)
                 (%sdl::padding1 %sdl::uint8 :offset 13)
                 (%sdl::padding2 %sdl::uint8 :offset 14)
                 (%sdl::padding3 %sdl::uint8 :offset 15)
                 (%sdl::data1 %sdl::sint32 :offset 16)
                 (%sdl::data2 %sdl::sint32 :offset 20))

(cffi:defctype %sdl::window-event (:struct %sdl::window-event))

(cffi:defcstruct (%sdl::keysym :size 16)
                 (%sdl::scancode %sdl::scancode :offset 0)
                 (%sdl::sym %sdl::keycode :offset 4)
                 (%sdl::mod %sdl::uint16 :offset 8)
                 (%sdl::unused %sdl::uint32 :offset 12))

(cffi:defctype %sdl::keysym (:struct %sdl::keysym))

(cffi:defcstruct (%sdl::keyboard-event :size 32)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::window-id %sdl::uint32 :offset 8)
                 (%sdl::state %sdl::uint8 :offset 12)
                 (%sdl::repeat %sdl::uint8 :offset 13)
                 (%sdl::padding2 %sdl::uint8 :offset 14)
                 (%sdl::padding3 %sdl::uint8 :offset 15)
                 (%sdl::keysym %sdl::keysym :offset 16))

(cffi:defctype %sdl::keyboard-event (:struct %sdl::keyboard-event))

(cffi:defcstruct (%sdl::text-editing-event :size 52)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::window-id %sdl::uint32 :offset 8)
                 (%sdl::text :char :count 32 :offset 12)
                 (%sdl::start %sdl::sint32 :offset 44)
                 (%sdl::length %sdl::sint32 :offset 48))

(cffi:defctype %sdl::text-editing-event
               (:struct %sdl::text-editing-event))

(cffi:defcstruct (%sdl::text-editing-ext-event :size 32)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::window-id %sdl::uint32 :offset 8)
                 (%sdl::text claw-utils:claw-string :offset 16)
                 (%sdl::start %sdl::sint32 :offset 24)
                 (%sdl::length %sdl::sint32 :offset 28))

(cffi:defctype %sdl::text-editing-ext-event
               (:struct %sdl::text-editing-ext-event))

(cffi:defcstruct (%sdl::text-input-event :size 44)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::window-id %sdl::uint32 :offset 8)
                 (%sdl::text :char :count 32 :offset 12))

(cffi:defctype %sdl::text-input-event
               (:struct %sdl::text-input-event))

(cffi:defcstruct (%sdl::mouse-motion-event :size 36)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::window-id %sdl::uint32 :offset 8)
                 (%sdl::which %sdl::uint32 :offset 12)
                 (%sdl::state %sdl::uint32 :offset 16)
                 (%sdl::x %sdl::sint32 :offset 20)
                 (%sdl::y %sdl::sint32 :offset 24)
                 (%sdl::xrel %sdl::sint32 :offset 28)
                 (%sdl::yrel %sdl::sint32 :offset 32))

(cffi:defctype %sdl::mouse-motion-event
               (:struct %sdl::mouse-motion-event))

(cffi:defcstruct (%sdl::mouse-button-event :size 28)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::window-id %sdl::uint32 :offset 8)
                 (%sdl::which %sdl::uint32 :offset 12)
                 (%sdl::button %sdl::uint8 :offset 16)
                 (%sdl::state %sdl::uint8 :offset 17)
                 (%sdl::clicks %sdl::uint8 :offset 18)
                 (%sdl::padding1 %sdl::uint8 :offset 19)
                 (%sdl::x %sdl::sint32 :offset 20)
                 (%sdl::y %sdl::sint32 :offset 24))

(cffi:defctype %sdl::mouse-button-event
               (:struct %sdl::mouse-button-event))

(cffi:defcstruct (%sdl::mouse-wheel-event :size 36)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::window-id %sdl::uint32 :offset 8)
                 (%sdl::which %sdl::uint32 :offset 12)
                 (%sdl::x %sdl::sint32 :offset 16)
                 (%sdl::y %sdl::sint32 :offset 20)
                 (%sdl::direction %sdl::uint32 :offset 24)
                 (%sdl::precise-x :float :offset 28)
                 (%sdl::precise-y :float :offset 32))

(cffi:defctype %sdl::mouse-wheel-event
               (:struct %sdl::mouse-wheel-event))

(cffi:defcstruct (%sdl::joy-axis-event :size 20)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::joystick-id :offset 8)
                 (%sdl::axis %sdl::uint8 :offset 12)
                 (%sdl::padding1 %sdl::uint8 :offset 13)
                 (%sdl::padding2 %sdl::uint8 :offset 14)
                 (%sdl::padding3 %sdl::uint8 :offset 15)
                 (%sdl::value %sdl::sint16 :offset 16)
                 (%sdl::padding4 %sdl::uint16 :offset 18))

(cffi:defctype %sdl::joy-axis-event (:struct %sdl::joy-axis-event))

(cffi:defcstruct (%sdl::joy-ball-event :size 20)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::joystick-id :offset 8)
                 (%sdl::ball %sdl::uint8 :offset 12)
                 (%sdl::padding1 %sdl::uint8 :offset 13)
                 (%sdl::padding2 %sdl::uint8 :offset 14)
                 (%sdl::padding3 %sdl::uint8 :offset 15)
                 (%sdl::xrel %sdl::sint16 :offset 16)
                 (%sdl::yrel %sdl::sint16 :offset 18))

(cffi:defctype %sdl::joy-ball-event (:struct %sdl::joy-ball-event))

(cffi:defcstruct (%sdl::joy-hat-event :size 16)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::joystick-id :offset 8)
                 (%sdl::hat %sdl::uint8 :offset 12)
                 (%sdl::value %sdl::uint8 :offset 13)
                 (%sdl::padding1 %sdl::uint8 :offset 14)
                 (%sdl::padding2 %sdl::uint8 :offset 15))

(cffi:defctype %sdl::joy-hat-event (:struct %sdl::joy-hat-event))

(cffi:defcstruct (%sdl::joy-button-event :size 16)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::joystick-id :offset 8)
                 (%sdl::button %sdl::uint8 :offset 12)
                 (%sdl::state %sdl::uint8 :offset 13)
                 (%sdl::padding1 %sdl::uint8 :offset 14)
                 (%sdl::padding2 %sdl::uint8 :offset 15))

(cffi:defctype %sdl::joy-button-event
               (:struct %sdl::joy-button-event))

(cffi:defcstruct (%sdl::joy-device-event :size 12)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::sint32 :offset 8))

(cffi:defctype %sdl::joy-device-event
               (:struct %sdl::joy-device-event))

(cffi:defcstruct (%sdl::joy-battery-event :size 16)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::joystick-id :offset 8)
                 (%sdl::level %sdl::joystick-power-level :offset 12))

(cffi:defctype %sdl::joy-battery-event
               (:struct %sdl::joy-battery-event))

(cffi:defcstruct (%sdl::controller-axis-event :size 20)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::joystick-id :offset 8)
                 (%sdl::axis %sdl::uint8 :offset 12)
                 (%sdl::padding1 %sdl::uint8 :offset 13)
                 (%sdl::padding2 %sdl::uint8 :offset 14)
                 (%sdl::padding3 %sdl::uint8 :offset 15)
                 (%sdl::value %sdl::sint16 :offset 16)
                 (%sdl::padding4 %sdl::uint16 :offset 18))

(cffi:defctype %sdl::controller-axis-event
               (:struct %sdl::controller-axis-event))

(cffi:defcstruct (%sdl::controller-button-event :size 16)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::joystick-id :offset 8)
                 (%sdl::button %sdl::uint8 :offset 12)
                 (%sdl::state %sdl::uint8 :offset 13)
                 (%sdl::padding1 %sdl::uint8 :offset 14)
                 (%sdl::padding2 %sdl::uint8 :offset 15))

(cffi:defctype %sdl::controller-button-event
               (:struct %sdl::controller-button-event))

(cffi:defcstruct (%sdl::controller-device-event :size 12)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::sint32 :offset 8))

(cffi:defctype %sdl::controller-device-event
               (:struct %sdl::controller-device-event))

(cffi:defcstruct (%sdl::controller-touchpad-event :size 32)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::joystick-id :offset 8)
                 (%sdl::touchpad %sdl::sint32 :offset 12)
                 (%sdl::finger %sdl::sint32 :offset 16)
                 (%sdl::x :float :offset 20)
                 (%sdl::y :float :offset 24)
                 (%sdl::pressure :float :offset 28))

(cffi:defctype %sdl::controller-touchpad-event
               (:struct %sdl::controller-touchpad-event))

(cffi:defcstruct (%sdl::controller-sensor-event :size 28)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::joystick-id :offset 8)
                 (%sdl::sensor %sdl::sint32 :offset 12)
                 (%sdl::data :float :count 3 :offset 16))

(cffi:defctype %sdl::controller-sensor-event
               (:struct %sdl::controller-sensor-event))

(cffi:defcstruct (%sdl::audio-device-event :size 16)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::uint32 :offset 8)
                 (%sdl::iscapture %sdl::uint8 :offset 12)
                 (%sdl::padding1 %sdl::uint8 :offset 13)
                 (%sdl::padding2 %sdl::uint8 :offset 14)
                 (%sdl::padding3 %sdl::uint8 :offset 15))

(cffi:defctype %sdl::audio-device-event
               (:struct %sdl::audio-device-event))

(cffi:defcstruct (%sdl::sensor-event :size 36)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::which %sdl::sint32 :offset 8)
                 (%sdl::data :float :count 6 :offset 12))

(cffi:defctype %sdl::sensor-event (:struct %sdl::sensor-event))

(cffi:defcstruct (%sdl::quit-event :size 8)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4))

(cffi:defctype %sdl::quit-event (:struct %sdl::quit-event))

(cffi:defcstruct (%sdl::user-event :size 32)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::window-id %sdl::uint32 :offset 8)
                 (%sdl::code %sdl::sint32 :offset 12)
                 (%sdl::data1 (claw-utils:claw-pointer :void) :offset
                  16)
                 (%sdl::data2 (claw-utils:claw-pointer :void) :offset
                  24))

(cffi:defctype %sdl::user-event (:struct %sdl::user-event))

(cffi:defctype %sdl::uint :unsigned-int)

(cffi:defctype %sdl::wparam :unsigned-long-long)

(cffi:defctype %sdl::lparam :long-long)

(cffi:defcstruct (%sdl::|C:@S@SDL-SYS-W-MMSG@U@SDL-SYSWM.H@3845@S@SDL-SYSWM.H@3903|
                  :size 32)
                 (%sdl::hwnd %sdl::hwnd :offset 0)
                 (%sdl::msg %sdl::uint :offset 8)
                 (%sdl::w-param %sdl::wparam :offset 16)
                 (%sdl::l-param %sdl::lparam :offset 24))

(cffi:defcunion (%sdl::|C:@S@SDL-SYS-W-MMSG@U@SDL-SYSWM.H@3845| :size
                 32)
                (%sdl::win
                 (:struct
                  %sdl::|C:@S@SDL-SYS-W-MMSG@U@SDL-SYSWM.H@3845@S@SDL-SYSWM.H@3903|))
                (%sdl::dummy :int))

(cffi:defcstruct (%sdl::sys-w-mmsg :size 40)
                 (%sdl::version %sdl::version :offset 0)
                 (%sdl::subsystem %sdl::syswm-type :offset 4)
                 (%sdl::msg
                  (:union
                   %sdl::|C:@S@SDL-SYS-W-MMSG@U@SDL-SYSWM.H@3845|)
                  :offset 8))

(cffi:defctype %sdl::sys-w-mmsg (:struct %sdl::sys-w-mmsg))

(cffi:defcstruct (%sdl::sys-wm-event :size 16)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::msg
                  (claw-utils:claw-pointer %sdl::sys-w-mmsg) :offset
                  8))

(cffi:defctype %sdl::sys-wm-event (:struct %sdl::sys-wm-event))

(cffi:defcstruct (%sdl::touch-finger-event :size 48)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::touch-id %sdl::touch-id :offset 8)
                 (%sdl::finger-id %sdl::finger-id :offset 16)
                 (%sdl::x :float :offset 24)
                 (%sdl::y :float :offset 28)
                 (%sdl::dx :float :offset 32)
                 (%sdl::dy :float :offset 36)
                 (%sdl::pressure :float :offset 40)
                 (%sdl::window-id %sdl::uint32 :offset 44))

(cffi:defctype %sdl::touch-finger-event
               (:struct %sdl::touch-finger-event))

(cffi:defcstruct (%sdl::multi-gesture-event :size 40)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::touch-id %sdl::touch-id :offset 8)
                 (%sdl::d-theta :float :offset 16)
                 (%sdl::d-dist :float :offset 20)
                 (%sdl::x :float :offset 24)
                 (%sdl::y :float :offset 28)
                 (%sdl::num-fingers %sdl::uint16 :offset 32)
                 (%sdl::padding %sdl::uint16 :offset 34))

(cffi:defctype %sdl::multi-gesture-event
               (:struct %sdl::multi-gesture-event))

(cffi:defctype %sdl::gesture-id :long-long)

(cffi:defcstruct (%sdl::dollar-gesture-event :size 40)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::touch-id %sdl::touch-id :offset 8)
                 (%sdl::gesture-id %sdl::gesture-id :offset 16)
                 (%sdl::num-fingers %sdl::uint32 :offset 24)
                 (%sdl::error :float :offset 28)
                 (%sdl::x :float :offset 32)
                 (%sdl::y :float :offset 36))

(cffi:defctype %sdl::dollar-gesture-event
               (:struct %sdl::dollar-gesture-event))

(cffi:defcstruct (%sdl::drop-event :size 24)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4)
                 (%sdl::file claw-utils:claw-string :offset 8)
                 (%sdl::window-id %sdl::uint32 :offset 16))

(cffi:defctype %sdl::drop-event (:struct %sdl::drop-event))

(cffi:defcunion (%sdl::event :size 56)
                (%sdl::type %sdl::uint32)
                (%sdl::common %sdl::common-event)
                (%sdl::display %sdl::display-event)
                (%sdl::window %sdl::window-event)
                (%sdl::key %sdl::keyboard-event)
                (%sdl::edit %sdl::text-editing-event)
                (%sdl::edit-ext %sdl::text-editing-ext-event)
                (%sdl::text %sdl::text-input-event)
                (%sdl::motion %sdl::mouse-motion-event)
                (%sdl::button %sdl::mouse-button-event)
                (%sdl::wheel %sdl::mouse-wheel-event)
                (%sdl::jaxis %sdl::joy-axis-event)
                (%sdl::jball %sdl::joy-ball-event)
                (%sdl::jhat %sdl::joy-hat-event)
                (%sdl::jbutton %sdl::joy-button-event)
                (%sdl::jdevice %sdl::joy-device-event)
                (%sdl::jbattery %sdl::joy-battery-event)
                (%sdl::caxis %sdl::controller-axis-event)
                (%sdl::cbutton %sdl::controller-button-event)
                (%sdl::cdevice %sdl::controller-device-event)
                (%sdl::ctouchpad %sdl::controller-touchpad-event)
                (%sdl::csensor %sdl::controller-sensor-event)
                (%sdl::adevice %sdl::audio-device-event)
                (%sdl::sensor %sdl::sensor-event)
                (%sdl::quit %sdl::quit-event)
                (%sdl::user %sdl::user-event)
                (%sdl::syswm %sdl::sys-wm-event)
                (%sdl::tfinger %sdl::touch-finger-event)
                (%sdl::mgesture %sdl::multi-gesture-event)
                (%sdl::dgesture %sdl::dollar-gesture-event)
                (%sdl::drop %sdl::drop-event)
                (%sdl::padding %sdl::uint8 :count 56))

(cffi:defctype %sdl::event (:union %sdl::event))

(cffi:defctype %sdl::eventaction %sdl::|C:@EA@SDL-EVENTACTION|)

(declaim (inline %sdl::peep-events))

(cffi:defcfun ("SDL_PeepEvents" %sdl::peep-events)
              :int
              (%sdl::events (claw-utils:claw-pointer %sdl::event))
              (%sdl::numevents :int)
              (%sdl::action %sdl::eventaction)
              (%sdl::min-type %sdl::uint32)
              (%sdl::max-type %sdl::uint32))

(declaim (inline %sdl::pixel-format-enum-to-masks))

(cffi:defcfun ("SDL_PixelFormatEnumToMasks"
               %sdl::pixel-format-enum-to-masks)
              %sdl::bool
              (%sdl::format %sdl::uint32)
              (%sdl::bpp (claw-utils:claw-pointer :int))
              (%sdl::rmask (claw-utils:claw-pointer %sdl::uint32))
              (%sdl::gmask (claw-utils:claw-pointer %sdl::uint32))
              (%sdl::bmask (claw-utils:claw-pointer %sdl::uint32))
              (%sdl::amask (claw-utils:claw-pointer %sdl::uint32)))

(declaim (inline %sdl::poll-event))

(cffi:defcfun ("SDL_PollEvent" %sdl::poll-event)
              :int
              (%sdl::event (claw-utils:claw-pointer %sdl::event)))

(declaim (inline %sdl::premultiply-alpha))

(cffi:defcfun ("SDL_PremultiplyAlpha" %sdl::premultiply-alpha)
              :int
              (%sdl::width :int)
              (%sdl::height :int)
              (%sdl::src-format %sdl::uint32)
              (%sdl::src (claw-utils:claw-pointer :void))
              (%sdl::src-pitch :int)
              (%sdl::dst-format %sdl::uint32)
              (%sdl::dst (claw-utils:claw-pointer :void))
              (%sdl::dst-pitch :int))

(declaim (inline %sdl::pump-events))

(cffi:defcfun ("SDL_PumpEvents" %sdl::pump-events) :void)

(declaim (inline %sdl::push-event))

(cffi:defcfun ("SDL_PushEvent" %sdl::push-event)
              :int
              (%sdl::event (claw-utils:claw-pointer %sdl::event)))

(declaim (inline %sdl::query-texture))

(cffi:defcfun ("SDL_QueryTexture" %sdl::query-texture)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::format (claw-utils:claw-pointer %sdl::uint32))
              (%sdl::access (claw-utils:claw-pointer :int))
              (%sdl::w (claw-utils:claw-pointer :int))
              (%sdl::h (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::queue-audio))

(cffi:defcfun ("SDL_QueueAudio" %sdl::queue-audio)
              :int
              (%sdl::dev %sdl::audio-device-id)
              (%sdl::data (claw-utils:claw-pointer :void))
              (%sdl::len %sdl::uint32))

(declaim (inline %sdl::quit))

(cffi:defcfun ("SDL_Quit" %sdl::quit) :void)

(declaim (inline %sdl::quit-sub-system))

(cffi:defcfun ("SDL_QuitSubSystem" %sdl::quit-sub-system)
              :void
              (%sdl::flags %sdl::uint32))

(declaim (inline %sdl::rw-from-const-mem))

(cffi:defcfun ("SDL_RWFromConstMem" %sdl::rw-from-const-mem)
              (claw-utils:claw-pointer %sdl::r-wops)
              (%sdl::mem (claw-utils:claw-pointer :void))
              (%sdl::size :int))

(declaim (inline %sdl::rw-from-fp))

(cffi:defcfun ("SDL_RWFromFP" %sdl::rw-from-fp)
              (claw-utils:claw-pointer %sdl::r-wops)
              (%sdl::fp (claw-utils:claw-pointer :void))
              (%sdl::autoclose %sdl::bool))

(declaim (inline %sdl::rw-from-file))

(cffi:defcfun ("SDL_RWFromFile" %sdl::rw-from-file)
              (claw-utils:claw-pointer %sdl::r-wops)
              (%sdl::file claw-utils:claw-string)
              (%sdl::mode claw-utils:claw-string))

(declaim (inline %sdl::rw-from-mem))

(cffi:defcfun ("SDL_RWFromMem" %sdl::rw-from-mem)
              (claw-utils:claw-pointer %sdl::r-wops)
              (%sdl::mem (claw-utils:claw-pointer :void))
              (%sdl::size :int))

(declaim (inline %sdl::r-wclose))

(cffi:defcfun ("SDL_RWclose" %sdl::r-wclose)
              :int
              (%sdl::context (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::r-wread))

(cffi:defcfun ("SDL_RWread" %sdl::r-wread)
              %sdl::size-t
              (%sdl::context (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::ptr (claw-utils:claw-pointer :void))
              (%sdl::size %sdl::size-t)
              (%sdl::maxnum %sdl::size-t))

(cffi:defctype %sdl::sint64 :long-long)

(declaim (inline %sdl::r-wseek))

(cffi:defcfun ("SDL_RWseek" %sdl::r-wseek)
              %sdl::sint64
              (%sdl::context (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::offset %sdl::sint64)
              (%sdl::whence :int))

(declaim (inline %sdl::r-wsize))

(cffi:defcfun ("SDL_RWsize" %sdl::r-wsize)
              %sdl::sint64
              (%sdl::context (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::r-wtell))

(cffi:defcfun ("SDL_RWtell" %sdl::r-wtell)
              %sdl::sint64
              (%sdl::context (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::r-wwrite))

(cffi:defcfun ("SDL_RWwrite" %sdl::r-wwrite)
              %sdl::size-t
              (%sdl::context (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::ptr (claw-utils:claw-pointer :void))
              (%sdl::size %sdl::size-t)
              (%sdl::num %sdl::size-t))

(declaim (inline %sdl::raise-window))

(cffi:defcfun ("SDL_RaiseWindow" %sdl::raise-window)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::read-be16))

(cffi:defcfun ("SDL_ReadBE16" %sdl::read-be16)
              %sdl::uint16
              (%sdl::src (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::read-be32))

(cffi:defcfun ("SDL_ReadBE32" %sdl::read-be32)
              %sdl::uint32
              (%sdl::src (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::read-be64))

(cffi:defcfun ("SDL_ReadBE64" %sdl::read-be64)
              %sdl::uint64
              (%sdl::src (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::read-le16))

(cffi:defcfun ("SDL_ReadLE16" %sdl::read-le16)
              %sdl::uint16
              (%sdl::src (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::read-le32))

(cffi:defcfun ("SDL_ReadLE32" %sdl::read-le32)
              %sdl::uint32
              (%sdl::src (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::read-le64))

(cffi:defcfun ("SDL_ReadLE64" %sdl::read-le64)
              %sdl::uint64
              (%sdl::src (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::read-u8))

(cffi:defcfun ("SDL_ReadU8" %sdl::read-u8)
              %sdl::uint8
              (%sdl::src (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::record-gesture))

(cffi:defcfun ("SDL_RecordGesture" %sdl::record-gesture)
              :int
              (%sdl::touch-id %sdl::touch-id))

(declaim (inline %sdl::register-app))

(cffi:defcfun ("SDL_RegisterApp" %sdl::register-app)
              :int
              (%sdl::name claw-utils:claw-string)
              (%sdl::style %sdl::uint32)
              (%sdl::h-inst (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::register-events))

(cffi:defcfun ("SDL_RegisterEvents" %sdl::register-events)
              %sdl::uint32
              (%sdl::numevents :int))

(declaim (inline %sdl::remove-timer))

(cffi:defcfun ("SDL_RemoveTimer" %sdl::remove-timer)
              %sdl::bool
              (%sdl::id %sdl::timer-id))

(declaim (inline %sdl::render-clear))

(cffi:defcfun ("SDL_RenderClear" %sdl::render-clear)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(declaim (inline %sdl::render-copy))

(cffi:defcfun ("SDL_RenderCopy" %sdl::render-copy)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::srcrect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::dstrect (claw-utils:claw-pointer %sdl::rect)))

(cffi:defctype %sdl::renderer-flip %sdl::|C:@EA@SDL-RENDERER-FLIP|)

(declaim (inline %sdl::render-copy-ex))

(cffi:defcfun ("SDL_RenderCopyEx" %sdl::render-copy-ex)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::srcrect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::dstrect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::angle :double)
              (%sdl::center (claw-utils:claw-pointer %sdl::point))
              (%sdl::flip %sdl::renderer-flip))

(declaim (inline %sdl::render-copy-ex-f))

(cffi:defcfun ("SDL_RenderCopyExF" %sdl::render-copy-ex-f)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::srcrect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::dstrect (claw-utils:claw-pointer %sdl::f-rect))
              (%sdl::angle :double)
              (%sdl::center (claw-utils:claw-pointer %sdl::f-point))
              (%sdl::flip %sdl::renderer-flip))

(declaim (inline %sdl::render-copy-f))

(cffi:defcfun ("SDL_RenderCopyF" %sdl::render-copy-f)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::srcrect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::dstrect (claw-utils:claw-pointer %sdl::f-rect)))

(declaim (inline %sdl::render-draw-line))

(cffi:defcfun ("SDL_RenderDrawLine" %sdl::render-draw-line)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::x1 :int)
              (%sdl::y1 :int)
              (%sdl::x2 :int)
              (%sdl::y2 :int))

(declaim (inline %sdl::render-draw-line-f))

(cffi:defcfun ("SDL_RenderDrawLineF" %sdl::render-draw-line-f)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::x1 :float)
              (%sdl::y1 :float)
              (%sdl::x2 :float)
              (%sdl::y2 :float))

(declaim (inline %sdl::render-draw-lines))

(cffi:defcfun ("SDL_RenderDrawLines" %sdl::render-draw-lines)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::points (claw-utils:claw-pointer %sdl::point))
              (%sdl::count :int))

(declaim (inline %sdl::render-draw-lines-f))

(cffi:defcfun ("SDL_RenderDrawLinesF" %sdl::render-draw-lines-f)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::points (claw-utils:claw-pointer %sdl::f-point))
              (%sdl::count :int))

(declaim (inline %sdl::render-draw-point))

(cffi:defcfun ("SDL_RenderDrawPoint" %sdl::render-draw-point)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::x :int)
              (%sdl::y :int))

(declaim (inline %sdl::render-draw-point-f))

(cffi:defcfun ("SDL_RenderDrawPointF" %sdl::render-draw-point-f)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::x :float)
              (%sdl::y :float))

(declaim (inline %sdl::render-draw-points))

(cffi:defcfun ("SDL_RenderDrawPoints" %sdl::render-draw-points)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::points (claw-utils:claw-pointer %sdl::point))
              (%sdl::count :int))

(declaim (inline %sdl::render-draw-points-f))

(cffi:defcfun ("SDL_RenderDrawPointsF" %sdl::render-draw-points-f)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::points (claw-utils:claw-pointer %sdl::f-point))
              (%sdl::count :int))

(declaim (inline %sdl::render-draw-rect))

(cffi:defcfun ("SDL_RenderDrawRect" %sdl::render-draw-rect)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::render-draw-rect-f))

(cffi:defcfun ("SDL_RenderDrawRectF" %sdl::render-draw-rect-f)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rect (claw-utils:claw-pointer %sdl::f-rect)))

(declaim (inline %sdl::render-draw-rects))

(cffi:defcfun ("SDL_RenderDrawRects" %sdl::render-draw-rects)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rects (claw-utils:claw-pointer %sdl::rect))
              (%sdl::count :int))

(declaim (inline %sdl::render-draw-rects-f))

(cffi:defcfun ("SDL_RenderDrawRectsF" %sdl::render-draw-rects-f)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rects (claw-utils:claw-pointer %sdl::f-rect))
              (%sdl::count :int))

(declaim (inline %sdl::render-fill-rect))

(cffi:defcfun ("SDL_RenderFillRect" %sdl::render-fill-rect)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::render-fill-rect-f))

(cffi:defcfun ("SDL_RenderFillRectF" %sdl::render-fill-rect-f)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rect (claw-utils:claw-pointer %sdl::f-rect)))

(declaim (inline %sdl::render-fill-rects))

(cffi:defcfun ("SDL_RenderFillRects" %sdl::render-fill-rects)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rects (claw-utils:claw-pointer %sdl::rect))
              (%sdl::count :int))

(declaim (inline %sdl::render-fill-rects-f))

(cffi:defcfun ("SDL_RenderFillRectsF" %sdl::render-fill-rects-f)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rects (claw-utils:claw-pointer %sdl::f-rect))
              (%sdl::count :int))

(declaim (inline %sdl::render-flush))

(cffi:defcfun ("SDL_RenderFlush" %sdl::render-flush)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(cffi:defcstruct (%sdl::vertex :size 20)
                 (%sdl::position %sdl::f-point :offset 0)
                 (%sdl::color %sdl::color :offset 8)
                 (%sdl::tex-coord %sdl::f-point :offset 12))

(cffi:defctype %sdl::vertex (:struct %sdl::vertex))

(declaim (inline %sdl::render-geometry))

(cffi:defcfun ("SDL_RenderGeometry" %sdl::render-geometry)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::vertices (claw-utils:claw-pointer %sdl::vertex))
              (%sdl::num-vertices :int)
              (%sdl::indices (claw-utils:claw-pointer :int))
              (%sdl::num-indices :int))

(declaim (inline %sdl::render-geometry-raw))

(cffi:defcfun ("SDL_RenderGeometryRaw" %sdl::render-geometry-raw)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::xy (claw-utils:claw-pointer :float))
              (%sdl::xy-stride :int)
              (%sdl::color (claw-utils:claw-pointer %sdl::color))
              (%sdl::color-stride :int)
              (%sdl::uv (claw-utils:claw-pointer :float))
              (%sdl::uv-stride :int)
              (%sdl::num-vertices :int)
              (%sdl::indices (claw-utils:claw-pointer :void))
              (%sdl::num-indices :int)
              (%sdl::size-indices :int))

(declaim (inline %sdl::render-get-clip-rect))

(cffi:defcfun ("SDL_RenderGetClipRect" %sdl::render-get-clip-rect)
              :void
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(cffi:defcstruct (%sdl::id3d11device :size 0))

(cffi:defctype %sdl::id3d11device (:struct %sdl::id3d11device))

(declaim (inline %sdl::render-get-d3d11device))

(cffi:defcfun ("SDL_RenderGetD3D11Device"
               %sdl::render-get-d3d11device)
              (claw-utils:claw-pointer %sdl::id3d11device)
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(cffi:defcstruct (%sdl::id3d12device :size 0))

(cffi:defctype %sdl::id3d12device (:struct %sdl::id3d12device))

(declaim (inline %sdl::render-get-d3d12device))

(cffi:defcfun ("SDL_RenderGetD3D12Device"
               %sdl::render-get-d3d12device)
              (claw-utils:claw-pointer %sdl::id3d12device)
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(cffi:defcstruct (%sdl::i-direct3d-device9 :size 0))

(cffi:defctype %sdl::i-direct3d-device9
               (:struct %sdl::i-direct3d-device9))

(declaim (inline %sdl::render-get-d3d9device))

(cffi:defcfun ("SDL_RenderGetD3D9Device" %sdl::render-get-d3d9device)
              (claw-utils:claw-pointer %sdl::i-direct3d-device9)
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(declaim (inline %sdl::render-get-integer-scale))

(cffi:defcfun ("SDL_RenderGetIntegerScale"
               %sdl::render-get-integer-scale)
              %sdl::bool
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(declaim (inline %sdl::render-get-logical-size))

(cffi:defcfun ("SDL_RenderGetLogicalSize"
               %sdl::render-get-logical-size)
              :void
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::w (claw-utils:claw-pointer :int))
              (%sdl::h (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::render-get-metal-command-encoder))

(cffi:defcfun ("SDL_RenderGetMetalCommandEncoder"
               %sdl::render-get-metal-command-encoder)
              (claw-utils:claw-pointer :void)
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(declaim (inline %sdl::render-get-metal-layer))

(cffi:defcfun ("SDL_RenderGetMetalLayer"
               %sdl::render-get-metal-layer)
              (claw-utils:claw-pointer :void)
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(declaim (inline %sdl::render-get-scale))

(cffi:defcfun ("SDL_RenderGetScale" %sdl::render-get-scale)
              :void
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::scale-x (claw-utils:claw-pointer :float))
              (%sdl::scale-y (claw-utils:claw-pointer :float)))

(declaim (inline %sdl::render-get-viewport))

(cffi:defcfun ("SDL_RenderGetViewport" %sdl::render-get-viewport)
              :void
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::render-get-window))

(cffi:defcfun ("SDL_RenderGetWindow" %sdl::render-get-window)
              (claw-utils:claw-pointer %sdl::window)
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(declaim (inline %sdl::render-is-clip-enabled))

(cffi:defcfun ("SDL_RenderIsClipEnabled"
               %sdl::render-is-clip-enabled)
              %sdl::bool
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(declaim (inline %sdl::render-logical-to-window))

(cffi:defcfun ("SDL_RenderLogicalToWindow"
               %sdl::render-logical-to-window)
              :void
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::logical-x :float)
              (%sdl::logical-y :float)
              (%sdl::window-x (claw-utils:claw-pointer :int))
              (%sdl::window-y (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::render-present))

(cffi:defcfun ("SDL_RenderPresent" %sdl::render-present)
              :void
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(declaim (inline %sdl::render-read-pixels))

(cffi:defcfun ("SDL_RenderReadPixels" %sdl::render-read-pixels)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::format %sdl::uint32)
              (%sdl::pixels (claw-utils:claw-pointer :void))
              (%sdl::pitch :int))

(declaim (inline %sdl::render-set-clip-rect))

(cffi:defcfun ("SDL_RenderSetClipRect" %sdl::render-set-clip-rect)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::render-set-integer-scale))

(cffi:defcfun ("SDL_RenderSetIntegerScale"
               %sdl::render-set-integer-scale)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::enable %sdl::bool))

(declaim (inline %sdl::render-set-logical-size))

(cffi:defcfun ("SDL_RenderSetLogicalSize"
               %sdl::render-set-logical-size)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::w :int)
              (%sdl::h :int))

(declaim (inline %sdl::render-set-scale))

(cffi:defcfun ("SDL_RenderSetScale" %sdl::render-set-scale)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::scale-x :float)
              (%sdl::scale-y :float))

(declaim (inline %sdl::render-set-v-sync))

(cffi:defcfun ("SDL_RenderSetVSync" %sdl::render-set-v-sync)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::vsync :int))

(declaim (inline %sdl::render-set-viewport))

(cffi:defcfun ("SDL_RenderSetViewport" %sdl::render-set-viewport)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::render-target-supported))

(cffi:defcfun ("SDL_RenderTargetSupported"
               %sdl::render-target-supported)
              %sdl::bool
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer)))

(declaim (inline %sdl::render-window-to-logical))

(cffi:defcfun ("SDL_RenderWindowToLogical"
               %sdl::render-window-to-logical)
              :void
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::window-x :int)
              (%sdl::window-y :int)
              (%sdl::logical-x (claw-utils:claw-pointer :float))
              (%sdl::logical-y (claw-utils:claw-pointer :float)))

(cffi:defctype %sdl::assert-state %sdl::|C:@EA@SDL-ASSERT-STATE|)

(declaim (inline %sdl::report-assertion))

(cffi:defcfun ("SDL_ReportAssertion" %sdl::report-assertion)
              %sdl::assert-state
              (%sdl::arg0
               (claw-utils:claw-pointer %sdl::assert-data))
              (%sdl::arg1 claw-utils:claw-string)
              (%sdl::arg2 claw-utils:claw-string)
              (%sdl::arg3 :int))

(declaim (inline %sdl::reset-assertion-report))

(cffi:defcfun ("SDL_ResetAssertionReport"
               %sdl::reset-assertion-report)
              :void)

(declaim (inline %sdl::reset-hint))

(cffi:defcfun ("SDL_ResetHint" %sdl::reset-hint)
              %sdl::bool
              (%sdl::name claw-utils:claw-string))

(declaim (inline %sdl::reset-keyboard))

(cffi:defcfun ("SDL_ResetKeyboard" %sdl::reset-keyboard) :void)

(declaim (inline %sdl::restore-window))

(cffi:defcfun ("SDL_RestoreWindow" %sdl::restore-window)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::simd-alloc))

(cffi:defcfun ("SDL_SIMDAlloc" %sdl::simd-alloc)
              (claw-utils:claw-pointer :void)
              (%sdl::len %sdl::size-t))

(declaim (inline %sdl::simd-free))

(cffi:defcfun ("SDL_SIMDFree" %sdl::simd-free)
              :void
              (%sdl::ptr (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::simd-get-alignment))

(cffi:defcfun ("SDL_SIMDGetAlignment" %sdl::simd-get-alignment)
              %sdl::size-t)

(declaim (inline %sdl::simd-realloc))

(cffi:defcfun ("SDL_SIMDRealloc" %sdl::simd-realloc)
              (claw-utils:claw-pointer :void)
              (%sdl::mem (claw-utils:claw-pointer :void))
              (%sdl::len %sdl::size-t))

(declaim (inline %sdl::save-all-dollar-templates))

(cffi:defcfun ("SDL_SaveAllDollarTemplates"
               %sdl::save-all-dollar-templates)
              :int
              (%sdl::dst (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::save-bmp-rw))

(cffi:defcfun ("SDL_SaveBMP_RW" %sdl::save-bmp-rw)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::dst (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::freedst :int))

(declaim (inline %sdl::save-dollar-template))

(cffi:defcfun ("SDL_SaveDollarTemplate" %sdl::save-dollar-template)
              :int
              (%sdl::gesture-id %sdl::gesture-id)
              (%sdl::dst (claw-utils:claw-pointer %sdl::r-wops)))

(declaim (inline %sdl::sem-post))

(cffi:defcfun ("SDL_SemPost" %sdl::sem-post)
              :int
              (%sdl::sem (claw-utils:claw-pointer %sdl::sem)))

(declaim (inline %sdl::sem-try-wait))

(cffi:defcfun ("SDL_SemTryWait" %sdl::sem-try-wait)
              :int
              (%sdl::sem (claw-utils:claw-pointer %sdl::sem)))

(declaim (inline %sdl::sem-value))

(cffi:defcfun ("SDL_SemValue" %sdl::sem-value)
              %sdl::uint32
              (%sdl::sem (claw-utils:claw-pointer %sdl::sem)))

(declaim (inline %sdl::sem-wait))

(cffi:defcfun ("SDL_SemWait" %sdl::sem-wait)
              :int
              (%sdl::sem (claw-utils:claw-pointer %sdl::sem)))

(declaim (inline %sdl::sem-wait-timeout))

(cffi:defcfun ("SDL_SemWaitTimeout" %sdl::sem-wait-timeout)
              :int
              (%sdl::sem (claw-utils:claw-pointer %sdl::sem))
              (%sdl::ms %sdl::uint32))

(cffi:defcstruct (%sdl::%sdl-sensor :size 0))

(cffi:defctype %sdl::sensor (:struct %sdl::%sdl-sensor))

(declaim (inline %sdl::sensor-close))

(cffi:defcfun ("SDL_SensorClose" %sdl::sensor-close)
              :void
              (%sdl::sensor (claw-utils:claw-pointer %sdl::sensor)))

(cffi:defctype %sdl::sensor-id :int)

(declaim (inline %sdl::sensor-from-instance-id))

(cffi:defcfun ("SDL_SensorFromInstanceID"
               %sdl::sensor-from-instance-id)
              (claw-utils:claw-pointer %sdl::sensor)
              (%sdl::instance-id %sdl::sensor-id))

(declaim (inline %sdl::sensor-get-data))

(cffi:defcfun ("SDL_SensorGetData" %sdl::sensor-get-data)
              :int
              (%sdl::sensor (claw-utils:claw-pointer %sdl::sensor))
              (%sdl::data (claw-utils:claw-pointer :float))
              (%sdl::num-values :int))

(declaim (inline %sdl::sensor-get-device-instance-id))

(cffi:defcfun ("SDL_SensorGetDeviceInstanceID"
               %sdl::sensor-get-device-instance-id)
              %sdl::sensor-id
              (%sdl::device-index :int))

(declaim (inline %sdl::sensor-get-device-name))

(cffi:defcfun ("SDL_SensorGetDeviceName"
               %sdl::sensor-get-device-name)
              claw-utils:claw-string
              (%sdl::device-index :int))

(declaim (inline %sdl::sensor-get-device-non-portable-type))

(cffi:defcfun ("SDL_SensorGetDeviceNonPortableType"
               %sdl::sensor-get-device-non-portable-type)
              :int
              (%sdl::device-index :int))

(declaim (inline %sdl::sensor-get-device-type))

(cffi:defcfun ("SDL_SensorGetDeviceType"
               %sdl::sensor-get-device-type)
              %sdl::sensor-type
              (%sdl::device-index :int))

(declaim (inline %sdl::sensor-get-instance-id))

(cffi:defcfun ("SDL_SensorGetInstanceID"
               %sdl::sensor-get-instance-id)
              %sdl::sensor-id
              (%sdl::sensor (claw-utils:claw-pointer %sdl::sensor)))

(declaim (inline %sdl::sensor-get-name))

(cffi:defcfun ("SDL_SensorGetName" %sdl::sensor-get-name)
              claw-utils:claw-string
              (%sdl::sensor (claw-utils:claw-pointer %sdl::sensor)))

(declaim (inline %sdl::sensor-get-non-portable-type))

(cffi:defcfun ("SDL_SensorGetNonPortableType"
               %sdl::sensor-get-non-portable-type)
              :int
              (%sdl::sensor (claw-utils:claw-pointer %sdl::sensor)))

(declaim (inline %sdl::sensor-get-type))

(cffi:defcfun ("SDL_SensorGetType" %sdl::sensor-get-type)
              %sdl::sensor-type
              (%sdl::sensor (claw-utils:claw-pointer %sdl::sensor)))

(declaim (inline %sdl::sensor-open))

(cffi:defcfun ("SDL_SensorOpen" %sdl::sensor-open)
              (claw-utils:claw-pointer %sdl::sensor)
              (%sdl::device-index :int))

(declaim (inline %sdl::sensor-update))

(cffi:defcfun ("SDL_SensorUpdate" %sdl::sensor-update) :void)

(declaim (inline %sdl::set-assertion-handler))

(cffi:defcfun ("SDL_SetAssertionHandler" %sdl::set-assertion-handler)
              :void
              (%sdl::handler %sdl::assertion-handler)
              (%sdl::userdata (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::set-clip-rect))

(cffi:defcfun ("SDL_SetClipRect" %sdl::set-clip-rect)
              %sdl::bool
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::set-clipboard-text))

(cffi:defcfun ("SDL_SetClipboardText" %sdl::set-clipboard-text)
              :int
              (%sdl::text claw-utils:claw-string))

(declaim (inline %sdl::set-color-key))

(cffi:defcfun ("SDL_SetColorKey" %sdl::set-color-key)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::flag :int)
              (%sdl::key %sdl::uint32))

(declaim (inline %sdl::set-cursor))

(cffi:defcfun ("SDL_SetCursor" %sdl::set-cursor)
              :void
              (%sdl::cursor (claw-utils:claw-pointer %sdl::cursor)))

(declaim (inline %sdl::set-error))

(cffi:defcfun ("SDL_SetError" %sdl::set-error)
              :int
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(declaim (inline %sdl::set-event-filter))

(cffi:defcfun ("SDL_SetEventFilter" %sdl::set-event-filter)
              :void
              (%sdl::filter %sdl::event-filter)
              (%sdl::userdata (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::set-hint))

(cffi:defcfun ("SDL_SetHint" %sdl::set-hint)
              %sdl::bool
              (%sdl::name claw-utils:claw-string)
              (%sdl::value claw-utils:claw-string))

(cffi:defctype %sdl::hint-priority %sdl::|C:@EA@SDL-HINT-PRIORITY|)

(declaim (inline %sdl::set-hint-with-priority))

(cffi:defcfun ("SDL_SetHintWithPriority"
               %sdl::set-hint-with-priority)
              %sdl::bool
              (%sdl::name claw-utils:claw-string)
              (%sdl::value claw-utils:claw-string)
              (%sdl::priority %sdl::hint-priority))

(declaim (inline %sdl::set-main-ready))

(cffi:defcfun ("SDL_SetMainReady" %sdl::set-main-ready) :void)

(declaim (inline %sdl::set-memory-functions))

(cffi:defcfun ("SDL_SetMemoryFunctions" %sdl::set-memory-functions)
              :int
              (%sdl::malloc-func %sdl::malloc-func)
              (%sdl::calloc-func %sdl::calloc-func)
              (%sdl::realloc-func %sdl::realloc-func)
              (%sdl::free-func %sdl::free-func))

(declaim (inline %sdl::set-mod-state))

(cffi:defcfun ("SDL_SetModState" %sdl::set-mod-state)
              :void
              (%sdl::modstate %sdl::keymod))

(declaim (inline %sdl::set-palette-colors))

(cffi:defcfun ("SDL_SetPaletteColors" %sdl::set-palette-colors)
              :int
              (%sdl::palette (claw-utils:claw-pointer %sdl::palette))
              (%sdl::colors (claw-utils:claw-pointer %sdl::color))
              (%sdl::firstcolor :int)
              (%sdl::ncolors :int))

(declaim (inline %sdl::set-pixel-format-palette))

(cffi:defcfun ("SDL_SetPixelFormatPalette"
               %sdl::set-pixel-format-palette)
              :int
              (%sdl::format
               (claw-utils:claw-pointer %sdl::pixel-format))
              (%sdl::palette (claw-utils:claw-pointer %sdl::palette)))

(declaim (inline %sdl::set-relative-mouse-mode))

(cffi:defcfun ("SDL_SetRelativeMouseMode"
               %sdl::set-relative-mouse-mode)
              :int
              (%sdl::enabled %sdl::bool))

(declaim (inline %sdl::set-render-draw-blend-mode))

(cffi:defcfun ("SDL_SetRenderDrawBlendMode"
               %sdl::set-render-draw-blend-mode)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::blend-mode %sdl::blend-mode))

(declaim (inline %sdl::set-render-draw-color))

(cffi:defcfun ("SDL_SetRenderDrawColor" %sdl::set-render-draw-color)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::r %sdl::uint8)
              (%sdl::g %sdl::uint8)
              (%sdl::b %sdl::uint8)
              (%sdl::a %sdl::uint8))

(declaim (inline %sdl::set-render-target))

(cffi:defcfun ("SDL_SetRenderTarget" %sdl::set-render-target)
              :int
              (%sdl::renderer
               (claw-utils:claw-pointer %sdl::renderer))
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture)))

(declaim (inline %sdl::set-surface-alpha-mod))

(cffi:defcfun ("SDL_SetSurfaceAlphaMod" %sdl::set-surface-alpha-mod)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::alpha %sdl::uint8))

(declaim (inline %sdl::set-surface-blend-mode))

(cffi:defcfun ("SDL_SetSurfaceBlendMode"
               %sdl::set-surface-blend-mode)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::blend-mode %sdl::blend-mode))

(declaim (inline %sdl::set-surface-color-mod))

(cffi:defcfun ("SDL_SetSurfaceColorMod" %sdl::set-surface-color-mod)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::r %sdl::uint8)
              (%sdl::g %sdl::uint8)
              (%sdl::b %sdl::uint8))

(declaim (inline %sdl::set-surface-palette))

(cffi:defcfun ("SDL_SetSurfacePalette" %sdl::set-surface-palette)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::palette (claw-utils:claw-pointer %sdl::palette)))

(declaim (inline %sdl::set-surface-rle))

(cffi:defcfun ("SDL_SetSurfaceRLE" %sdl::set-surface-rle)
              :int
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface))
              (%sdl::flag :int))

(declaim (inline %sdl::set-text-input-rect))

(cffi:defcfun ("SDL_SetTextInputRect" %sdl::set-text-input-rect)
              :void
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::set-texture-alpha-mod))

(cffi:defcfun ("SDL_SetTextureAlphaMod" %sdl::set-texture-alpha-mod)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::alpha %sdl::uint8))

(declaim (inline %sdl::set-texture-blend-mode))

(cffi:defcfun ("SDL_SetTextureBlendMode"
               %sdl::set-texture-blend-mode)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::blend-mode %sdl::blend-mode))

(declaim (inline %sdl::set-texture-color-mod))

(cffi:defcfun ("SDL_SetTextureColorMod" %sdl::set-texture-color-mod)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::r %sdl::uint8)
              (%sdl::g %sdl::uint8)
              (%sdl::b %sdl::uint8))

(declaim (inline %sdl::set-texture-scale-mode))

(cffi:defcfun ("SDL_SetTextureScaleMode"
               %sdl::set-texture-scale-mode)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::scale-mode %sdl::scale-mode))

(declaim (inline %sdl::set-texture-user-data))

(cffi:defcfun ("SDL_SetTextureUserData" %sdl::set-texture-user-data)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::userdata (claw-utils:claw-pointer :void)))

(cffi:defctype %sdl::thread-priority
               %sdl::|C:@EA@SDL-THREAD-PRIORITY|)

(declaim (inline %sdl::set-thread-priority))

(cffi:defcfun ("SDL_SetThreadPriority" %sdl::set-thread-priority)
              :int
              (%sdl::priority %sdl::thread-priority))

(declaim (inline %sdl::set-window-always-on-top))

(cffi:defcfun ("SDL_SetWindowAlwaysOnTop"
               %sdl::set-window-always-on-top)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::on-top %sdl::bool))

(declaim (inline %sdl::set-window-bordered))

(cffi:defcfun ("SDL_SetWindowBordered" %sdl::set-window-bordered)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::bordered %sdl::bool))

(declaim (inline %sdl::set-window-brightness))

(cffi:defcfun ("SDL_SetWindowBrightness" %sdl::set-window-brightness)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::brightness :float))

(declaim (inline %sdl::set-window-data))

(cffi:defcfun ("SDL_SetWindowData" %sdl::set-window-data)
              (claw-utils:claw-pointer :void)
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::name claw-utils:claw-string)
              (%sdl::userdata (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::set-window-display-mode))

(cffi:defcfun ("SDL_SetWindowDisplayMode"
               %sdl::set-window-display-mode)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::mode
               (claw-utils:claw-pointer %sdl::display-mode)))

(declaim (inline %sdl::set-window-fullscreen))

(cffi:defcfun ("SDL_SetWindowFullscreen" %sdl::set-window-fullscreen)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::flags %sdl::uint32))

(declaim (inline %sdl::set-window-gamma-ramp))

(cffi:defcfun ("SDL_SetWindowGammaRamp" %sdl::set-window-gamma-ramp)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::red (claw-utils:claw-pointer %sdl::uint16))
              (%sdl::green (claw-utils:claw-pointer %sdl::uint16))
              (%sdl::blue (claw-utils:claw-pointer %sdl::uint16)))

(declaim (inline %sdl::set-window-grab))

(cffi:defcfun ("SDL_SetWindowGrab" %sdl::set-window-grab)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::grabbed %sdl::bool))

(cffi:defctype %sdl::hit-test (claw-utils:claw-pointer :void))

(declaim (inline %sdl::set-window-hit-test))

(cffi:defcfun ("SDL_SetWindowHitTest" %sdl::set-window-hit-test)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::callback %sdl::hit-test)
              (%sdl::callback-data (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::set-window-icon))

(cffi:defcfun ("SDL_SetWindowIcon" %sdl::set-window-icon)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::icon (claw-utils:claw-pointer %sdl::surface)))

(declaim (inline %sdl::set-window-input-focus))

(cffi:defcfun ("SDL_SetWindowInputFocus"
               %sdl::set-window-input-focus)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::set-window-keyboard-grab))

(cffi:defcfun ("SDL_SetWindowKeyboardGrab"
               %sdl::set-window-keyboard-grab)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::grabbed %sdl::bool))

(declaim (inline %sdl::set-window-maximum-size))

(cffi:defcfun ("SDL_SetWindowMaximumSize"
               %sdl::set-window-maximum-size)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::max-w :int)
              (%sdl::max-h :int))

(declaim (inline %sdl::set-window-minimum-size))

(cffi:defcfun ("SDL_SetWindowMinimumSize"
               %sdl::set-window-minimum-size)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::min-w :int)
              (%sdl::min-h :int))

(declaim (inline %sdl::set-window-modal-for))

(cffi:defcfun ("SDL_SetWindowModalFor" %sdl::set-window-modal-for)
              :int
              (%sdl::modal-window
               (claw-utils:claw-pointer %sdl::window))
              (%sdl::parent-window
               (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::set-window-mouse-grab))

(cffi:defcfun ("SDL_SetWindowMouseGrab" %sdl::set-window-mouse-grab)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::grabbed %sdl::bool))

(declaim (inline %sdl::set-window-mouse-rect))

(cffi:defcfun ("SDL_SetWindowMouseRect" %sdl::set-window-mouse-rect)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::set-window-opacity))

(cffi:defcfun ("SDL_SetWindowOpacity" %sdl::set-window-opacity)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::opacity :float))

(declaim (inline %sdl::set-window-position))

(cffi:defcfun ("SDL_SetWindowPosition" %sdl::set-window-position)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::x :int)
              (%sdl::y :int))

(declaim (inline %sdl::set-window-resizable))

(cffi:defcfun ("SDL_SetWindowResizable" %sdl::set-window-resizable)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::resizable %sdl::bool))

(declaim (inline %sdl::set-window-shape))

(cffi:defcfun ("SDL_SetWindowShape" %sdl::set-window-shape)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::shape (claw-utils:claw-pointer %sdl::surface))
              (%sdl::shape-mode
               (claw-utils:claw-pointer %sdl::window-shape-mode)))

(declaim (inline %sdl::set-window-size))

(cffi:defcfun ("SDL_SetWindowSize" %sdl::set-window-size)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::w :int)
              (%sdl::h :int))

(declaim (inline %sdl::set-window-title))

(cffi:defcfun ("SDL_SetWindowTitle" %sdl::set-window-title)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::title claw-utils:claw-string))

(cffi:defctype %sdl::windows-message-hook
               (claw-utils:claw-pointer :void))

(declaim (inline %sdl::set-windows-message-hook))

(cffi:defcfun ("SDL_SetWindowsMessageHook"
               %sdl::set-windows-message-hook)
              :void
              (%sdl::callback %sdl::windows-message-hook)
              (%sdl::userdata (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::set-yuv-conversion-mode))

(cffi:defcfun ("SDL_SetYUVConversionMode"
               %sdl::set-yuv-conversion-mode)
              :void
              (%sdl::mode %sdl::yuv-conversion-mode))

(declaim (inline %sdl::show-cursor))

(cffi:defcfun ("SDL_ShowCursor" %sdl::show-cursor)
              :int
              (%sdl::toggle :int))

(cffi:defcstruct (%sdl::|C:@SA@SDL-MESSAGE-BOX-BUTTON-DATA| :size 16)
                 (%sdl::flags %sdl::uint32 :offset 0)
                 (%sdl::buttonid :int :offset 4)
                 (%sdl::text claw-utils:claw-string :offset 8))

(cffi:defctype %sdl::message-box-button-data
               (:struct %sdl::|C:@SA@SDL-MESSAGE-BOX-BUTTON-DATA|))

(cffi:defcstruct (%sdl::|C:@SA@SDL-MESSAGE-BOX-COLOR| :size 3)
                 (%sdl::r %sdl::uint8 :offset 0)
                 (%sdl::g %sdl::uint8 :offset 1)
                 (%sdl::b %sdl::uint8 :offset 2))

(cffi:defctype %sdl::message-box-color
               (:struct %sdl::|C:@SA@SDL-MESSAGE-BOX-COLOR|))

(cffi:defcstruct (%sdl::|C:@SA@SDL-MESSAGE-BOX-COLOR-SCHEME| :size
                  15)
                 (%sdl::colors %sdl::message-box-color :count 5
                  :offset 0))

(cffi:defctype %sdl::message-box-color-scheme
               (:struct %sdl::|C:@SA@SDL-MESSAGE-BOX-COLOR-SCHEME|))

(cffi:defcstruct (%sdl::|C:@SA@SDL-MESSAGE-BOX-DATA| :size 56)
                 (%sdl::flags %sdl::uint32 :offset 0)
                 (%sdl::window (claw-utils:claw-pointer %sdl::window)
                  :offset 8)
                 (%sdl::title claw-utils:claw-string :offset 16)
                 (%sdl::message claw-utils:claw-string :offset 24)
                 (%sdl::numbuttons :int :offset 32)
                 (%sdl::buttons
                  (claw-utils:claw-pointer
                   %sdl::message-box-button-data)
                  :offset 40)
                 (%sdl::color-scheme
                  (claw-utils:claw-pointer
                   %sdl::message-box-color-scheme)
                  :offset 48))

(cffi:defctype %sdl::message-box-data
               (:struct %sdl::|C:@SA@SDL-MESSAGE-BOX-DATA|))

(declaim (inline %sdl::show-message-box))

(cffi:defcfun ("SDL_ShowMessageBox" %sdl::show-message-box)
              :int
              (%sdl::messageboxdata
               (claw-utils:claw-pointer %sdl::message-box-data))
              (%sdl::buttonid (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::show-simple-message-box))

(cffi:defcfun ("SDL_ShowSimpleMessageBox"
               %sdl::show-simple-message-box)
              :int
              (%sdl::flags %sdl::uint32)
              (%sdl::title claw-utils:claw-string)
              (%sdl::message claw-utils:claw-string)
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::show-window))

(cffi:defcfun ("SDL_ShowWindow" %sdl::show-window)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::soft-stretch))

(cffi:defcfun ("SDL_SoftStretch" %sdl::soft-stretch)
              :int
              (%sdl::src (claw-utils:claw-pointer %sdl::surface))
              (%sdl::srcrect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::dst (claw-utils:claw-pointer %sdl::surface))
              (%sdl::dstrect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::soft-stretch-linear))

(cffi:defcfun ("SDL_SoftStretchLinear" %sdl::soft-stretch-linear)
              :int
              (%sdl::src (claw-utils:claw-pointer %sdl::surface))
              (%sdl::srcrect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::dst (claw-utils:claw-pointer %sdl::surface))
              (%sdl::dstrect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::start-text-input))

(cffi:defcfun ("SDL_StartTextInput" %sdl::start-text-input) :void)

(declaim (inline %sdl::stop-text-input))

(cffi:defcfun ("SDL_StopTextInput" %sdl::stop-text-input) :void)

(declaim (inline %sdl::tls-cleanup))

(cffi:defcfun ("SDL_TLSCleanup" %sdl::tls-cleanup) :void)

(cffi:defctype %sdl::tlsid :unsigned-int)

(declaim (inline %sdl::tls-create))

(cffi:defcfun ("SDL_TLSCreate" %sdl::tls-create) %sdl::tlsid)

(declaim (inline %sdl::tls-get))

(cffi:defcfun ("SDL_TLSGet" %sdl::tls-get)
              (claw-utils:claw-pointer :void)
              (%sdl::id %sdl::tlsid))

(declaim (inline %sdl::tls-set))

(cffi:defcfun ("SDL_TLSSet" %sdl::tls-set)
              :int
              (%sdl::id %sdl::tlsid)
              (%sdl::value (claw-utils:claw-pointer :void))
              (%sdl::destructor (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::thread-id))

(cffi:defcfun ("SDL_ThreadID" %sdl::thread-id) %sdl::thread-id)

(declaim (inline %sdl::try-lock-mutex))

(cffi:defcfun ("SDL_TryLockMutex" %sdl::try-lock-mutex)
              :int
              (%sdl::mutex (claw-utils:claw-pointer %sdl::mutex)))

(declaim (inline %sdl::union-f-rect))

(cffi:defcfun ("SDL_UnionFRect" %sdl::union-f-rect)
              :void
              (%sdl::a (claw-utils:claw-pointer %sdl::f-rect))
              (%sdl::b (claw-utils:claw-pointer %sdl::f-rect))
              (%sdl::result (claw-utils:claw-pointer %sdl::f-rect)))

(declaim (inline %sdl::union-rect))

(cffi:defcfun ("SDL_UnionRect" %sdl::union-rect)
              :void
              (%sdl::a (claw-utils:claw-pointer %sdl::rect))
              (%sdl::b (claw-utils:claw-pointer %sdl::rect))
              (%sdl::result (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::unload-object))

(cffi:defcfun ("SDL_UnloadObject" %sdl::unload-object)
              :void
              (%sdl::handle (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::unlock-audio))

(cffi:defcfun ("SDL_UnlockAudio" %sdl::unlock-audio) :void)

(declaim (inline %sdl::unlock-audio-device))

(cffi:defcfun ("SDL_UnlockAudioDevice" %sdl::unlock-audio-device)
              :void
              (%sdl::dev %sdl::audio-device-id))

(declaim (inline %sdl::unlock-joysticks))

(cffi:defcfun ("SDL_UnlockJoysticks" %sdl::unlock-joysticks) :void)

(declaim (inline %sdl::unlock-mutex))

(cffi:defcfun ("SDL_UnlockMutex" %sdl::unlock-mutex)
              :int
              (%sdl::mutex (claw-utils:claw-pointer %sdl::mutex)))

(declaim (inline %sdl::unlock-sensors))

(cffi:defcfun ("SDL_UnlockSensors" %sdl::unlock-sensors) :void)

(declaim (inline %sdl::unlock-surface))

(cffi:defcfun ("SDL_UnlockSurface" %sdl::unlock-surface)
              :void
              (%sdl::surface (claw-utils:claw-pointer %sdl::surface)))

(declaim (inline %sdl::unlock-texture))

(cffi:defcfun ("SDL_UnlockTexture" %sdl::unlock-texture)
              :void
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture)))

(declaim (inline %sdl::unregister-app))

(cffi:defcfun ("SDL_UnregisterApp" %sdl::unregister-app) :void)

(declaim (inline %sdl::update-nv-texture))

(cffi:defcfun ("SDL_UpdateNVTexture" %sdl::update-nv-texture)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::yplane (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::ypitch :int)
              (%sdl::u-vplane (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::u-vpitch :int))

(declaim (inline %sdl::update-texture))

(cffi:defcfun ("SDL_UpdateTexture" %sdl::update-texture)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::pixels (claw-utils:claw-pointer :void))
              (%sdl::pitch :int))

(declaim (inline %sdl::update-window-surface))

(cffi:defcfun ("SDL_UpdateWindowSurface" %sdl::update-window-surface)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window)))

(declaim (inline %sdl::update-window-surface-rects))

(cffi:defcfun ("SDL_UpdateWindowSurfaceRects"
               %sdl::update-window-surface-rects)
              :int
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::rects (claw-utils:claw-pointer %sdl::rect))
              (%sdl::numrects :int))

(declaim (inline %sdl::update-yuv-texture))

(cffi:defcfun ("SDL_UpdateYUVTexture" %sdl::update-yuv-texture)
              :int
              (%sdl::texture (claw-utils:claw-pointer %sdl::texture))
              (%sdl::rect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::yplane (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::ypitch :int)
              (%sdl::uplane (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::upitch :int)
              (%sdl::vplane (claw-utils:claw-pointer %sdl::uint8))
              (%sdl::vpitch :int))

(declaim (inline %sdl::upper-blit))

(cffi:defcfun ("SDL_UpperBlit" %sdl::upper-blit)
              :int
              (%sdl::src (claw-utils:claw-pointer %sdl::surface))
              (%sdl::srcrect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::dst (claw-utils:claw-pointer %sdl::surface))
              (%sdl::dstrect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::upper-blit-scaled))

(cffi:defcfun ("SDL_UpperBlitScaled" %sdl::upper-blit-scaled)
              :int
              (%sdl::src (claw-utils:claw-pointer %sdl::surface))
              (%sdl::srcrect (claw-utils:claw-pointer %sdl::rect))
              (%sdl::dst (claw-utils:claw-pointer %sdl::surface))
              (%sdl::dstrect (claw-utils:claw-pointer %sdl::rect)))

(declaim (inline %sdl::video-init))

(cffi:defcfun ("SDL_VideoInit" %sdl::video-init)
              :int
              (%sdl::driver-name claw-utils:claw-string))

(declaim (inline %sdl::video-quit))

(cffi:defcfun ("SDL_VideoQuit" %sdl::video-quit) :void)

(declaim (inline %sdl::wait-event))

(cffi:defcfun ("SDL_WaitEvent" %sdl::wait-event)
              :int
              (%sdl::event (claw-utils:claw-pointer %sdl::event)))

(declaim (inline %sdl::wait-event-timeout))

(cffi:defcfun ("SDL_WaitEventTimeout" %sdl::wait-event-timeout)
              :int
              (%sdl::event (claw-utils:claw-pointer %sdl::event))
              (%sdl::timeout :int))

(declaim (inline %sdl::wait-thread))

(cffi:defcfun ("SDL_WaitThread" %sdl::wait-thread)
              :void
              (%sdl::thread (claw-utils:claw-pointer %sdl::thread))
              (%sdl::status (claw-utils:claw-pointer :int)))

(declaim (inline %sdl::warp-mouse-global))

(cffi:defcfun ("SDL_WarpMouseGlobal" %sdl::warp-mouse-global)
              :int
              (%sdl::x :int)
              (%sdl::y :int))

(declaim (inline %sdl::warp-mouse-in-window))

(cffi:defcfun ("SDL_WarpMouseInWindow" %sdl::warp-mouse-in-window)
              :void
              (%sdl::window (claw-utils:claw-pointer %sdl::window))
              (%sdl::x :int)
              (%sdl::y :int))

(declaim (inline %sdl::was-init))

(cffi:defcfun ("SDL_WasInit" %sdl::was-init)
              %sdl::uint32
              (%sdl::flags %sdl::uint32))

(declaim (inline %sdl::write-be16))

(cffi:defcfun ("SDL_WriteBE16" %sdl::write-be16)
              %sdl::size-t
              (%sdl::dst (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::value %sdl::uint16))

(declaim (inline %sdl::write-be32))

(cffi:defcfun ("SDL_WriteBE32" %sdl::write-be32)
              %sdl::size-t
              (%sdl::dst (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::value %sdl::uint32))

(declaim (inline %sdl::write-be64))

(cffi:defcfun ("SDL_WriteBE64" %sdl::write-be64)
              %sdl::size-t
              (%sdl::dst (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::value %sdl::uint64))

(declaim (inline %sdl::write-le16))

(cffi:defcfun ("SDL_WriteLE16" %sdl::write-le16)
              %sdl::size-t
              (%sdl::dst (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::value %sdl::uint16))

(declaim (inline %sdl::write-le32))

(cffi:defcfun ("SDL_WriteLE32" %sdl::write-le32)
              %sdl::size-t
              (%sdl::dst (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::value %sdl::uint32))

(declaim (inline %sdl::write-le64))

(cffi:defcfun ("SDL_WriteLE64" %sdl::write-le64)
              %sdl::size-t
              (%sdl::dst (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::value %sdl::uint64))

(declaim (inline %sdl::write-u8))

(cffi:defcfun ("SDL_WriteU8" %sdl::write-u8)
              %sdl::size-t
              (%sdl::dst (claw-utils:claw-pointer %sdl::r-wops))
              (%sdl::value %sdl::uint8))

(declaim (inline %sdl::abs))

(cffi:defcfun ("SDL_abs" %sdl::abs) :int (%sdl::x :int))

(declaim (inline %sdl::acos))

(cffi:defcfun ("SDL_acos" %sdl::acos) :double (%sdl::x :double))

(declaim (inline %sdl::acosf))

(cffi:defcfun ("SDL_acosf" %sdl::acosf) :float (%sdl::x :float))

(declaim (inline %sdl::asin))

(cffi:defcfun ("SDL_asin" %sdl::asin) :double (%sdl::x :double))

(declaim (inline %sdl::asinf))

(cffi:defcfun ("SDL_asinf" %sdl::asinf) :float (%sdl::x :float))

(declaim (inline %sdl::asprintf))

(cffi:defcfun ("SDL_asprintf" %sdl::asprintf)
              :int
              (%sdl::strp claw-utils:claw-string)
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(declaim (inline %sdl::atan))

(cffi:defcfun ("SDL_atan" %sdl::atan) :double (%sdl::x :double))

(declaim (inline %sdl::atan2))

(cffi:defcfun ("SDL_atan2" %sdl::atan2)
              :double
              (%sdl::y :double)
              (%sdl::x :double))

(declaim (inline %sdl::atan2f))

(cffi:defcfun ("SDL_atan2f" %sdl::atan2f)
              :float
              (%sdl::y :float)
              (%sdl::x :float))

(declaim (inline %sdl::atanf))

(cffi:defcfun ("SDL_atanf" %sdl::atanf) :float (%sdl::x :float))

(declaim (inline %sdl::atof))

(cffi:defcfun ("SDL_atof" %sdl::atof)
              :double
              (%sdl::str claw-utils:claw-string))

(declaim (inline %sdl::atoi))

(cffi:defcfun ("SDL_atoi" %sdl::atoi)
              :int
              (%sdl::str claw-utils:claw-string))

(declaim (inline %sdl::bsearch))

(cffi:defcfun ("SDL_bsearch" %sdl::bsearch)
              (claw-utils:claw-pointer :void)
              (%sdl::key (claw-utils:claw-pointer :void))
              (%sdl::base (claw-utils:claw-pointer :void))
              (%sdl::nmemb %sdl::size-t)
              (%sdl::size %sdl::size-t)
              (%sdl::compare (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::calloc))

(cffi:defcfun ("SDL_calloc" %sdl::calloc)
              (claw-utils:claw-pointer :void)
              (%sdl::nmemb %sdl::size-t)
              (%sdl::size %sdl::size-t))

(declaim (inline %sdl::ceil))

(cffi:defcfun ("SDL_ceil" %sdl::ceil) :double (%sdl::x :double))

(declaim (inline %sdl::ceilf))

(cffi:defcfun ("SDL_ceilf" %sdl::ceilf) :float (%sdl::x :float))

(declaim (inline %sdl::copysign))

(cffi:defcfun ("SDL_copysign" %sdl::copysign)
              :double
              (%sdl::x :double)
              (%sdl::y :double))

(declaim (inline %sdl::copysignf))

(cffi:defcfun ("SDL_copysignf" %sdl::copysignf)
              :float
              (%sdl::x :float)
              (%sdl::y :float))

(declaim (inline %sdl::cos))

(cffi:defcfun ("SDL_cos" %sdl::cos) :double (%sdl::x :double))

(declaim (inline %sdl::cosf))

(cffi:defcfun ("SDL_cosf" %sdl::cosf) :float (%sdl::x :float))

(declaim (inline %sdl::crc16))

(cffi:defcfun ("SDL_crc16" %sdl::crc16)
              %sdl::uint16
              (%sdl::crc %sdl::uint16)
              (%sdl::data (claw-utils:claw-pointer :void))
              (%sdl::len %sdl::size-t))

(declaim (inline %sdl::crc32))

(cffi:defcfun ("SDL_crc32" %sdl::crc32)
              %sdl::uint32
              (%sdl::crc %sdl::uint32)
              (%sdl::data (claw-utils:claw-pointer :void))
              (%sdl::len %sdl::size-t))

(declaim (inline %sdl::exp))

(cffi:defcfun ("SDL_exp" %sdl::exp) :double (%sdl::x :double))

(declaim (inline %sdl::expf))

(cffi:defcfun ("SDL_expf" %sdl::expf) :float (%sdl::x :float))

(declaim (inline %sdl::fabs))

(cffi:defcfun ("SDL_fabs" %sdl::fabs) :double (%sdl::x :double))

(declaim (inline %sdl::fabsf))

(cffi:defcfun ("SDL_fabsf" %sdl::fabsf) :float (%sdl::x :float))

(declaim (inline %sdl::floor))

(cffi:defcfun ("SDL_floor" %sdl::floor) :double (%sdl::x :double))

(declaim (inline %sdl::floorf))

(cffi:defcfun ("SDL_floorf" %sdl::floorf) :float (%sdl::x :float))

(declaim (inline %sdl::fmod))

(cffi:defcfun ("SDL_fmod" %sdl::fmod)
              :double
              (%sdl::x :double)
              (%sdl::y :double))

(declaim (inline %sdl::fmodf))

(cffi:defcfun ("SDL_fmodf" %sdl::fmodf)
              :float
              (%sdl::x :float)
              (%sdl::y :float))

(declaim (inline %sdl::free))

(cffi:defcfun ("SDL_free" %sdl::free)
              :void
              (%sdl::mem (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::getenv))

(cffi:defcfun ("SDL_getenv" %sdl::getenv)
              claw-utils:claw-string
              (%sdl::name claw-utils:claw-string))

(declaim (inline %sdl::hid-ble-scan))

(cffi:defcfun ("SDL_hid_ble_scan" %sdl::hid-ble-scan)
              :void
              (%sdl::active %sdl::bool))

(cffi:defcstruct (%sdl::hid-device- :size 0))

(cffi:defctype %sdl::hid-device (:struct %sdl::hid-device-))

(declaim (inline %sdl::hid-close))

(cffi:defcfun ("SDL_hid_close" %sdl::hid-close)
              :void
              (%sdl::dev (claw-utils:claw-pointer %sdl::hid-device)))

(declaim (inline %sdl::hid-device-change-count))

(cffi:defcfun ("SDL_hid_device_change_count"
               %sdl::hid-device-change-count)
              %sdl::uint32)

(cffi:defctype %sdl::wchar-t :unsigned-short)

(cffi:defcstruct (%sdl::hid-device-info :size 80))

(cffi:defcstruct (%sdl::hid-device-info :size 80)
                 (%sdl::path claw-utils:claw-string :offset 0)
                 (%sdl::vendor-id :unsigned-short :offset 8)
                 (%sdl::product-id :unsigned-short :offset 10)
                 (%sdl::serial-number
                  (claw-utils:claw-pointer %sdl::wchar-t) :offset 16)
                 (%sdl::release-number :unsigned-short :offset 24)
                 (%sdl::manufacturer-string
                  (claw-utils:claw-pointer %sdl::wchar-t) :offset 32)
                 (%sdl::product-string
                  (claw-utils:claw-pointer %sdl::wchar-t) :offset 40)
                 (%sdl::usage-page :unsigned-short :offset 48)
                 (%sdl::usage :unsigned-short :offset 50)
                 (%sdl::interface-number :int :offset 52)
                 (%sdl::interface-class :int :offset 56)
                 (%sdl::interface-subclass :int :offset 60)
                 (%sdl::interface-protocol :int :offset 64)
                 (%sdl::next
                  (claw-utils:claw-pointer
                   (:struct %sdl::hid-device-info))
                  :offset 72))

(cffi:defctype %sdl::hid-device-info (:struct %sdl::hid-device-info))

(declaim (inline %sdl::hid-enumerate))

(cffi:defcfun ("SDL_hid_enumerate" %sdl::hid-enumerate)
              (claw-utils:claw-pointer %sdl::hid-device-info)
              (%sdl::vendor-id :unsigned-short)
              (%sdl::product-id :unsigned-short))

(declaim (inline %sdl::hid-exit))

(cffi:defcfun ("SDL_hid_exit" %sdl::hid-exit) :int)

(declaim (inline %sdl::hid-free-enumeration))

(cffi:defcfun ("SDL_hid_free_enumeration" %sdl::hid-free-enumeration)
              :void
              (%sdl::devs
               (claw-utils:claw-pointer %sdl::hid-device-info)))

(declaim (inline %sdl::hid-get-feature-report))

(cffi:defcfun ("SDL_hid_get_feature_report"
               %sdl::hid-get-feature-report)
              :int
              (%sdl::dev (claw-utils:claw-pointer %sdl::hid-device))
              (%sdl::data (claw-utils:claw-pointer :unsigned-char))
              (%sdl::length %sdl::size-t))

(declaim (inline %sdl::hid-get-indexed-string))

(cffi:defcfun ("SDL_hid_get_indexed_string"
               %sdl::hid-get-indexed-string)
              :int
              (%sdl::dev (claw-utils:claw-pointer %sdl::hid-device))
              (%sdl::string-index :int)
              (%sdl::string (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::maxlen %sdl::size-t))

(declaim (inline %sdl::hid-get-manufacturer-string))

(cffi:defcfun ("SDL_hid_get_manufacturer_string"
               %sdl::hid-get-manufacturer-string)
              :int
              (%sdl::dev (claw-utils:claw-pointer %sdl::hid-device))
              (%sdl::string (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::maxlen %sdl::size-t))

(declaim (inline %sdl::hid-get-product-string))

(cffi:defcfun ("SDL_hid_get_product_string"
               %sdl::hid-get-product-string)
              :int
              (%sdl::dev (claw-utils:claw-pointer %sdl::hid-device))
              (%sdl::string (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::maxlen %sdl::size-t))

(declaim (inline %sdl::hid-get-serial-number-string))

(cffi:defcfun ("SDL_hid_get_serial_number_string"
               %sdl::hid-get-serial-number-string)
              :int
              (%sdl::dev (claw-utils:claw-pointer %sdl::hid-device))
              (%sdl::string (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::maxlen %sdl::size-t))

(declaim (inline %sdl::hid-init))

(cffi:defcfun ("SDL_hid_init" %sdl::hid-init) :int)

(declaim (inline %sdl::hid-open))

(cffi:defcfun ("SDL_hid_open" %sdl::hid-open)
              (claw-utils:claw-pointer %sdl::hid-device)
              (%sdl::vendor-id :unsigned-short)
              (%sdl::product-id :unsigned-short)
              (%sdl::serial-number
               (claw-utils:claw-pointer %sdl::wchar-t)))

(declaim (inline %sdl::hid-open-path))

(cffi:defcfun ("SDL_hid_open_path" %sdl::hid-open-path)
              (claw-utils:claw-pointer %sdl::hid-device)
              (%sdl::path claw-utils:claw-string)
              (%sdl::b-exclusive :int))

(declaim (inline %sdl::hid-read))

(cffi:defcfun ("SDL_hid_read" %sdl::hid-read)
              :int
              (%sdl::dev (claw-utils:claw-pointer %sdl::hid-device))
              (%sdl::data (claw-utils:claw-pointer :unsigned-char))
              (%sdl::length %sdl::size-t))

(declaim (inline %sdl::hid-read-timeout))

(cffi:defcfun ("SDL_hid_read_timeout" %sdl::hid-read-timeout)
              :int
              (%sdl::dev (claw-utils:claw-pointer %sdl::hid-device))
              (%sdl::data (claw-utils:claw-pointer :unsigned-char))
              (%sdl::length %sdl::size-t)
              (%sdl::milliseconds :int))

(declaim (inline %sdl::hid-send-feature-report))

(cffi:defcfun ("SDL_hid_send_feature_report"
               %sdl::hid-send-feature-report)
              :int
              (%sdl::dev (claw-utils:claw-pointer %sdl::hid-device))
              (%sdl::data (claw-utils:claw-pointer :unsigned-char))
              (%sdl::length %sdl::size-t))

(declaim (inline %sdl::hid-set-nonblocking))

(cffi:defcfun ("SDL_hid_set_nonblocking" %sdl::hid-set-nonblocking)
              :int
              (%sdl::dev (claw-utils:claw-pointer %sdl::hid-device))
              (%sdl::nonblock :int))

(declaim (inline %sdl::hid-write))

(cffi:defcfun ("SDL_hid_write" %sdl::hid-write)
              :int
              (%sdl::dev (claw-utils:claw-pointer %sdl::hid-device))
              (%sdl::data (claw-utils:claw-pointer :unsigned-char))
              (%sdl::length %sdl::size-t))

(cffi:defcstruct (%sdl::%sdl-iconv-t :size 0))

(cffi:defctype %sdl::iconv-t
               (claw-utils:claw-pointer (:struct %sdl::%sdl-iconv-t)))

(declaim (inline %sdl::iconv))

(cffi:defcfun ("SDL_iconv" %sdl::iconv)
              %sdl::size-t
              (%sdl::cd %sdl::iconv-t)
              (%sdl::inbuf claw-utils:claw-string)
              (%sdl::inbytesleft
               (claw-utils:claw-pointer %sdl::size-t))
              (%sdl::outbuf claw-utils:claw-string)
              (%sdl::outbytesleft
               (claw-utils:claw-pointer %sdl::size-t)))

(declaim (inline %sdl::iconv-close))

(cffi:defcfun ("SDL_iconv_close" %sdl::iconv-close)
              :int
              (%sdl::cd %sdl::iconv-t))

(declaim (inline %sdl::iconv-open))

(cffi:defcfun ("SDL_iconv_open" %sdl::iconv-open)
              %sdl::iconv-t
              (%sdl::tocode claw-utils:claw-string)
              (%sdl::fromcode claw-utils:claw-string))

(declaim (inline %sdl::iconv-string))

(cffi:defcfun ("SDL_iconv_string" %sdl::iconv-string)
              claw-utils:claw-string
              (%sdl::tocode claw-utils:claw-string)
              (%sdl::fromcode claw-utils:claw-string)
              (%sdl::inbuf claw-utils:claw-string)
              (%sdl::inbytesleft %sdl::size-t))

(declaim (inline %sdl::isalnum))

(cffi:defcfun ("SDL_isalnum" %sdl::isalnum) :int (%sdl::x :int))

(declaim (inline %sdl::isalpha))

(cffi:defcfun ("SDL_isalpha" %sdl::isalpha) :int (%sdl::x :int))

(declaim (inline %sdl::isblank))

(cffi:defcfun ("SDL_isblank" %sdl::isblank) :int (%sdl::x :int))

(declaim (inline %sdl::iscntrl))

(cffi:defcfun ("SDL_iscntrl" %sdl::iscntrl) :int (%sdl::x :int))

(declaim (inline %sdl::isdigit))

(cffi:defcfun ("SDL_isdigit" %sdl::isdigit) :int (%sdl::x :int))

(declaim (inline %sdl::isgraph))

(cffi:defcfun ("SDL_isgraph" %sdl::isgraph) :int (%sdl::x :int))

(declaim (inline %sdl::islower))

(cffi:defcfun ("SDL_islower" %sdl::islower) :int (%sdl::x :int))

(declaim (inline %sdl::isprint))

(cffi:defcfun ("SDL_isprint" %sdl::isprint) :int (%sdl::x :int))

(declaim (inline %sdl::ispunct))

(cffi:defcfun ("SDL_ispunct" %sdl::ispunct) :int (%sdl::x :int))

(declaim (inline %sdl::isspace))

(cffi:defcfun ("SDL_isspace" %sdl::isspace) :int (%sdl::x :int))

(declaim (inline %sdl::isupper))

(cffi:defcfun ("SDL_isupper" %sdl::isupper) :int (%sdl::x :int))

(declaim (inline %sdl::isxdigit))

(cffi:defcfun ("SDL_isxdigit" %sdl::isxdigit) :int (%sdl::x :int))

(declaim (inline %sdl::itoa))

(cffi:defcfun ("SDL_itoa" %sdl::itoa)
              claw-utils:claw-string
              (%sdl::value :int)
              (%sdl::str claw-utils:claw-string)
              (%sdl::radix :int))

(declaim (inline %sdl::lltoa))

(cffi:defcfun ("SDL_lltoa" %sdl::lltoa)
              claw-utils:claw-string
              (%sdl::value %sdl::sint64)
              (%sdl::str claw-utils:claw-string)
              (%sdl::radix :int))

(declaim (inline %sdl::log))

(cffi:defcfun ("SDL_log" %sdl::log) :double (%sdl::x :double))

(declaim (inline %sdl::log10))

(cffi:defcfun ("SDL_log10" %sdl::log10) :double (%sdl::x :double))

(declaim (inline %sdl::log10f))

(cffi:defcfun ("SDL_log10f" %sdl::log10f) :float (%sdl::x :float))

(declaim (inline %sdl::logf))

(cffi:defcfun ("SDL_logf" %sdl::logf) :float (%sdl::x :float))

(declaim (inline %sdl::lround))

(cffi:defcfun ("SDL_lround" %sdl::lround) :long (%sdl::x :double))

(declaim (inline %sdl::lroundf))

(cffi:defcfun ("SDL_lroundf" %sdl::lroundf) :long (%sdl::x :float))

(declaim (inline %sdl::ltoa))

(cffi:defcfun ("SDL_ltoa" %sdl::ltoa)
              claw-utils:claw-string
              (%sdl::value :long)
              (%sdl::str claw-utils:claw-string)
              (%sdl::radix :int))

(declaim (inline %sdl::main))

(cffi:defcfun ("SDL_main" %sdl::main)
              :int
              (%sdl::argc :int)
              (%sdl::argv
               (claw-utils:claw-pointer claw-utils:claw-string)))

(declaim (inline %sdl::malloc))

(cffi:defcfun ("SDL_malloc" %sdl::malloc)
              (claw-utils:claw-pointer :void)
              (%sdl::size %sdl::size-t))

(declaim (inline %sdl::memcmp))

(cffi:defcfun ("SDL_memcmp" %sdl::memcmp)
              :int
              (%sdl::s1 (claw-utils:claw-pointer :void))
              (%sdl::s2 (claw-utils:claw-pointer :void))
              (%sdl::len %sdl::size-t))

(declaim (inline %sdl::memcpy))

(cffi:defcfun ("SDL_memcpy" %sdl::memcpy)
              (claw-utils:claw-pointer :void)
              (%sdl::dst (claw-utils:claw-pointer :void))
              (%sdl::src (claw-utils:claw-pointer :void))
              (%sdl::len %sdl::size-t))

(declaim (inline %sdl::memmove))

(cffi:defcfun ("SDL_memmove" %sdl::memmove)
              (claw-utils:claw-pointer :void)
              (%sdl::dst (claw-utils:claw-pointer :void))
              (%sdl::src (claw-utils:claw-pointer :void))
              (%sdl::len %sdl::size-t))

(declaim (inline %sdl::memset))

(cffi:defcfun ("SDL_memset" %sdl::memset)
              (claw-utils:claw-pointer :void)
              (%sdl::dst (claw-utils:claw-pointer :void))
              (%sdl::c :int)
              (%sdl::len %sdl::size-t))

(declaim (inline %sdl::pow))

(cffi:defcfun ("SDL_pow" %sdl::pow)
              :double
              (%sdl::x :double)
              (%sdl::y :double))

(declaim (inline %sdl::powf))

(cffi:defcfun ("SDL_powf" %sdl::powf)
              :float
              (%sdl::x :float)
              (%sdl::y :float))

(declaim (inline %sdl::qsort))

(cffi:defcfun ("SDL_qsort" %sdl::qsort)
              :void
              (%sdl::base (claw-utils:claw-pointer :void))
              (%sdl::nmemb %sdl::size-t)
              (%sdl::size %sdl::size-t)
              (%sdl::compare (claw-utils:claw-pointer :void)))

(declaim (inline %sdl::realloc))

(cffi:defcfun ("SDL_realloc" %sdl::realloc)
              (claw-utils:claw-pointer :void)
              (%sdl::mem (claw-utils:claw-pointer :void))
              (%sdl::size %sdl::size-t))

(declaim (inline %sdl::round))

(cffi:defcfun ("SDL_round" %sdl::round) :double (%sdl::x :double))

(declaim (inline %sdl::roundf))

(cffi:defcfun ("SDL_roundf" %sdl::roundf) :float (%sdl::x :float))

(declaim (inline %sdl::scalbn))

(cffi:defcfun ("SDL_scalbn" %sdl::scalbn)
              :double
              (%sdl::x :double)
              (%sdl::n :int))

(declaim (inline %sdl::scalbnf))

(cffi:defcfun ("SDL_scalbnf" %sdl::scalbnf)
              :float
              (%sdl::x :float)
              (%sdl::n :int))

(declaim (inline %sdl::setenv))

(cffi:defcfun ("SDL_setenv" %sdl::setenv)
              :int
              (%sdl::name claw-utils:claw-string)
              (%sdl::value claw-utils:claw-string)
              (%sdl::overwrite :int))

(declaim (inline %sdl::sin))

(cffi:defcfun ("SDL_sin" %sdl::sin) :double (%sdl::x :double))

(declaim (inline %sdl::sinf))

(cffi:defcfun ("SDL_sinf" %sdl::sinf) :float (%sdl::x :float))

(declaim (inline %sdl::snprintf))

(cffi:defcfun ("SDL_snprintf" %sdl::snprintf)
              :int
              (%sdl::text claw-utils:claw-string)
              (%sdl::maxlen %sdl::size-t)
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(declaim (inline %sdl::sqrt))

(cffi:defcfun ("SDL_sqrt" %sdl::sqrt) :double (%sdl::x :double))

(declaim (inline %sdl::sqrtf))

(cffi:defcfun ("SDL_sqrtf" %sdl::sqrtf) :float (%sdl::x :float))

(declaim (inline %sdl::sscanf))

(cffi:defcfun ("SDL_sscanf" %sdl::sscanf)
              :int
              (%sdl::text claw-utils:claw-string)
              (%sdl::fmt claw-utils:claw-string)
              &rest)

(declaim (inline %sdl::strcasecmp))

(cffi:defcfun ("SDL_strcasecmp" %sdl::strcasecmp)
              :int
              (%sdl::str1 claw-utils:claw-string)
              (%sdl::str2 claw-utils:claw-string))

(declaim (inline %sdl::strchr))

(cffi:defcfun ("SDL_strchr" %sdl::strchr)
              claw-utils:claw-string
              (%sdl::str claw-utils:claw-string)
              (%sdl::c :int))

(declaim (inline %sdl::strcmp))

(cffi:defcfun ("SDL_strcmp" %sdl::strcmp)
              :int
              (%sdl::str1 claw-utils:claw-string)
              (%sdl::str2 claw-utils:claw-string))

(declaim (inline %sdl::strdup))

(cffi:defcfun ("SDL_strdup" %sdl::strdup)
              claw-utils:claw-string
              (%sdl::str claw-utils:claw-string))

(declaim (inline %sdl::strlcat))

(cffi:defcfun ("SDL_strlcat" %sdl::strlcat)
              %sdl::size-t
              (%sdl::dst claw-utils:claw-string)
              (%sdl::src claw-utils:claw-string)
              (%sdl::maxlen %sdl::size-t))

(declaim (inline %sdl::strlcpy))

(cffi:defcfun ("SDL_strlcpy" %sdl::strlcpy)
              %sdl::size-t
              (%sdl::dst claw-utils:claw-string)
              (%sdl::src claw-utils:claw-string)
              (%sdl::maxlen %sdl::size-t))

(declaim (inline %sdl::strlen))

(cffi:defcfun ("SDL_strlen" %sdl::strlen)
              %sdl::size-t
              (%sdl::str claw-utils:claw-string))

(declaim (inline %sdl::strlwr))

(cffi:defcfun ("SDL_strlwr" %sdl::strlwr)
              claw-utils:claw-string
              (%sdl::str claw-utils:claw-string))

(declaim (inline %sdl::strncasecmp))

(cffi:defcfun ("SDL_strncasecmp" %sdl::strncasecmp)
              :int
              (%sdl::str1 claw-utils:claw-string)
              (%sdl::str2 claw-utils:claw-string)
              (%sdl::len %sdl::size-t))

(declaim (inline %sdl::strncmp))

(cffi:defcfun ("SDL_strncmp" %sdl::strncmp)
              :int
              (%sdl::str1 claw-utils:claw-string)
              (%sdl::str2 claw-utils:claw-string)
              (%sdl::maxlen %sdl::size-t))

(declaim (inline %sdl::strrchr))

(cffi:defcfun ("SDL_strrchr" %sdl::strrchr)
              claw-utils:claw-string
              (%sdl::str claw-utils:claw-string)
              (%sdl::c :int))

(declaim (inline %sdl::strrev))

(cffi:defcfun ("SDL_strrev" %sdl::strrev)
              claw-utils:claw-string
              (%sdl::str claw-utils:claw-string))

(declaim (inline %sdl::strstr))

(cffi:defcfun ("SDL_strstr" %sdl::strstr)
              claw-utils:claw-string
              (%sdl::haystack claw-utils:claw-string)
              (%sdl::needle claw-utils:claw-string))

(declaim (inline %sdl::strtod))

(cffi:defcfun ("SDL_strtod" %sdl::strtod)
              :double
              (%sdl::str claw-utils:claw-string)
              (%sdl::endp claw-utils:claw-string))

(declaim (inline %sdl::strtokr))

(cffi:defcfun ("SDL_strtokr" %sdl::strtokr)
              claw-utils:claw-string
              (%sdl::s1 claw-utils:claw-string)
              (%sdl::s2 claw-utils:claw-string)
              (%sdl::saveptr claw-utils:claw-string))

(declaim (inline %sdl::strtol))

(cffi:defcfun ("SDL_strtol" %sdl::strtol)
              :long
              (%sdl::str claw-utils:claw-string)
              (%sdl::endp claw-utils:claw-string)
              (%sdl::base :int))

(declaim (inline %sdl::strtoll))

(cffi:defcfun ("SDL_strtoll" %sdl::strtoll)
              %sdl::sint64
              (%sdl::str claw-utils:claw-string)
              (%sdl::endp claw-utils:claw-string)
              (%sdl::base :int))

(declaim (inline %sdl::strtoul))

(cffi:defcfun ("SDL_strtoul" %sdl::strtoul)
              :unsigned-long
              (%sdl::str claw-utils:claw-string)
              (%sdl::endp claw-utils:claw-string)
              (%sdl::base :int))

(declaim (inline %sdl::strtoull))

(cffi:defcfun ("SDL_strtoull" %sdl::strtoull)
              %sdl::uint64
              (%sdl::str claw-utils:claw-string)
              (%sdl::endp claw-utils:claw-string)
              (%sdl::base :int))

(declaim (inline %sdl::strupr))

(cffi:defcfun ("SDL_strupr" %sdl::strupr)
              claw-utils:claw-string
              (%sdl::str claw-utils:claw-string))

(declaim (inline %sdl::tan))

(cffi:defcfun ("SDL_tan" %sdl::tan) :double (%sdl::x :double))

(declaim (inline %sdl::tanf))

(cffi:defcfun ("SDL_tanf" %sdl::tanf) :float (%sdl::x :float))

(declaim (inline %sdl::tolower))

(cffi:defcfun ("SDL_tolower" %sdl::tolower) :int (%sdl::x :int))

(declaim (inline %sdl::toupper))

(cffi:defcfun ("SDL_toupper" %sdl::toupper) :int (%sdl::x :int))

(declaim (inline %sdl::trunc))

(cffi:defcfun ("SDL_trunc" %sdl::trunc) :double (%sdl::x :double))

(declaim (inline %sdl::truncf))

(cffi:defcfun ("SDL_truncf" %sdl::truncf) :float (%sdl::x :float))

(declaim (inline %sdl::uitoa))

(cffi:defcfun ("SDL_uitoa" %sdl::uitoa)
              claw-utils:claw-string
              (%sdl::value :unsigned-int)
              (%sdl::str claw-utils:claw-string)
              (%sdl::radix :int))

(declaim (inline %sdl::ulltoa))

(cffi:defcfun ("SDL_ulltoa" %sdl::ulltoa)
              claw-utils:claw-string
              (%sdl::value %sdl::uint64)
              (%sdl::str claw-utils:claw-string)
              (%sdl::radix :int))

(declaim (inline %sdl::ultoa))

(cffi:defcfun ("SDL_ultoa" %sdl::ultoa)
              claw-utils:claw-string
              (%sdl::value :unsigned-long)
              (%sdl::str claw-utils:claw-string)
              (%sdl::radix :int))

(declaim (inline %sdl::utf8strlcpy))

(cffi:defcfun ("SDL_utf8strlcpy" %sdl::utf8strlcpy)
              %sdl::size-t
              (%sdl::dst claw-utils:claw-string)
              (%sdl::src claw-utils:claw-string)
              (%sdl::dst-bytes %sdl::size-t))

(declaim (inline %sdl::utf8strlen))

(cffi:defcfun ("SDL_utf8strlen" %sdl::utf8strlen)
              %sdl::size-t
              (%sdl::str claw-utils:claw-string))

(declaim (inline %sdl::utf8strnlen))

(cffi:defcfun ("SDL_utf8strnlen" %sdl::utf8strnlen)
              %sdl::size-t
              (%sdl::str claw-utils:claw-string)
              (%sdl::bytes %sdl::size-t))

(declaim (inline %sdl::vasprintf))

(cffi:defcfun ("SDL_vasprintf" %sdl::vasprintf)
              :int
              (%sdl::strp claw-utils:claw-string)
              (%sdl::fmt claw-utils:claw-string)
              (%sdl::ap %sdl::va-list))

(declaim (inline %sdl::vsnprintf))

(cffi:defcfun ("SDL_vsnprintf" %sdl::vsnprintf)
              :int
              (%sdl::text claw-utils:claw-string)
              (%sdl::maxlen %sdl::size-t)
              (%sdl::fmt claw-utils:claw-string)
              (%sdl::ap %sdl::va-list))

(declaim (inline %sdl::vsscanf))

(cffi:defcfun ("SDL_vsscanf" %sdl::vsscanf)
              :int
              (%sdl::text claw-utils:claw-string)
              (%sdl::fmt claw-utils:claw-string)
              (%sdl::ap %sdl::va-list))

(declaim (inline %sdl::wcscasecmp))

(cffi:defcfun ("SDL_wcscasecmp" %sdl::wcscasecmp)
              :int
              (%sdl::str1 (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::str2 (claw-utils:claw-pointer %sdl::wchar-t)))

(declaim (inline %sdl::wcscmp))

(cffi:defcfun ("SDL_wcscmp" %sdl::wcscmp)
              :int
              (%sdl::str1 (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::str2 (claw-utils:claw-pointer %sdl::wchar-t)))

(declaim (inline %sdl::wcsdup))

(cffi:defcfun ("SDL_wcsdup" %sdl::wcsdup)
              (claw-utils:claw-pointer %sdl::wchar-t)
              (%sdl::wstr (claw-utils:claw-pointer %sdl::wchar-t)))

(declaim (inline %sdl::wcslcat))

(cffi:defcfun ("SDL_wcslcat" %sdl::wcslcat)
              %sdl::size-t
              (%sdl::dst (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::src (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::maxlen %sdl::size-t))

(declaim (inline %sdl::wcslcpy))

(cffi:defcfun ("SDL_wcslcpy" %sdl::wcslcpy)
              %sdl::size-t
              (%sdl::dst (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::src (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::maxlen %sdl::size-t))

(declaim (inline %sdl::wcslen))

(cffi:defcfun ("SDL_wcslen" %sdl::wcslen)
              %sdl::size-t
              (%sdl::wstr (claw-utils:claw-pointer %sdl::wchar-t)))

(declaim (inline %sdl::wcsncasecmp))

(cffi:defcfun ("SDL_wcsncasecmp" %sdl::wcsncasecmp)
              :int
              (%sdl::str1 (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::str2 (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::len %sdl::size-t))

(declaim (inline %sdl::wcsncmp))

(cffi:defcfun ("SDL_wcsncmp" %sdl::wcsncmp)
              :int
              (%sdl::str1 (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::str2 (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::maxlen %sdl::size-t))

(declaim (inline %sdl::wcsstr))

(cffi:defcfun ("SDL_wcsstr" %sdl::wcsstr)
              (claw-utils:claw-pointer %sdl::wchar-t)
              (%sdl::haystack
               (claw-utils:claw-pointer %sdl::wchar-t))
              (%sdl::needle (claw-utils:claw-pointer %sdl::wchar-t)))

(cffi:defcstruct (%sdl::os-event :size 8)
                 (%sdl::type %sdl::uint32 :offset 0)
                 (%sdl::timestamp %sdl::uint32 :offset 4))

(cffi:defctype %sdl::array-order %sdl::|C:@EA@SDL-ARRAY-ORDER|)

(cffi:defctype %sdl::bitmap-order %sdl::|C:@EA@SDL-BITMAP-ORDER|)

(cffi:defctype %sdl::dummy-enum %sdl::|C:@EA@SDL-DUMMY-ENUM|)

(cffi:defctype %sdl::display-event-id
               %sdl::|C:@EA@SDL-DISPLAY-EVENT-ID|)

(cffi:defctype %sdl::event-type %sdl::|C:@EA@SDL-EVENT-TYPE|)

(cffi:defctype %sdl::gl-context-reset-notification
               %sdl::|C:@EA@SDL-GL-CONTEXT-RESET-NOTIFICATION|)

(cffi:defctype %sdl::g-lcontext-flag
               %sdl::|C:@EA@SDL-G-LCONTEXT-FLAG|)

(cffi:defctype %sdl::g-lcontext-release-flag
               %sdl::|C:@EA@SDL-G-LCONTEXT-RELEASE-FLAG|)

(cffi:defctype %sdl::g-lprofile %sdl::|C:@EA@SDL-G-LPROFILE|)

(cffi:defctype %sdl::hit-test-result
               %sdl::|C:@EA@SDL-HIT-TEST-RESULT|)

(cffi:defctype %sdl::key-code %sdl::|C:@EA@SDL-KEY-CODE|)

(cffi:defctype %sdl::log-category %sdl::|C:@EA@SDL-LOG-CATEGORY|)

(cffi:defctype %sdl::message-box-button-flags
               %sdl::|C:@EA@SDL-MESSAGE-BOX-BUTTON-FLAGS|)

(cffi:defctype %sdl::message-box-color-type
               %sdl::|C:@EA@SDL-MESSAGE-BOX-COLOR-TYPE|)

(cffi:defctype %sdl::message-box-flags
               %sdl::|C:@EA@SDL-MESSAGE-BOX-FLAGS|)

(cffi:defctype %sdl::mouse-wheel-direction
               %sdl::|C:@EA@SDL-MOUSE-WHEEL-DIRECTION|)

(cffi:defctype %sdl::packed-layout %sdl::|C:@EA@SDL-PACKED-LAYOUT|)

(cffi:defctype %sdl::packed-order %sdl::|C:@EA@SDL-PACKED-ORDER|)

(cffi:defctype %sdl::pixel-format-enum
               %sdl::|C:@EA@SDL-PIXEL-FORMAT-ENUM|)

(cffi:defctype %sdl::pixel-type %sdl::|C:@EA@SDL-PIXEL-TYPE|)

(cffi:defctype %sdl::renderer-flags %sdl::|C:@EA@SDL-RENDERER-FLAGS|)

(cffi:defctype %sdl::texture-access %sdl::|C:@EA@SDL-TEXTURE-ACCESS|)

(cffi:defctype %sdl::texture-modulate
               %sdl::|C:@EA@SDL-TEXTURE-MODULATE|)

(cffi:defctype %sdl::window-event-id
               %sdl::|C:@EA@SDL-WINDOW-EVENT-ID|)

(cffi:defctype %sdl::window-flags %sdl::|C:@EA@SDL-WINDOW-FLAGS|)

(cffi:defctype %sdl::os-event (:struct %sdl::os-event))

(cffi:defctype %sdl::main-func (claw-utils:claw-pointer :void))

(cffi:defctype %sdl::blit (claw-utils:claw-pointer :void))

(eval-when (:load-toplevel :compile-toplevel :execute)
  (export '%sdl::+mouse-touchid+ :%sdl)
  (export '%sdl::os-event :%sdl)
  (export '%sdl::+min-uint8+ :%sdl)
  (export '%sdl::+displayconfig-scaling-preferred+ :%sdl)
  (export '%sdl::uint :%sdl)
  (export '%sdl::save-all-dollar-templates :%sdl)
  (export '%sdl::set-window-mouse-grab :%sdl)
  (export '%sdl::free-palette :%sdl)
  (export '%sdl::+power-action-reserved+ :%sdl)
  (export '%sdl::map :%sdl)
  (export '%sdl::render-set-v-sync :%sdl)
  (export '%sdl::memmove :%sdl)
  (export '%sdl::get-scancode-from-name :%sdl)
  (export '%sdl::|C:@EA@SDL-GAME-CONTROLLER-AXIS| :%sdl)
  (export '%sdl::tolower :%sdl)
  (export '%sdl::vertex :%sdl)
  (export '%sdl::game-controller-get-vendor :%sdl)
  (export '%sdl::+hint-emscripten-keyboard-element+ :%sdl)
  (export '%sdl::isalnum :%sdl)
  (export '%sdl::pause-audio :%sdl)
  (export '%sdl::+disable+ :%sdl)
  (export '%sdl::+hint-wave-truncation+ :%sdl)
  (export '%sdl::+win-capability-appointments-sid+ :%sdl)
  (export '%sdl::game-controller-send-effect :%sdl)
  (export '%sdl::|C:@EA@SDL-SYSTEM-CURSOR| :%sdl)
  (export '%sdl::+%mm-perm-aada+ :%sdl)
  (export '%sdl::strstr :%sdl)
  (export '%sdl::+displayconfig-scanline-ordering-unspecified+ :%sdl)
  (export '%sdl::+hint-video-foreign-window-vulkan+ :%sdl)
  (export '%sdl::atomic-t :%sdl)
  (export '%sdl::+win-enterprise-controllers-sid+ :%sdl)
  (export '%sdl::+displayconfig-rotation-rotate90+ :%sdl)
  (export '%sdl::render-get-d3d11device :%sdl)
  (export '%sdl::+win-builtin-any-package-sid+ :%sdl)
  (export '%sdl::hwnd :%sdl)
  (export '%sdl::+hint-ime-show-ui+ :%sdl)
  (export '%sdl::bool :%sdl)
  (export '%sdl::|C:@EA@SDL-ERRORCODE| :%sdl)
  (export '%sdl::+hint-android-apk-expansion-patch-file-version+
          :%sdl)
  (export '%sdl::+po-ac+ :%sdl)
  (export '%sdl::render-geometry :%sdl)
  (export '%sdl::g-lattr :%sdl)
  (export '%sdl::jhat :%sdl)
  (export '%sdl::render-set-integer-scale :%sdl)
  (export '%sdl::log-info :%sdl)
  (export '%sdl::keysym :%sdl)
  (export '%sdl::iconv-string :%sdl)
  (export '%sdl::stop-text-input :%sdl)
  (export '%sdl::+verify-system-policy-dc+ :%sdl)
  (export '%sdl::joystick :%sdl)
  (export '%sdl::+displayconfig-device-info-get-target-preferred-mode+
          :%sdl)
  (export '%sdl::reset-assertion-report :%sdl)
  (export '%sdl::+%mm-perm-cdbc+ :%sdl)
  (export '%sdl::+%mm-perm-cbda+ :%sdl)
  (export '%sdl::+%mm-perm-abdc+ :%sdl)
  (export '%sdl::display-orientation :%sdl)
  (export '%sdl::+%mm-perm-accd+ :%sdl)
  (export '%sdl::+processor-idle-states-hv+ :%sdl)
  (export '%sdl::|C:@EA@SDL-AUDIO-STATUS| :%sdl)
  (export '%sdl::+%mm-perm-ddcc+ :%sdl)
  (export '%sdl::+display-burst+ :%sdl)
  (export '%sdl::clear-hints :%sdl)
  (export '%sdl::set-window-maximum-size :%sdl)
  (export '%sdl::+%mm-perm-cbdd+ :%sdl)
  (export '%sdl::+colour+ :%sdl)
  (export '%sdl::+%mm-perm-daca+ :%sdl)
  (export '%sdl::game-controller-get-axis-from-string :%sdl)
  (export '%sdl::+win-creator-group-server-sid+ :%sdl)
  (export '%sdl::w :%sdl)
  (export '%sdl::+win-authentication-service-asserted-sid+ :%sdl)
  (export '%sdl::+sensor-windows+ :%sdl)
  (export '%sdl::+hint-thread-priority-policy+ :%sdl)
  (export '%sdl::load-dollar-templates :%sdl)
  (export '%sdl::+hint-joystick-hidapi-xbox+ :%sdl)
  (export '%sdl::+screen-off+ :%sdl)
  (export '%sdl::+%mm-perm-dcaa+ :%sdl)
  (export '%sdl::joystick-path-for-index :%sdl)
  (export '%sdl::tls-set :%sdl)
  (export '%sdl::+win-s-channel-authentication-sid+ :%sdl)
  (export '%sdl::+group-park+ :%sdl)
  (export '%sdl::+audio-allow-samples-change+ :%sdl)
  (export '%sdl::color-scheme :%sdl)
  (export '%sdl::update-window-surface-rects :%sdl)
  (export '%sdl::+notify-user-mode-legacy-power-event+ :%sdl)
  (export '%sdl::num-haptics :%sdl)
  (export '%sdl::+rw-seek-cur+ :%sdl)
  (export '%sdl::log-get-output-function :%sdl)
  (export '%sdl::|C:@EA@SDL-TEXTURE-MODULATE| :%sdl)
  (export '%sdl::+%mm-perm-ddad+ :%sdl)
  (export '%sdl::+%mm-perm-dddb+ :%sdl)
  (export '%sdl::memset :%sdl)
  (export '%sdl::vendor-id :%sdl)
  (export '%sdl::hid-device :%sdl)
  (export '%sdl::+processor-information+ :%sdl)
  (export '%sdl::has-lsx :%sdl)
  (export '%sdl::userdata :%sdl)
  (export '%sdl::+%mm-perm-caca+ :%sdl)
  (export '%sdl::strlcpy :%sdl)
  (export '%sdl::rw-from-const-mem :%sdl)
  (export '%sdl::mix-audio :%sdl)
  (export '%sdl::union-f-rect :%sdl)
  (export '%sdl::window-event-id :%sdl)
  (export '%sdl::was-init :%sdl)
  (export '%sdl::packed-order :%sdl)
  (export '%sdl::+hint-joystick-hidapi-stadia+ :%sdl)
  (export '%sdl::+win-account-domain-users-sid+ :%sdl)
  (export '%sdl::+trace-service-power-message+ :%sdl)
  (export '%sdl::+hint-joystick-hidapi-switch+ :%sdl)
  (export '%sdl::b :%sdl)
  (export '%sdl::|C:@EA@SDL-GAME-CONTROLLER-BIND-TYPE| :%sdl)
  (export '%sdl::+displayconfig-output-technology-displayport-external+
          :%sdl)
  (export '%sdl::get-window-size :%sdl)
  (export '%sdl::+hint-mac-opengl-async-dispatch+ :%sdl)
  (export '%sdl::+processor-perf-cap-hv+ :%sdl)
  (export '%sdl::+hint-force-raisewindow+ :%sdl)
  (export '%sdl::+win-account-default-system-managed-sid+ :%sdl)
  (export '%sdl::array-order :%sdl)
  (export '%sdl::+%mm-perm-acbc+ :%sdl)
  (export '%sdl::+exit-latency-sampling-percentage+ :%sdl)
  (export '%sdl::read-u8 :%sdl)
  (export '%sdl::+win-user-mode-drivers-sid+ :%sdl)
  (export '%sdl::game-controller-get-touchpad-finger :%sdl)
  (export '%sdl::get-num-audio-drivers :%sdl)
  (export '%sdl::free-audio-stream :%sdl)
  (export '%sdl::create-semaphore :%sdl)
  (export '%sdl::|C:@S@SDL-SYS-W-MMSG@U@SDL-SYSWM.H@3845| :%sdl)
  (export '%sdl::+%mm-perm-bdcb+ :%sdl)
  (export '%sdl::patch :%sdl)
  (export '%sdl::build-audio-cvt :%sdl)
  (export '%sdl::xrel :%sdl)
  (export '%sdl::gesture-id :%sdl)
  (export '%sdl::del-hint-callback :%sdl)
  (export '%sdl::wcslcat :%sdl)
  (export '%sdl::game-controller-from-instance-id :%sdl)
  (export '%sdl::hwnd-- :%sdl)
  (export '%sdl::+button-middle+ :%sdl)
  (export '%sdl::abs :%sdl)
  (export '%sdl::uint8 :%sdl)
  (export '%sdl::gl-unbind-texture :%sdl)
  (export '%sdl::map-rgba :%sdl)
  (export '%sdl::num-texture-formats :%sdl)
  (export '%sdl::size :%sdl)
  (export '%sdl::|C:@EA@SDL-JOYSTICK-POWER-LEVEL| :%sdl)
  (export '%sdl::+%mm-perm-acad+ :%sdl)
  (export '%sdl::+%mm-perm-adab+ :%sdl)
  (export '%sdl::+%mm-perm-daaa+ :%sdl)
  (export '%sdl::+max-sint16+ :%sdl)
  (export '%sdl::left-coeff :%sdl)
  (export '%sdl::motion :%sdl)
  (export '%sdl::+power-action-hibernate+ :%sdl)
  (export '%sdl::flush-event :%sdl)
  (export '%sdl::+%mm-perm-dada+ :%sdl)
  (export '%sdl::+%mm-perm-ccbd+ :%sdl)
  (export '%sdl::audio-filter :%sdl)
  (export '%sdl::+monitor-request-reason-session-unlock+ :%sdl)
  (export '%sdl::+%mm-perm-babc+ :%sdl)
  (export '%sdl::+hint-directinput-enabled+ :%sdl)
  (export '%sdl::sscanf :%sdl)
  (export '%sdl::+processor-state-handler2+ :%sdl)
  (export '%sdl::+invalid-shape-argument+ :%sdl)
  (export '%sdl::+win-network-sid+ :%sdl)
  (export '%sdl::+pointer-feedback-indirect+ :%sdl)
  (export '%sdl::+processor-idle-domains+ :%sdl)
  (export '%sdl::+hat-up+ :%sdl)
  (export '%sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3820|
          :%sdl)
  (export '%sdl::get-display-usable-bounds :%sdl)
  (export '%sdl::+hint-apple-tv-controller-ui-events+ :%sdl)
  (export '%sdl::+iconv-error+ :%sdl)
  (export '%sdl::set-window-opacity :%sdl)
  (export '%sdl::+%mm-cmpint-ne+ :%sdl)
  (export '%sdl::+byteorder+ :%sdl)
  (export '%sdl::+displayconfig-rotation-rotate270+ :%sdl)
  (export '%sdl::+button-x2mask+ :%sdl)
  (export '%sdl::display-event-id :%sdl)
  (export '%sdl::expf :%sdl)
  (export '%sdl::log-set-all-priority :%sdl)
  (export '%sdl::+hint-audio-include-monitors+ :%sdl)
  (export '%sdl::render-target-supported :%sdl)
  (export '%sdl::blend-factor :%sdl)
  (export '%sdl::i-direct3d-device9 :%sdl)
  (export '%sdl::+firmware-table-information-registered+ :%sdl)
  (export '%sdl::mouse-motion-event :%sdl)
  (export '%sdl::+win-builtin-rds-endpoint-servers-sid+ :%sdl)
  (export '%sdl::bitmap-order :%sdl)
  (export '%sdl::set-window-display-mode :%sdl)
  (export '%sdl::get-window-data :%sdl)
  (export '%sdl::dir :%sdl)
  (export '%sdl::simd-realloc :%sdl)
  (export '%sdl::+win-local-service-sid+ :%sdl)
  (export '%sdl::+assembly-routines+ :%sdl)
  (export '%sdl::game-controller-get-sensor-data :%sdl)
  (export '%sdl::|C:@EA@SDL-TEXTURE-ACCESS| :%sdl)
  (export '%sdl::+hat-down+ :%sdl)
  (export '%sdl::+win-builtin-remote-desktop-users-sid+ :%sdl)
  (export '%sdl::deadband :%sdl)
  (export '%sdl::+monitor-request-reason-user-input+ :%sdl)
  (export '%sdl::window-id :%sdl)
  (export '%sdl::+win-builtin-crypto-operators-sid+ :%sdl)
  (export '%sdl::game-controller-get-serial :%sdl)
  (export '%sdl::g :%sdl)
  (export '%sdl::game-controller-get-firmware-version :%sdl)
  (export '%sdl::set-surface-color-mod :%sdl)
  (export '%sdl::id :%sdl)
  (export '%sdl::+rwops-memory+ :%sdl)
  (export '%sdl::+win-builtin-perf-monitoring-users-sid+ :%sdl)
  (export '%sdl::num-fingers :%sdl)
  (export '%sdl::+%mm-perm-baad+ :%sdl)
  (export '%sdl::on-application-did-receive-memory-warning :%sdl)
  (export '%sdl::+init-timer+ :%sdl)
  (export '%sdl::thread :%sdl)
  (export '%sdl::+%mm-perm-bbcc+ :%sdl)
  (export '%sdl::+%mm-perm-bada+ :%sdl)
  (export '%sdl::joystick-get-device-instance-id :%sdl)
  (export '%sdl::+haptic-dinput+ :%sdl)
  (export '%sdl::+win-authenticated-user-sid+ :%sdl)
  (export '%sdl::joystick-event-state :%sdl)
  (export '%sdl::+beginthread+ :%sdl)
  (export '%sdl::+%mm-perm-addc+ :%sdl)
  (export '%sdl::set-color-key :%sdl)
  (export '%sdl::+hint-tv-remote-as-joystick+ :%sdl)
  (export '%sdl::message :%sdl)
  (export '%sdl::+%mm-perm-dcba+ :%sdl)
  (export '%sdl::+hint-joystick-hidapi-ps4-rumble+ :%sdl)
  (export '%sdl::length :%sdl)
  (export '%sdl::get-window-id :%sdl)
  (export '%sdl::|C:@EA@SDL-JOYSTICK-TYPE| :%sdl)
  (export '%sdl::+win-builtin-dcom-users-sid+ :%sdl)
  (export '%sdl::+haptic-triangle+ :%sdl)
  (export '%sdl::+hint-linux-joystick-deadzones+ :%sdl)
  (export '%sdl::+hint-joystick-hidapi-ps5+ :%sdl)
  (export '%sdl::create-thread :%sdl)
  (export '%sdl::atomic-set :%sdl)
  (export '%sdl::end :%sdl)
  (export '%sdl::+%mm-perm-bcbc+ :%sdl)
  (export '%sdl::+%mm-perm-bbda+ :%sdl)
  (export '%sdl::haptic-open :%sdl)
  (export '%sdl::+%mm-perm-bbab+ :%sdl)
  (export '%sdl::+hint-framebuffer-acceleration+ :%sdl)
  (export '%sdl::lock-joysticks :%sdl)
  (export '%sdl::gl-get-proc-address :%sdl)
  (export '%sdl::hid-write :%sdl)
  (export '%sdl::joystick-close :%sdl)
  (export '%sdl::+hint-render-scale-quality+ :%sdl)
  (export '%sdl::padding4 :%sdl)
  (export '%sdl::+hint-video-x11-net-wm-bypass-compositor+ :%sdl)
  (export '%sdl::+%mm-perm-daab+ :%sdl)
  (export '%sdl::audio-stream-get :%sdl)
  (export '%sdl::+unused+ :%sdl)
  (export '%sdl::jaxis :%sdl)
  (export '%sdl::+hint-mouse-focus-clickthrough+ :%sdl)
  (export '%sdl::show-simple-message-box :%sdl)
  (export '%sdl::|C:@SA@SDL-GUID| :%sdl)
  (export '%sdl::+%mm-perm-caaa+ :%sdl)
  (export '%sdl::controller-touchpad-event :%sdl)
  (export '%sdl::set-surface-rle :%sdl)
  (export '%sdl::haptic-new-effect :%sdl)
  (export '%sdl::+displayconfig-mode-info-type-source+ :%sdl)
  (export '%sdl::+win-new-enterprise-readonly-controllers-sid+ :%sdl)
  (export '%sdl::game-controller-get-sensor-data-rate :%sdl)
  (export '%sdl::amask :%sdl)
  (export '%sdl::audio-spec :%sdl)
  (export '%sdl::+hint-video-egl-allow-transparency+ :%sdl)
  (export '%sdl::interface-class :%sdl)
  (export '%sdl::+displayconfig-pixelformat-force-uint32+ :%sdl)
  (export '%sdl::render-flush :%sdl)
  (export '%sdl::renderer-flip :%sdl)
  (export '%sdl::get-display-name :%sdl)
  (export '%sdl::create-cond :%sdl)
  (export '%sdl::update :%sdl)
  (export '%sdl::timestamp :%sdl)
  (export '%sdl::atanf :%sdl)
  (export '%sdl::+%mm-perm-abaa+ :%sdl)
  (export '%sdl::+hat-rightup+ :%sdl)
  (export '%sdl::message-box-button-data :%sdl)
  (export '%sdl::show-message-box :%sdl)
  (export '%sdl::+hint-mouse-relative-scaling+ :%sdl)
  (export '%sdl::%sdl-game-controller :%sdl)
  (export '%sdl::msg :%sdl)
  (export '%sdl::update-texture :%sdl)
  (export '%sdl::destroy-semaphore :%sdl)
  (export '%sdl::+hint-thread-force-realtime-time-critical+ :%sdl)
  (export '%sdl::+session-display-state+ :%sdl)
  (export '%sdl::+hint-rpi-video-layer+ :%sdl)
  (export '%sdl::log-output-function :%sdl)
  (export '%sdl::joystick-detach-virtual :%sdl)
  (export '%sdl::+displayconfig-output-technology-d-jpn+ :%sdl)
  (export '%sdl::axis :%sdl)
  (export '%sdl::+win-local-system-sid+ :%sdl)
  (export '%sdl::+win-builtin-access-control-assistance-operators-sid+
          :%sdl)
  (export '%sdl::wcsstr :%sdl)
  (export '%sdl::info :%sdl)
  (export '%sdl::+init-haptic+ :%sdl)
  (export '%sdl::|C:@EA@SDL-G-LATTR| :%sdl)
  (export '%sdl::+%mm-perm-acdb+ :%sdl)
  (export '%sdl::+%mm-perm-bbaa+ :%sdl)
  (export '%sdl::get-renderer-output-size :%sdl)
  (export '%sdl::product-id :%sdl)
  (export '%sdl::+%mm-perm-cccc+ :%sdl)
  (export '%sdl::|C:@EA@SDL-BLEND-MODE| :%sdl)
  (export '%sdl::+win-logon-ids-sid+ :%sdl)
  (export '%sdl::+%mm-perm-bdcd+ :%sdl)
  (export '%sdl::+haptic-gain+ :%sdl)
  (export '%sdl::+win-builtin-terminal-server-license-servers-sid+
          :%sdl)
  (export '%sdl::set-text-input-rect :%sdl)
  (export '%sdl::+hint-render-direct3d11-debug+ :%sdl)
  (export '%sdl::+displayconfig-mode-info-type-force-uint32+ :%sdl)
  (export '%sdl::+notify-user-power-setting+ :%sdl)
  (export '%sdl::game-controller-has-button :%sdl)
  (export '%sdl::+hint-joystick-device+ :%sdl)
  (export '%sdl::convert-pixels :%sdl)
  (export '%sdl::+hint-joystick-thread+ :%sdl)
  (export '%sdl::get-render-draw-blend-mode :%sdl)
  (export '%sdl::texture-formats :%sdl)
  (export '%sdl::padding3 :%sdl)
  (export '%sdl::destroy-cond :%sdl)
  (export '%sdl::get-global-mouse-state :%sdl)
  (export '%sdl::+hint-video-x11-xvidmode+ :%sdl)
  (export '%sdl::+hint-render-direct3d-threadsafe+ :%sdl)
  (export '%sdl::get-window-wm-info :%sdl)
  (export '%sdl::quit-sub-system :%sdl)
  (export '%sdl::x :%sdl)
  (export '%sdl::read-le64 :%sdl)
  (export '%sdl::metal-destroy-view :%sdl)
  (export '%sdl::+video-render-d3d11+ :%sdl)
  (export '%sdl::hid-get-manufacturer-string :%sdl)
  (export '%sdl::sem-value :%sdl)
  (export '%sdl::+win-self-sid+ :%sdl)
  (export '%sdl::+win-remote-logon-id-sid+ :%sdl)
  (export '%sdl::+lil-endian+ :%sdl)
  (export '%sdl::+min-sint16+ :%sdl)
  (export '%sdl::+processor-power-policy-ac+ :%sdl)
  (export '%sdl::interface-subclass :%sdl)
  (export '%sdl::video-init :%sdl)
  (export '%sdl::+%mm-perm-dcac+ :%sdl)
  (export '%sdl::ispunct :%sdl)
  (export '%sdl::log-debug :%sdl)
  (export '%sdl::+%mm-perm-cdcd+ :%sdl)
  (export '%sdl::+max-uint8+ :%sdl)
  (export '%sdl::fabs :%sdl)
  (export '%sdl::+win-capability-music-library-sid+ :%sdl)
  (export '%sdl::get-window-display-mode :%sdl)
  (export '%sdl::yrel :%sdl)
  (export '%sdl::joystick-rumble :%sdl)
  (export '%sdl::log-priority :%sdl)
  (export '%sdl::+win-authentication-key-property-attestation-sid+
          :%sdl)
  (export '%sdl::+win-capability-internet-client-sid+ :%sdl)
  (export '%sdl::+haptic-pause+ :%sdl)
  (export '%sdl::+power-action-warm-eject+ :%sdl)
  (export '%sdl::dy :%sdl)
  (export '%sdl::query-texture :%sdl)
  (export '%sdl::+win-proxy-sid+ :%sdl)
  (export '%sdl::precise-y :%sdl)
  (export '%sdl::guid-from-string :%sdl)
  (export '%sdl::isspace :%sdl)
  (export '%sdl::render-draw-rect :%sdl)
  (export '%sdl::atomic-get-ptr :%sdl)
  (export '%sdl::+%mm-perm-abcd+ :%sdl)
  (export '%sdl::on-application-will-terminate :%sdl)
  (export '%sdl::|C:@SA@SDL-MESSAGE-BOX-BUTTON-DATA| :%sdl)
  (export '%sdl::value :%sdl)
  (export '%sdl::hid-read :%sdl)
  (export '%sdl::render-get-d3d12device :%sdl)
  (export '%sdl::haptic-destroy-effect :%sdl)
  (export '%sdl::|C:@S@SDL-GAME-CONTROLLER-BUTTON-BIND@U@SDL-GAMECONTROLLER.H@2918|
          :%sdl)
  (export '%sdl::+printf-format-string+ :%sdl)
  (export '%sdl::|C:@EA@SDL-SYSWM-TYPE| :%sdl)
  (export '%sdl::joy-axis-event :%sdl)
  (export '%sdl::+%mm-perm-abca+ :%sdl)
  (export '%sdl::+hint-joystick-hidapi-luna+ :%sdl)
  (export '%sdl::renderer :%sdl)
  (export '%sdl::|C:@EA@SDL-RENDERER-FLAGS| :%sdl)
  (export '%sdl::+pr-ix32+ :%sdl)
  (export '%sdl::interface-protocol :%sdl)
  (export '%sdl::+%mm-perm-dbbb+ :%sdl)
  (export '%sdl::joystick-rumble-triggers :%sdl)
  (export '%sdl::+displayconfig-rotation-identity+ :%sdl)
  (export '%sdl::isalpha :%sdl)
  (export '%sdl::+hint-video-x11-xrandr+ :%sdl)
  (export '%sdl::gl-set-attribute :%sdl)
  (export '%sdl::soft-stretch :%sdl)
  (export '%sdl::atomic-lock :%sdl)
  (export '%sdl::+hint-joystick-rawinput+ :%sdl)
  (export '%sdl::+%mm-perm-abbc+ :%sdl)
  (export '%sdl::+k-scancode-mask+ :%sdl)
  (export '%sdl::dollar-gesture-event :%sdl)
  (export '%sdl::init :%sdl)
  (export '%sdl::+plm-power-request-create+ :%sdl)
  (export '%sdl::hit-test-result :%sdl)
  (export '%sdl::+audio-driver-disk+ :%sdl)
  (export '%sdl::unlock-mutex :%sdl)
  (export '%sdl::game-controller-rumble :%sdl)
  (export '%sdl::+%mm-perm-bbbc+ :%sdl)
  (export '%sdl::show-cursor :%sdl)
  (export '%sdl::powf :%sdl)
  (export '%sdl::+%mm-perm-bcac+ :%sdl)
  (export '%sdl::h :%sdl)
  (export '%sdl::calculate-gamma-ramp :%sdl)
  (export '%sdl::get-window-pixel-format :%sdl)
  (export '%sdl::+%mm-perm-baab+ :%sdl)
  (export '%sdl::+%mm-perm-adcb+ :%sdl)
  (export '%sdl::render-geometry-raw :%sdl)
  (export '%sdl::+%mm-perm-cccd+ :%sdl)
  (export '%sdl::caxis :%sdl)
  (export '%sdl::+win-account-domain-guests-sid+ :%sdl)
  (export '%sdl::+hint-orientations+ :%sdl)
  (export '%sdl::magnitude :%sdl)
  (export '%sdl::+%mm-perm-aabc+ :%sdl)
  (export '%sdl::game-controller-name-for-index :%sdl)
  (export '%sdl::+force-inline+ :%sdl)
  (export '%sdl::+rwops-unknown+ :%sdl)
  (export '%sdl::y :%sdl)
  (export '%sdl::blit :%sdl)
  (export '%sdl::sensor-get-instance-id :%sdl)
  (export '%sdl::guid-to-string :%sdl)
  (export '%sdl::render-clear :%sdl)
  (export '%sdl::+%mm-perm-cabc+ :%sdl)
  (export '%sdl::+%mm-perm-abba+ :%sdl)
  (export '%sdl::load-wav-rw :%sdl)
  (export '%sdl::get-preferred-locales :%sdl)
  (export '%sdl::+pointer-feedback-default+ :%sdl)
  (export '%sdl::hide-window :%sdl)
  (export '%sdl::window-shape-params :%sdl)
  (export '%sdl::+blit-surface+ :%sdl)
  (export '%sdl::render-get-integer-scale :%sdl)
  (export '%sdl::+win-capability-pictures-library-sid+ :%sdl)
  (export '%sdl::render-copy-ex :%sdl)
  (export '%sdl::get-error :%sdl)
  (export '%sdl::game-controller-path :%sdl)
  (export '%sdl::upper-blit :%sdl)
  (export '%sdl::acosf :%sdl)
  (export '%sdl::get-cpu-cache-line-size :%sdl)
  (export '%sdl::+displayconfig-device-info-get-source-name+ :%sdl)
  (export '%sdl::+win-low-label-sid+ :%sdl)
  (export '%sdl::+max-log-message+ :%sdl)
  (export '%sdl::haptic-rumble-init :%sdl)
  (export '%sdl::convert-audio :%sdl)
  (export '%sdl::+hint-window-no-activation-when-shown+ :%sdl)
  (export '%sdl::+win-builtin-replicator-sid+ :%sdl)
  (export '%sdl::+hint-render-opengl-shaders+ :%sdl)
  (export '%sdl::text-editing-ext-event :%sdl)
  (export '%sdl::major :%sdl)
  (export '%sdl::|C:@EA@SDL-TOUCH-DEVICE-TYPE| :%sdl)
  (export '%sdl::render-draw-point-f :%sdl)
  (export '%sdl::game-controller-get-num-touchpads :%sdl)
  (export '%sdl::+hint-allow-alt-tab-while-grabbed+ :%sdl)
  (export '%sdl::+displayconfig-device-info-get-sdr-white-level+
          :%sdl)
  (export '%sdl::audio-callback :%sdl)
  (export '%sdl::+win-service-sid+ :%sdl)
  (export '%sdl::win :%sdl)
  (export '%sdl::game-controller-bind-type :%sdl)
  (export '%sdl::map-rgb :%sdl)
  (export '%sdl::set-render-draw-blend-mode :%sdl)
  (export '%sdl::+monitor-request-reason-full-wake+ :%sdl)
  (export '%sdl::+haptic-leftright+ :%sdl)
  (export '%sdl::set-window-icon :%sdl)
  (export '%sdl::|C:@EA@SDL-LOG-PRIORITY| :%sdl)
  (export '%sdl::right-coeff :%sdl)
  (export '%sdl::+%mm-perm-bdbd+ :%sdl)
  (export '%sdl::+actctx-run-level-numbers+ :%sdl)
  (export '%sdl::+cs-device-notification+ :%sdl)
  (export '%sdl::utf8strlcpy :%sdl)
  (export '%sdl::+%mm-perm-cadc+ :%sdl)
  (export '%sdl::+mutex-timedout+ :%sdl)
  (export '%sdl::+hint-mouse-double-click-time+ :%sdl)
  (export '%sdl::joystick-from-player-index :%sdl)
  (export '%sdl::pixels :%sdl)
  (export '%sdl::+win-capability-private-network-client-server-sid+
          :%sdl)
  (export '%sdl::get-cursor :%sdl)
  (export '%sdl::sqrt :%sdl)
  (export '%sdl::+%mm-perm-aaab+ :%sdl)
  (export '%sdl::get-queued-audio-size :%sdl)
  (export '%sdl::+hint-gamecontroller-use-button-labels+ :%sdl)
  (export '%sdl::render-get-logical-size :%sdl)
  (export '%sdl::+audio-allow-frequency-change+ :%sdl)
  (export '%sdl::get-window-flags :%sdl)
  (export '%sdl::parameters :%sdl)
  (export '%sdl::cond :%sdl)
  (export '%sdl::+%mm-perm-ccba+ :%sdl)
  (export '%sdl::destroy-renderer :%sdl)
  (export '%sdl::has3d-now :%sdl)
  (export '%sdl::+%mm-perm-cdab+ :%sdl)
  (export '%sdl::+rwops-memory-ro+ :%sdl)
  (export '%sdl::itoa :%sdl)
  (export '%sdl::r :%sdl)
  (export '%sdl::get-texture-user-data :%sdl)
  (export '%sdl::load-function :%sdl)
  (export '%sdl::|C:@SA@SDL-ATOMIC-T| :%sdl)
  (export '%sdl::+hint-render-batching+ :%sdl)
  (export '%sdl::alloc-format :%sdl)
  (export '%sdl::audio-stream-clear :%sdl)
  (export '%sdl::drop :%sdl)
  (export '%sdl::data1 :%sdl)
  (export '%sdl::start-text-input :%sdl)
  (export '%sdl::enable-screen-saver :%sdl)
  (export '%sdl::log-set-output-function :%sdl)
  (export '%sdl::ball :%sdl)
  (export '%sdl::hid-set-nonblocking :%sdl)
  (export '%sdl::+hint-bmp-save-legacy-format+ :%sdl)
  (export '%sdl::get-grabbed-window :%sdl)
  (export '%sdl::repeat :%sdl)
  (export '%sdl::unlock-surface :%sdl)
  (export '%sdl::+audio-allow-format-change+ :%sdl)
  (export '%sdl::+%mm-perm-bcba+ :%sdl)
  (export '%sdl::event-type :%sdl)
  (export '%sdl::sem-try-wait :%sdl)
  (export '%sdl::calloc :%sdl)
  (export '%sdl::buttons :%sdl)
  (export '%sdl::has-avx512f :%sdl)
  (export '%sdl::+max-sint32+ :%sdl)
  (export '%sdl::minor :%sdl)
  (export '%sdl::lroundf :%sdl)
  (export '%sdl::file :%sdl)
  (export '%sdl::hid-open-path :%sdl)
  (export '%sdl::get-touch-finger :%sdl)
  (export '%sdl::write-be32 :%sdl)
  (export '%sdl::game-controller-get-player-index :%sdl)
  (export '%sdl::duplicate-surface :%sdl)
  (export '%sdl::+win-builtin-cert-svc-d-com-access-group+ :%sdl)
  (export '%sdl::r-wtell :%sdl)
  (export '%sdl::format :%sdl)
  (export '%sdl::set-window-shape :%sdl)
  (export '%sdl::write-u8 :%sdl)
  (export '%sdl::+hint-windows-intresource-icon+ :%sdl)
  (export '%sdl::+win-account-administrator-sid+ :%sdl)
  (export '%sdl::%sdl-sensor :%sdl)
  (export '%sdl::union-rect :%sdl)
  (export '%sdl::f-rect :%sdl)
  (export '%sdl::trunc :%sdl)
  (export '%sdl::strtoull :%sdl)
  (export '%sdl::+win-account-cert-admins-sid+ :%sdl)
  (export '%sdl::+displayconfig-device-info-get-target-base-type+
          :%sdl)
  (export '%sdl::renderer-info :%sdl)
  (export '%sdl::+displayconfig-pixelformat-8bpp+ :%sdl)
  (export '%sdl::atomic-get :%sdl)
  (export '%sdl::+windowpos-centered+ :%sdl)
  (export '%sdl::log :%sdl)
  (export '%sdl::haptic-constant :%sdl)
  (export '%sdl::+%mm-perm-bdca+ :%sdl)
  (export '%sdl::+win-creator-owner-rights-sid+ :%sdl)
  (export '%sdl::+%mm-perm-ddac+ :%sdl)
  (export '%sdl::gl-create-context :%sdl)
  (export '%sdl::joystick-get-firmware-version :%sdl)
  (export '%sdl::bloss :%sdl)
  (export '%sdl::+audio-allow-channels-change+ :%sdl)
  (export '%sdl::mem :%sdl)
  (export '%sdl::+%mm-perm-abbb+ :%sdl)
  (export '%sdl::dxgi-get-output-info :%sdl)
  (export '%sdl::get-event-filter :%sdl)
  (export '%sdl::+max-sint64+ :%sdl)
  (export '%sdl::+hint-preferred-locales+ :%sdl)
  (export '%sdl::atomic-try-lock :%sdl)
  (export '%sdl::+%mm-perm-abcc+ :%sdl)
  (export '%sdl::+mix-maxvolume+ :%sdl)
  (export '%sdl::+%mm-perm-acdd+ :%sdl)
  (export '%sdl::+video-opengl-egl+ :%sdl)
  (export '%sdl::+win-builtin-domain-sid+ :%sdl)
  (export '%sdl::flash-window :%sdl)
  (export '%sdl::game-controller-get-string-for-axis :%sdl)
  (export '%sdl::+%mm-perm-aadd+ :%sdl)
  (export '%sdl::is-screen-keyboard-shown :%sdl)
  (export '%sdl::power-state :%sdl)
  (export '%sdl::strcasecmp :%sdl)
  (export '%sdl::get-rgba :%sdl)
  (export '%sdl::locale :%sdl)
  (export '%sdl::+monitor-capabilities+ :%sdl)
  (export '%sdl::+%mm-perm-bbdc+ :%sdl)
  (export '%sdl::haptic-custom :%sdl)
  (export '%sdl::user :%sdl)
  (export '%sdl::+displayconfig-pixelformat-nongdi+ :%sdl)
  (export '%sdl::+hint-render-driver+ :%sdl)
  (export '%sdl::game-controller-get-joystick :%sdl)
  (export '%sdl::joystick-attach-virtual :%sdl)
  (export '%sdl::+win-this-organization-sid+ :%sdl)
  (export '%sdl::render-present :%sdl)
  (export '%sdl::+%mm-perm-dcda+ :%sdl)
  (export '%sdl::+win-builtin-event-log-readers-group+ :%sdl)
  (export '%sdl::+%mm-perm-bdad+ :%sdl)
  (export '%sdl::delay :%sdl)
  (export '%sdl::texture :%sdl)
  (export '%sdl::gl-get-current-window :%sdl)
  (export '%sdl::+hint-trackpad-is-touch-only+ :%sdl)
  (export '%sdl::g-lcontext-release-flag :%sdl)
  (export '%sdl::+set-shutdown-selected-time+ :%sdl)
  (export '%sdl::+%mm-perm-addb+ :%sdl)
  (export '%sdl::haptic-rumble-stop :%sdl)
  (export '%sdl::fill-rects :%sdl)
  (export '%sdl::render-fill-rects-f :%sdl)
  (export '%sdl::game-controller-set-led :%sdl)
  (export '%sdl::fade-length :%sdl)
  (export '%sdl::log-message :%sdl)
  (export '%sdl::has-screen-keyboard-support :%sdl)
  (export '%sdl::rw-from-mem :%sdl)
  (export '%sdl::|C:@EA@SDL-POWER-STATE| :%sdl)
  (export '%sdl::+win-account-controllers-sid+ :%sdl)
  (export '%sdl::audio-stream :%sdl)
  (export '%sdl::memory-barrier-acquire-function :%sdl)
  (export '%sdl::sem-post :%sdl)
  (export '%sdl::+power-information-level-unused0+ :%sdl)
  (export '%sdl::+video-opengl+ :%sdl)
  (export '%sdl::gl-swap-window :%sdl)
  (export '%sdl::hint-callback :%sdl)
  (export '%sdl::joystick-num-hats :%sdl)
  (export '%sdl::set-texture-color-mod :%sdl)
  (export '%sdl::+hint-auto-update-joysticks+ :%sdl)
  (export '%sdl::render-draw-points-f :%sdl)
  (export '%sdl::touch-id :%sdl)
  (export '%sdl::+video-driver-windows+ :%sdl)
  (export '%sdl::+system-power-state-logging+ :%sdl)
  (export '%sdl::has-event :%sdl)
  (export '%sdl::hid-device- :%sdl)
  (export '%sdl::|C:@EA@SDL-MOUSE-WHEEL-DIRECTION| :%sdl)
  (export '%sdl::+displayconfig-output-technology-component-video+
          :%sdl)
  (export '%sdl::+monitor-request-reason-unknown+ :%sdl)
  (export '%sdl::padding1 :%sdl)
  (export '%sdl::+power-request-create+ :%sdl)
  (export '%sdl::+%mm-perm-bacc+ :%sdl)
  (export '%sdl::+%mm-perm-acba+ :%sdl)
  (export '%sdl::dst-format :%sdl)
  (export '%sdl::+init-joystick+ :%sdl)
  (export '%sdl::+haptic-autocenter+ :%sdl)
  (export '%sdl::blit-map :%sdl)
  (export '%sdl::get-num-touch-devices :%sdl)
  (export '%sdl::free-wav :%sdl)
  (export '%sdl::joystick-get-device-product :%sdl)
  (export '%sdl::set-windows-message-hook :%sdl)
  (export '%sdl::bytes-per-pixel :%sdl)
  (export '%sdl::+hint-video-win-d3dcompiler+ :%sdl)
  (export '%sdl::+iphone-max-gforce+ :%sdl)
  (export '%sdl::+idle-resiliency+ :%sdl)
  (export '%sdl::+rwops-jnifile+ :%sdl)
  (export '%sdl::+user-unknown+ :%sdl)
  (export '%sdl::button :%sdl)
  (export '%sdl::+%mm-perm-cdca+ :%sdl)
  (export '%sdl::iconv-t :%sdl)
  (export '%sdl::touch-finger-event :%sdl)
  (export '%sdl::read-le16 :%sdl)
  (export '%sdl::stop :%sdl)
  (export '%sdl::+video-render-ogl-es2+ :%sdl)
  (export '%sdl::vsscanf :%sdl)
  (export '%sdl::+hint-mouse-normal-speed-scale+ :%sdl)
  (export '%sdl::+monitor-request-reason-sc-monitorpower+ :%sdl)
  (export '%sdl::get-audio-device-name :%sdl)
  (export '%sdl::+%mm-perm-cbdc+ :%sdl)
  (export '%sdl::free-format :%sdl)
  (export '%sdl::reset-hint :%sdl)
  (export '%sdl::+last-wake-time+ :%sdl)
  (export '%sdl::+win-account-computers-sid+ :%sdl)
  (export '%sdl::metal-get-layer :%sdl)
  (export '%sdl::set-led :%sdl)
  (export '%sdl::+thread-windows+ :%sdl)
  (export '%sdl::+pr-iu64+ :%sdl)
  (export '%sdl::+hat-leftdown+ :%sdl)
  (export '%sdl::strlcat :%sdl)
  (export '%sdl::+monitor-request-reason-set-thread-execution-state+
          :%sdl)
  (export '%sdl::truncf :%sdl)
  (export '%sdl::wparam :%sdl)
  (export '%sdl::+hint-poll-sentinel+ :%sdl)
  (export '%sdl::+%mm-perm-bcda+ :%sdl)
  (export '%sdl::has-rdtsc :%sdl)
  (export '%sdl::haptic-num-effects :%sdl)
  (export '%sdl::strlwr :%sdl)
  (export '%sdl::get-shaped-window-mode :%sdl)
  (export '%sdl::+alpha-transparent+ :%sdl)
  (export '%sdl::+joystick-xinput+ :%sdl)
  (export '%sdl::destroy-texture :%sdl)
  (export '%sdl::+hint-idle-timer-disabled+ :%sdl)
  (export '%sdl::+haptic-damper+ :%sdl)
  (export '%sdl::get-original-memory-functions :%sdl)
  (export '%sdl::game-controller-get-type :%sdl)
  (export '%sdl::render-get-window :%sdl)
  (export '%sdl::+hint-gamecontroller-ignore-devices+ :%sdl)
  (export '%sdl::game-controller-num-mappings :%sdl)
  (export '%sdl::+win-authentication-key-trust-sid+ :%sdl)
  (export '%sdl::joystick-get-device-product-version :%sdl)
  (export '%sdl::intersect-rect :%sdl)
  (export '%sdl::haptic-pause :%sdl)
  (export '%sdl::game-controller-get-product-version :%sdl)
  (export '%sdl::+%mm-perm-dbcd+ :%sdl)
  (export '%sdl::+video-render-ogl+ :%sdl)
  (export '%sdl::+win-creator-owner-sid+ :%sdl)
  (export '%sdl::clear-error :%sdl)
  (export '%sdl::gl-set-swap-interval :%sdl)
  (export '%sdl::lock-mutex :%sdl)
  (export '%sdl::get-window-brightness :%sdl)
  (export '%sdl::quit :%sdl)
  (export '%sdl::+window-lacks-shape+ :%sdl)
  (export '%sdl::+%mm-perm-babd+ :%sdl)
  (export '%sdl::+hint-winrt-privacy-policy-label+ :%sdl)
  (export '%sdl::|C:@EA@SDL-PIXEL-TYPE| :%sdl)
  (export '%sdl::+%mm-perm-ddca+ :%sdl)
  (export '%sdl::+displayconfig-device-info-get-advanced-color-info+
          :%sdl)
  (export '%sdl::is-text-input-active :%sdl)
  (export '%sdl::+%mm-perm-bacd+ :%sdl)
  (export '%sdl::+hint-joystick-hidapi-ps5-player-led+ :%sdl)
  (export '%sdl::+win-account-key-admins-sid+ :%sdl)
  (export '%sdl::atomic-unlock :%sdl)
  (export '%sdl::|C:@EA@SDL-MESSAGE-BOX-BUTTON-FLAGS| :%sdl)
  (export '%sdl::ltoa :%sdl)
  (export '%sdl::get-clipboard-text :%sdl)
  (export '%sdl::create-rgb-surface-from :%sdl)
  (export '%sdl::+init-noparachute+ :%sdl)
  (export '%sdl::+%mm-perm-abdd+ :%sdl)
  (export '%sdl::+%mm-perm-ccca+ :%sdl)
  (export '%sdl::+system-battery-state+ :%sdl)
  (export '%sdl::+%mm-perm-bddb+ :%sdl)
  (export '%sdl::has-sse41 :%sdl)
  (export '%sdl::+joystick-virtual+ :%sdl)
  (export '%sdl::+actctx-run-level-unspecified+ :%sdl)
  (export '%sdl::+session-lock-state+ :%sdl)
  (export '%sdl::masks-to-pixel-format-enum :%sdl)
  (export '%sdl::joystick-name :%sdl)
  (export '%sdl::+system-power-state-notify-handler+ :%sdl)
  (export '%sdl::+win-builtin-account-operators-sid+ :%sdl)
  (export '%sdl::cond-wait :%sdl)
  (export '%sdl::game-controller-get-apple-sf-symbols-name-for-button
          :%sdl)
  (export '%sdl::+hint-xinput-use-old-joystick-mapping+ :%sdl)
  (export '%sdl::+win-builtin-hyper-v-admins-sid+ :%sdl)
  (export '%sdl::+%mm-perm-cbab+ :%sdl)
  (export '%sdl::title :%sdl)
  (export '%sdl::edit-ext :%sdl)
  (export '%sdl::|C:@EA@SDL-RENDERER-FLIP| :%sdl)
  (export '%sdl::+audio-driver-dummy+ :%sdl)
  (export '%sdl::+displayconfig-output-technology-indirect-wired+
          :%sdl)
  (export '%sdl::texture-modulate :%sdl)
  (export '%sdl::+hint-winrt-privacy-policy-url+ :%sdl)
  (export '%sdl::get-num-audio-devices :%sdl)
  (export '%sdl::+pr-ix64+ :%sdl)
  (export '%sdl::+%mm-perm-acdc+ :%sdl)
  (export '%sdl::sint32 :%sdl)
  (export '%sdl::rect :%sdl)
  (export '%sdl::|C:@EA@SDL-BOOL| :%sdl)
  (export '%sdl::haptic-effect :%sdl)
  (export '%sdl::constant :%sdl)
  (export '%sdl::get-texture-blend-mode :%sdl)
  (export '%sdl::+%mm-perm-acaa+ :%sdl)
  (export '%sdl::next :%sdl)
  (export '%sdl::jbattery :%sdl)
  (export '%sdl::tls-cleanup :%sdl)
  (export '%sdl::+wake-timer-list+ :%sdl)
  (export '%sdl::+init-audio+ :%sdl)
  (export '%sdl::bshift :%sdl)
  (export '%sdl::set-window-always-on-top :%sdl)
  (export '%sdl::atan2f :%sdl)
  (export '%sdl::+hint-android-block-on-pause-pauseaudio+ :%sdl)
  (export '%sdl::+video-opengl-wgl+ :%sdl)
  (export '%sdl::+hint-windows-intresource-icon-small+ :%sdl)
  (export '%sdl::+win-system-label-sid+ :%sdl)
  (export '%sdl::+%mm-perm-cbbb+ :%sdl)
  (export '%sdl::path :%sdl)
  (export '%sdl::get-revision :%sdl)
  (export '%sdl::show-window :%sdl)
  (export '%sdl::semaphore :%sdl)
  (export '%sdl::+hint-video-foreign-window-opengl+ :%sdl)
  (export '%sdl::version :%sdl)
  (export '%sdl::on-application-did-become-active :%sdl)
  (export '%sdl::naxes :%sdl)
  (export '%sdl::+%mm-perm-dacd+ :%sdl)
  (export '%sdl::set-yuv-conversion-mode :%sdl)
  (export '%sdl::get-num-touch-fingers :%sdl)
  (export '%sdl::+windowpos-centered-mask+ :%sdl)
  (export '%sdl::memory-barrier-release-function :%sdl)
  (export '%sdl::create-window :%sdl)
  (export '%sdl::+haptic-cartesian+ :%sdl)
  (export '%sdl::set-player-index :%sdl)
  (export '%sdl::+hint-joystick-allow-background-events+ :%sdl)
  (export '%sdl::freq :%sdl)
  (export '%sdl::+displayconfig-output-technology-udi-external+
          :%sdl)
  (export '%sdl::set-clip-rect :%sdl)
  (export '%sdl::lock-surface :%sdl)
  (export '%sdl::|C:@EA@SDL-BLEND-FACTOR| :%sdl)
  (export '%sdl::alloc-palette :%sdl)
  (export '%sdl::+displayconfig-scaling-aspectratiocenteredmax+
          :%sdl)
  (export '%sdl::mgesture :%sdl)
  (export '%sdl::state :%sdl)
  (export '%sdl::+%mm-mant-norm-1-2+ :%sdl)
  (export '%sdl::unlock-joysticks :%sdl)
  (export '%sdl::joystick-current-power-level :%sdl)
  (export '%sdl::+win-account-krbtgt-sid+ :%sdl)
  (export '%sdl::joy-button-event :%sdl)
  (export '%sdl::isxdigit :%sdl)
  (export '%sdl::+%mm-perm-bbcb+ :%sdl)
  (export '%sdl::pixel-format-enum :%sdl)
  (export '%sdl::audio-stream-put :%sdl)
  (export '%sdl::get-num-render-drivers :%sdl)
  (export '%sdl::+hint-joystick-hidapi-steam+ :%sdl)
  (export '%sdl::padding2 :%sdl)
  (export '%sdl::%sdl-iconv-t :%sdl)
  (export '%sdl::haptic-get-effect-status :%sdl)
  (export '%sdl::render-draw-lines :%sdl)
  (export '%sdl::set-window-brightness :%sdl)
  (export '%sdl::strcmp :%sdl)
  (export '%sdl::+hint-thread-stack-size+ :%sdl)
  (export '%sdl::+%mm-perm-ddda+ :%sdl)
  (export '%sdl::tls-create :%sdl)
  (export '%sdl::len-cvt :%sdl)
  (export '%sdl::render-set-scale :%sdl)
  (export '%sdl::usage :%sdl)
  (export '%sdl::+trace-application-power-message+ :%sdl)
  (export '%sdl::+verify-processor-power-policy-dc+ :%sdl)
  (export '%sdl::has-sse42 :%sdl)
  (export '%sdl::size-t :%sdl)
  (export '%sdl::+hint-mouse-touch-events+ :%sdl)
  (export '%sdl::+haptic-polar+ :%sdl)
  (export '%sdl::joystick-get-product :%sdl)
  (export '%sdl::get-render-draw-color :%sdl)
  (export '%sdl::+win-account-readonly-controllers-sid+ :%sdl)
  (export '%sdl::haptic-query :%sdl)
  (export '%sdl::render-draw-line-f :%sdl)
  (export '%sdl::event-state :%sdl)
  (export '%sdl::+hint-video-allow-screensaver+ :%sdl)
  (export '%sdl::+%mm-perm-caba+ :%sdl)
  (export '%sdl::+displayconfig-output-technology-displayport-embedded+
          :%sdl)
  (export '%sdl::rw-from-file :%sdl)
  (export '%sdl::+hint-no-signal-handlers+ :%sdl)
  (export '%sdl::joystick-has-led :%sdl)
  (export '%sdl::save-dollar-template :%sdl)
  (export '%sdl::has-surface-rle :%sdl)
  (export '%sdl::+haptic-sawtoothdown+ :%sdl)
  (export '%sdl::iconv :%sdl)
  (export '%sdl::|C:@EA@SDL-WINDOW-EVENT-ID| :%sdl)
  (export '%sdl::wcsncmp :%sdl)
  (export '%sdl::+win-account-protected-users-sid+ :%sdl)
  (export '%sdl::+%mm-perm-dbdd+ :%sdl)
  (export '%sdl::set-window-bordered :%sdl)
  (export '%sdl::get-key-name :%sdl)
  (export '%sdl::set-texture-scale-mode :%sdl)
  (export '%sdl::button-mask :%sdl)
  (export '%sdl::haptic-rumble-play :%sdl)
  (export '%sdl::atoi :%sdl)
  (export '%sdl::close-audio :%sdl)
  (export '%sdl::+hint-joystick-rawinput-correlate-xinput+ :%sdl)
  (export '%sdl::hinstance :%sdl)
  (export '%sdl::+hint-window-frame-usable-while-cursor-hidden+
          :%sdl)
  (export '%sdl::+max-uint16+ :%sdl)
  (export '%sdl::assert-data :%sdl)
  (export '%sdl::+%mm-perm-bdcc+ :%sdl)
  (export '%sdl::get-keyboard-state :%sdl)
  (export '%sdl::load-file-rw :%sdl)
  (export '%sdl::rloss :%sdl)
  (export '%sdl::+%mm-perm-bdda+ :%sdl)
  (export '%sdl::+standard-gravity+ :%sdl)
  (export '%sdl::sensor-get-data :%sdl)
  (export '%sdl::render-draw-rect-f :%sdl)
  (export '%sdl::+hint-app-name+ :%sdl)
  (export '%sdl::user-event :%sdl)
  (export '%sdl::save-bmp-rw :%sdl)
  (export '%sdl::+win-non-cacheable-principals-group-sid+ :%sdl)
  (export '%sdl::game-controller-mapping :%sdl)
  (export '%sdl::+win-account-schema-admins-sid+ :%sdl)
  (export '%sdl::log-reset-priorities :%sdl)
  (export '%sdl::wcscmp :%sdl)
  (export '%sdl::strncmp :%sdl)
  (export '%sdl::+hint-screensaver-inhibit-activity-name+ :%sdl)
  (export '%sdl::+hint-grab-keyboard+ :%sdl)
  (export '%sdl::message-box-color :%sdl)
  (export '%sdl::jball :%sdl)
  (export '%sdl::set-hint :%sdl)
  (export '%sdl::+win-other-organization-sid+ :%sdl)
  (export '%sdl::cosf :%sdl)
  (export '%sdl::sensor-id :%sdl)
  (export '%sdl::+%mm-perm-ccbc+ :%sdl)
  (export '%sdl::realloc :%sdl)
  (export '%sdl::+win-capability-removable-storage-sid+ :%sdl)
  (export '%sdl::joystick-set-virtual-hat :%sdl)
  (export '%sdl::|C:@EA@SDL-FLASH-OPERATION| :%sdl)
  (export '%sdl::+displayconfig-scaling-centered+ :%sdl)
  (export '%sdl::game-controller-path-for-index :%sdl)
  (export '%sdl::+win-capability-documents-library-sid+ :%sdl)
  (export '%sdl::hid-get-feature-report :%sdl)
  (export '%sdl::usage-page :%sdl)
  (export '%sdl::+min-uint64+ :%sdl)
  (export '%sdl::set-memory-functions :%sdl)
  (export '%sdl::joystick-is-virtual :%sdl)
  (export '%sdl::get-default-assertion-handler :%sdl)
  (export '%sdl::unlock-audio :%sdl)
  (export '%sdl::sin :%sdl)
  (export '%sdl::+video-opengl-es2+ :%sdl)
  (export '%sdl::buf :%sdl)
  (export '%sdl::joystick-get-vendor :%sdl)
  (export '%sdl::+%mm-perm-dbaa+ :%sdl)
  (export '%sdl::game-controller-get-button :%sdl)
  (export '%sdl::isupper :%sdl)
  (export '%sdl::get-surface-blend-mode :%sdl)
  (export '%sdl::game-controller-get-attached :%sdl)
  (export '%sdl::+minor-version+ :%sdl)
  (export '%sdl::+%mm-perm-caad+ :%sdl)
  (export '%sdl::isgraph :%sdl)
  (export '%sdl::has-avx2 :%sdl)
  (export '%sdl::+%mm-perm-bcdd+ :%sdl)
  (export '%sdl::+%mm-perm-cdad+ :%sdl)
  (export '%sdl::keycode :%sdl)
  (export '%sdl::bits-per-pixel :%sdl)
  (export '%sdl::haptic-stop-all :%sdl)
  (export '%sdl::hid-exit :%sdl)
  (export '%sdl::is-screen-saver-enabled :%sdl)
  (export '%sdl::refresh-rate :%sdl)
  (export '%sdl::tanf :%sdl)
  (export '%sdl::+%mm-perm-babb+ :%sdl)
  (export '%sdl::channels :%sdl)
  (export '%sdl::atomic-set-ptr :%sdl)
  (export '%sdl::set-render-draw-color :%sdl)
  (export '%sdl::+win-builtin-print-operators-sid+ :%sdl)
  (export '%sdl::+hint-joystick-hidapi-combine-joy-cons+ :%sdl)
  (export '%sdl::+iconv-e2big+ :%sdl)
  (export '%sdl::get-desktop-display-mode :%sdl)
  (export '%sdl::joystick-id :%sdl)
  (export '%sdl::+min-sint32+ :%sdl)
  (export '%sdl::edit :%sdl)
  (export '%sdl::get-window-title :%sdl)
  (export '%sdl::which :%sdl)
  (export '%sdl::strchr :%sdl)
  (export '%sdl::r-wclose :%sdl)
  (export '%sdl::message-box-button-flags :%sdl)
  (export '%sdl::read-le32 :%sdl)
  (export '%sdl::+processor-power-policy-dc+ :%sdl)
  (export '%sdl::joystick-from-instance-id :%sdl)
  (export '%sdl::del-event-watch :%sdl)
  (export '%sdl::+file+ :%sdl)
  (export '%sdl::+line+ :%sdl)
  (export '%sdl::write-be64 :%sdl)
  (export '%sdl::hid-device-info :%sdl)
  (export '%sdl::render-draw-line :%sdl)
  (export '%sdl::+%mm-perm-dbab+ :%sdl)
  (export '%sdl::+%mm-cmpint-lt+ :%sdl)
  (export '%sdl::convert-surface :%sdl)
  (export '%sdl::register-app :%sdl)
  (export '%sdl::+system-hiberboot-state+ :%sdl)
  (export '%sdl::get-clip-rect :%sdl)
  (export '%sdl::+win-capability-shared-user-certificates-sid+ :%sdl)
  (export '%sdl::get-mod-state :%sdl)
  (export '%sdl::+audio-mask-bitsize+ :%sdl)
  (export '%sdl::asinf :%sdl)
  (export '%sdl::get-power-info :%sdl)
  (export '%sdl::get-mouse-state :%sdl)
  (export '%sdl::+%mm-perm-ddbd+ :%sdl)
  (export '%sdl::+platform-role+ :%sdl)
  (export '%sdl::|C:@EA@SDL-MESSAGE-BOX-COLOR-TYPE| :%sdl)
  (export '%sdl::+displayconfig-device-info-get-target-name+ :%sdl)
  (export '%sdl::hid-read-timeout :%sdl)
  (export '%sdl::max-texture-width :%sdl)
  (export '%sdl::+nonshapeable-window+ :%sdl)
  (export '%sdl::joystick-get-attached :%sdl)
  (export '%sdl::data2 :%sdl)
  (export '%sdl::+hint-video-wayland-allow-libdecor+ :%sdl)
  (export '%sdl::+win-restricted-code-sid+ :%sdl)
  (export '%sdl::color :%sdl)
  (export '%sdl::hid-get-serial-number-string :%sdl)
  (export '%sdl::+audio-mask-endian+ :%sdl)
  (export '%sdl::d-theta :%sdl)
  (export '%sdl::+%mm-perm-dacb+ :%sdl)
  (export '%sdl::dgesture :%sdl)
  (export '%sdl::+%mm-perm-dddd+ :%sdl)
  (export '%sdl::event-filter :%sdl)
  (export '%sdl::+win-builtin-system-operators-sid+ :%sdl)
  (export '%sdl::+displayconfig-scaling-identity+ :%sdl)
  (export '%sdl::game-controller-get-apple-sf-symbols-name-for-axis
          :%sdl)
  (export '%sdl::+button-right+ :%sdl)
  (export '%sdl::ncolors :%sdl)
  (export '%sdl::+win-capability-internet-client-server-sid+ :%sdl)
  (export '%sdl::fill-rect :%sdl)
  (export '%sdl::+hat-left+ :%sdl)
  (export '%sdl::+%mm-perm-caac+ :%sdl)
  (export '%sdl::ashift :%sdl)
  (export '%sdl::render-fill-rect :%sdl)
  (export '%sdl::joystick-path :%sdl)
  (export '%sdl::|C:@EA@SDL-G-LCONTEXT-FLAG| :%sdl)
  (export '%sdl::windowsio :%sdl)
  (export '%sdl::get-window-borders-size :%sdl)
  (export '%sdl::set-window-grab :%sdl)
  (export '%sdl::+system-power-information+ :%sdl)
  (export '%sdl::vsnprintf :%sdl)
  (export '%sdl::mutex :%sdl)
  (export '%sdl::asprintf :%sdl)
  (export '%sdl::common :%sdl)
  (export '%sdl::+win-i-user-sid+ :%sdl)
  (export '%sdl::hdc-- :%sdl)
  (export '%sdl::create-thread-with-stack-size :%sdl)
  (export '%sdl::get-performance-counter :%sdl)
  (export '%sdl::keymod :%sdl)
  (export '%sdl::assert-state :%sdl)
  (export '%sdl::wcscasecmp :%sdl)
  (export '%sdl::+displayconfig-scanline-ordering-force-uint32+
          :%sdl)
  (export '%sdl::lock-sensors :%sdl)
  (export '%sdl::warp-mouse-in-window :%sdl)
  (export '%sdl::|C:@EA@SDL-G-LCONTEXT-RELEASE-FLAG| :%sdl)
  (export '%sdl::strdup :%sdl)
  (export '%sdl::+%mm-perm-cdaa+ :%sdl)
  (export '%sdl::+video-driver-dummy+ :%sdl)
  (export '%sdl::haptic-periodic :%sdl)
  (export '%sdl::+%mm-perm-dcab+ :%sdl)
  (export '%sdl::add-event-watch :%sdl)
  (export '%sdl::get-texture-alpha-mod :%sdl)
  (export '%sdl::game-controller-get-bind-for-button :%sdl)
  (export '%sdl::+hint-opengl-es-driver+ :%sdl)
  (export '%sdl::+hint-video-x11-net-wm-ping+ :%sdl)
  (export '%sdl::+win-capability-videos-library-sid+ :%sdl)
  (export '%sdl::+hint-ime-internal-editing+ :%sdl)
  (export '%sdl::+win-account-enterprise-key-admins-sid+ :%sdl)
  (export '%sdl::+%mm-perm-bcaa+ :%sdl)
  (export '%sdl::+%mm-perm-ddbc+ :%sdl)
  (export '%sdl::intersect-rect-and-line :%sdl)
  (export '%sdl::custom :%sdl)
  (export '%sdl::+%mm-perm-adbd+ :%sdl)
  (export '%sdl::create-window-and-renderer :%sdl)
  (export '%sdl::+pointer-feedback-none+ :%sdl)
  (export '%sdl::render-get-viewport :%sdl)
  (export '%sdl::+%mm-perm-dadc+ :%sdl)
  (export '%sdl::+%mm-perm-cbdb+ :%sdl)
  (export '%sdl::render-draw-rects :%sdl)
  (export '%sdl::create-texture-from-surface :%sdl)
  (export '%sdl::strrev :%sdl)
  (export '%sdl::+endthread+ :%sdl)
  (export '%sdl::game-controller-get-axis :%sdl)
  (export '%sdl::+processor-load+ :%sdl)
  (export '%sdl::+%mm-perm-dcbb+ :%sdl)
  (export '%sdl::+monitor-request-reason-user-display-burst+ :%sdl)
  (export '%sdl::joystick-get-axis-initial-state :%sdl)
  (export '%sdl::dx :%sdl)
  (export '%sdl::+actctx-compatibility-element-type-os+ :%sdl)
  (export '%sdl::+%mm-perm-ccac+ :%sdl)
  (export '%sdl::set-window-minimum-size :%sdl)
  (export '%sdl::+%mm-perm-bcad+ :%sdl)
  (export '%sdl::+iconv-eilseq+ :%sdl)
  (export '%sdl::+%mm-perm-bcab+ :%sdl)
  (export '%sdl::gl-reset-attributes :%sdl)
  (export '%sdl::set-window-position :%sdl)
  (export '%sdl::+%mm-mant-norm-p5-1+ :%sdl)
  (export '%sdl::warp-mouse-global :%sdl)
  (export '%sdl::get-hint :%sdl)
  (export '%sdl::+%mm-perm-bdbb+ :%sdl)
  (export '%sdl::create-renderer :%sdl)
  (export '%sdl::open-audio-device :%sdl)
  (export '%sdl::+hat-leftup+ :%sdl)
  (export '%sdl::+%mm-perm-aaba+ :%sdl)
  (export '%sdl::has-mmx :%sdl)
  (export '%sdl::samples :%sdl)
  (export '%sdl::joystick-get-type :%sdl)
  (export '%sdl::+%mm-perm-cdba+ :%sdl)
  (export '%sdl::get-num-video-displays :%sdl)
  (export '%sdl::register-events :%sdl)
  (export '%sdl::pump-events :%sdl)
  (export '%sdl::haptic-set-autocenter :%sdl)
  (export '%sdl::+flt-epsilon+ :%sdl)
  (export '%sdl::+hint-quit-on-last-window-close+ :%sdl)
  (export '%sdl::|C:@EA@SDL-GL-CONTEXT-RESET-NOTIFICATION| :%sdl)
  (export '%sdl::direction :%sdl)
  (export '%sdl::floorf :%sdl)
  (export '%sdl::position :%sdl)
  (export '%sdl::compose-custom-blend-mode :%sdl)
  (export '%sdl::game-controller :%sdl)
  (export '%sdl::ulltoa :%sdl)
  (export '%sdl::queue-audio :%sdl)
  (export '%sdl::hinstance-- :%sdl)
  (export '%sdl::+%mm-perm-aabb+ :%sdl)
  (export '%sdl::driverdata :%sdl)
  (export '%sdl::wcslen :%sdl)
  (export '%sdl::unload-object :%sdl)
  (export '%sdl::+%mm-perm-ccab+ :%sdl)
  (export '%sdl::+displayconfig-topology-force-uint32+ :%sdl)
  (export '%sdl::game-controller-get-bind-for-axis :%sdl)
  (export '%sdl::+haptic-ramp+ :%sdl)
  (export '%sdl::render-draw-rects-f :%sdl)
  (export '%sdl::|C:@S@SDL-SYS-W-MINFO@U@SDL-SYSWM.H@5897| :%sdl)
  (export '%sdl::render-set-viewport :%sdl)
  (export '%sdl::|C:@EA@SDL-ARRAY-ORDER| :%sdl)
  (export '%sdl::sint16 :%sdl)
  (export '%sdl::+%mm-perm-abcb+ :%sdl)
  (export '%sdl::filename :%sdl)
  (export '%sdl::+hint-qtwayland-window-flags+ :%sdl)
  (export '%sdl::+%mm-perm-ddcb+ :%sdl)
  (export '%sdl::+%mm-perm-cddb+ :%sdl)
  (export '%sdl::get-point-display-index :%sdl)
  (export '%sdl::+%mm-perm-acca+ :%sdl)
  (export '%sdl::+%mm-perm-bbba+ :%sdl)
  (export '%sdl::create-rgb-surface-with-format :%sdl)
  (export '%sdl::+ignore+ :%sdl)
  (export '%sdl::renderer-flags :%sdl)
  (export '%sdl::+hint-event-logging+ :%sdl)
  (export '%sdl::atof :%sdl)
  (export '%sdl::+init-video+ :%sdl)
  (export '%sdl::+displayconfig-output-technology-udi-embedded+
          :%sdl)
  (export '%sdl::crc16 :%sdl)
  (export '%sdl::+rw-seek-set+ :%sdl)
  (export '%sdl::+win-account-guest-sid+ :%sdl)
  (export '%sdl::num-joysticks :%sdl)
  (export '%sdl::+hint-video-wayland-prefer-libdecor+ :%sdl)
  (export '%sdl::set-render-target :%sdl)
  (export '%sdl::r-wseek :%sdl)
  (export '%sdl::binarization-cutoff :%sdl)
  (export '%sdl::detach-thread :%sdl)
  (export '%sdl::get-rect-display-index :%sdl)
  (export '%sdl::+%mm-perm-bbcd+ :%sdl)
  (export '%sdl::+displayconfig-scaling-force-uint32+ :%sdl)
  (export '%sdl::wait-event :%sdl)
  (export '%sdl::log-category :%sdl)
  (export '%sdl::gl-context-reset-notification :%sdl)
  (export '%sdl::has-events :%sdl)
  (export '%sdl::+actctx-compatibility-element-type-mitigation+
          :%sdl)
  (export '%sdl::start :%sdl)
  (export '%sdl::read-be32 :%sdl)
  (export '%sdl::+%mm-perm-bdbc+ :%sdl)
  (export '%sdl::haptic-direction :%sdl)
  (export '%sdl::+%mm-perm-bdab+ :%sdl)
  (export '%sdl::+%mm-perm-bdba+ :%sdl)
  (export '%sdl::get-window-opacity :%sdl)
  (export '%sdl::lock-audio :%sdl)
  (export '%sdl::+haptic-sawtoothup+ :%sdl)
  (export '%sdl::+%mm-perm-badb+ :%sdl)
  (export '%sdl::hit-test :%sdl)
  (export '%sdl::window-shape-mode :%sdl)
  (export '%sdl::hint-priority :%sdl)
  (export '%sdl::+init-events+ :%sdl)
  (export '%sdl::write-le64 :%sdl)
  (export '%sdl::+iconv-einval+ :%sdl)
  (export '%sdl::sys-w-minfo :%sdl)
  (export '%sdl::|C:@S@SDL-SYS-W-MINFO@U@SDL-SYSWM.H@5897@S@SDL-SYSWM.H@5955|
          :%sdl)
  (export '%sdl::linenum :%sdl)
  (export '%sdl::+system-power-state-handler+ :%sdl)
  (export '%sdl::set-window-input-focus :%sdl)
  (export '%sdl::+displayconfig-topology-clone+ :%sdl)
  (export '%sdl::joystick-guid :%sdl)
  (export '%sdl::get-num-video-drivers :%sdl)
  (export '%sdl::haptic-update-effect :%sdl)
  (export '%sdl::joystick-set-virtual-axis :%sdl)
  (export '%sdl::+monitor-invocation+ :%sdl)
  (export '%sdl::+power-request-action+ :%sdl)
  (export '%sdl::+actctx-run-level-highest-available+ :%sdl)
  (export '%sdl::+haptic-constant+ :%sdl)
  (export '%sdl::+%mm-perm-ccdd+ :%sdl)
  (export '%sdl::color-key :%sdl)
  (export '%sdl::+init-everything+ :%sdl)
  (export '%sdl::small-magnitude :%sdl)
  (export '%sdl::haptic-close :%sdl)
  (export '%sdl::create-color-cursor :%sdl)
  (export '%sdl::joystick-get-player-index :%sdl)
  (export '%sdl::set-hint-with-priority :%sdl)
  (export '%sdl::+hint-auto-update-sensors+ :%sdl)
  (export '%sdl::haptic-index :%sdl)
  (export '%sdl::+actctx-run-level-as-invoker+ :%sdl)
  (export '%sdl::ceil :%sdl)
  (export '%sdl::create-window-from :%sdl)
  (export '%sdl::set-window-size :%sdl)
  (export '%sdl::set-pixel-format-palette :%sdl)
  (export '%sdl::update-window-surface :%sdl)
  (export '%sdl::w-param :%sdl)
  (export '%sdl::+monitor-request-reason-policy-change+ :%sdl)
  (export '%sdl::+last-sleep-time+ :%sdl)
  (export '%sdl::+haptic-inertia+ :%sdl)
  (export '%sdl::+win-network-service-sid+ :%sdl)
  (export '%sdl::+displayconfig-mode-info-type-desktop-image+ :%sdl)
  (export '%sdl::+swsurface+ :%sdl)
  (export '%sdl::sensor-update :%sdl)
  (export '%sdl::get-num-allocations :%sdl)
  (export '%sdl::+%mm-perm-dbac+ :%sdl)
  (export '%sdl::hid-get-indexed-string :%sdl)
  (export '%sdl::+inline+ :%sdl)
  (export '%sdl::ceilf :%sdl)
  (export '%sdl::+processor-power-policy-current+ :%sdl)
  (export '%sdl::hid-open :%sdl)
  (export '%sdl::display-mode :%sdl)
  (export '%sdl::log-warn :%sdl)
  (export '%sdl::+button-x1+ :%sdl)
  (export '%sdl::|C:@EA@SDL-KEY-CODE| :%sdl)
  (export '%sdl::close-audio-device :%sdl)
  (export '%sdl::f-point :%sdl)
  (export '%sdl::get-scancode-from-key :%sdl)
  (export '%sdl::+hint-enable-steam-controllers+ :%sdl)
  (export '%sdl::+virtual-joystick-desc-version+ :%sdl)
  (export '%sdl::+main-declspec+ :%sdl)
  (export '%sdl::+hint-ios-hide-home-indicator+ :%sdl)
  (export '%sdl::l-param :%sdl)
  (export '%sdl::cbutton :%sdl)
  (export '%sdl::+hint-windows-no-close-on-alt-f4+ :%sdl)
  (export '%sdl::+system-monitor-hiber-boot-power-off+ :%sdl)
  (export '%sdl::audio-cvt :%sdl)
  (export '%sdl::gshift :%sdl)
  (export '%sdl::+system-wake-source+ :%sdl)
  (export '%sdl::+hint-audio-device-app-name+ :%sdl)
  (export '%sdl::uint16 :%sdl)
  (export '%sdl::sensor-open :%sdl)
  (export '%sdl::set-surface-alpha-mod :%sdl)
  (export '%sdl::clear-queued-audio :%sdl)
  (export '%sdl::scalbnf :%sdl)
  (export '%sdl::+%mm-perm-ccdc+ :%sdl)
  (export '%sdl::+hint-video-mac-fullscreen-spaces+ :%sdl)
  (export '%sdl::intersect-f-rect :%sdl)
  (export '%sdl::iconv-open :%sdl)
  (export '%sdl::get-window-maximum-size :%sdl)
  (export '%sdl::pfn-sdl-current-end-thread :%sdl)
  (export '%sdl::filters :%sdl)
  (export '%sdl::+%mm-perm-baaa+ :%sdl)
  (export '%sdl::get-window-from-id :%sdl)
  (export '%sdl::+processor-idle-states+ :%sdl)
  (export '%sdl::+win-null-sid+ :%sdl)
  (export '%sdl::+%mm-perm-bccb+ :%sdl)
  (export '%sdl::list-blitmap :%sdl)
  (export '%sdl::+%mm-perm-bbdd+ :%sdl)
  (export '%sdl::+%mm-perm-adbc+ :%sdl)
  (export '%sdl::get-current-video-driver :%sdl)
  (export '%sdl::+hint-allow-topmost+ :%sdl)
  (export '%sdl::+haptic-friction+ :%sdl)
  (export '%sdl::offset :%sdl)
  (export '%sdl::utf8strlen :%sdl)
  (export '%sdl::+hint-x11-force-override-redirect+ :%sdl)
  (export '%sdl::render-draw-point :%sdl)
  (export '%sdl::joystick-instance-id :%sdl)
  (export '%sdl::|C:@UA@SDL-WINDOW-SHAPE-PARAMS| :%sdl)
  (export '%sdl::create-software-renderer :%sdl)
  (export '%sdl::set-event-filter :%sdl)
  (export '%sdl::+init-gamecontroller+ :%sdl)
  (export '%sdl::+win-medium-plus-label-sid+ :%sdl)
  (export '%sdl::+monitor-request-reason-max+ :%sdl)
  (export '%sdl::+power-windows+ :%sdl)
  (export '%sdl::surface :%sdl)
  (export '%sdl::+displayconfig-topology-external+ :%sdl)
  (export '%sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3705|
          :%sdl)
  (export '%sdl::+%mm-perm-dbdc+ :%sdl)
  (export '%sdl::+monitor-request-reason-po-set-system-state+ :%sdl)
  (export '%sdl::+%mm-perm-baca+ :%sdl)
  (export '%sdl::%sdl-haptic :%sdl)
  (export '%sdl::audio-format :%sdl)
  (export '%sdl::ramp :%sdl)
  (export '%sdl::|C:@EA@SDL-EVENT-TYPE| :%sdl)
  (export '%sdl::+%mm-perm-daac+ :%sdl)
  (export '%sdl::+video-vulkan+ :%sdl)
  (export '%sdl::+rwops-stdfile+ :%sdl)
  (export '%sdl::+min-sint64+ :%sdl)
  (export '%sdl::+%mm-perm-bcdb+ :%sdl)
  (export '%sdl::+system-hiber-file-information+ :%sdl)
  (export '%sdl::malloc-func :%sdl)
  (export '%sdl::joystick-get-guid-string :%sdl)
  (export '%sdl::game-controller-type-for-index :%sdl)
  (export '%sdl::get-texture-color-mod :%sdl)
  (export '%sdl::disable-screen-saver :%sdl)
  (export '%sdl::get-render-target :%sdl)
  (export '%sdl::|C:@EA@SDL-HINT-PRIORITY| :%sdl)
  (export '%sdl::get-current-audio-driver :%sdl)
  (export '%sdl::+%mm-perm-adac+ :%sdl)
  (export '%sdl::+%mm-perm-aacd+ :%sdl)
  (export '%sdl::filter-index :%sdl)
  (export '%sdl::+%mm-perm-ddcd+ :%sdl)
  (export '%sdl::+hint-video-minimize-on-focus-loss+ :%sdl)
  (export '%sdl::num-sensors :%sdl)
  (export '%sdl::+%mm-perm-dbcb+ :%sdl)
  (export '%sdl::+displayconfig-pixelformat-32bpp+ :%sdl)
  (export '%sdl::joystick-update :%sdl)
  (export '%sdl::+%mm-perm-cdda+ :%sdl)
  (export '%sdl::free-func :%sdl)
  (export '%sdl::|C:@EA@SDL-DUMMY-ENUM| :%sdl)
  (export '%sdl::left :%sdl)
  (export '%sdl::+hint-android-block-on-pause+ :%sdl)
  (export '%sdl::%sdl-audio-stream :%sdl)
  (export '%sdl::+displayconfig-device-info-get-adapter-name+ :%sdl)
  (export '%sdl::get-platform :%sdl)
  (export '%sdl::unregister-app :%sdl)
  (export '%sdl::bmask :%sdl)
  (export '%sdl::+hint-joystick-rog-chakram+ :%sdl)
  (export '%sdl::guid :%sdl)
  (export '%sdl::len :%sdl)
  (export '%sdl::callback :%sdl)
  (export '%sdl::+%mm-mant-sign-zero+ :%sdl)
  (export '%sdl::get-error-msg :%sdl)
  (export '%sdl::+hint-emscripten-asyncify+ :%sdl)
  (export '%sdl::axis-mask :%sdl)
  (export '%sdl::|C:@S@SDL-SYS-W-MMSG@U@SDL-SYSWM.H@3845@S@SDL-SYSWM.H@3903|
          :%sdl)
  (export '%sdl::get-audio-device-spec :%sdl)
  (export '%sdl::+%mm-perm-dcad+ :%sdl)
  (export '%sdl::+hint-audio-device-stream-role+ :%sdl)
  (export '%sdl::strrchr :%sdl)
  (export '%sdl::+system-power-policy-ac+ :%sdl)
  (export '%sdl::+hint-wave-riff-chunk-size+ :%sdl)
  (export '%sdl::get-key-from-scancode :%sdl)
  (export '%sdl::render-set-logical-size :%sdl)
  (export '%sdl::minimize-window :%sdl)
  (export '%sdl::render-get-scale :%sdl)
  (export '%sdl::eventaction :%sdl)
  (export '%sdl::set-error :%sdl)
  (export '%sdl::isblank :%sdl)
  (export '%sdl::+session-power-init+ :%sdl)
  (export '%sdl::haptic-set-gain :%sdl)
  (export '%sdl::+monitor-request-reason-idle-timeout+ :%sdl)
  (export '%sdl::render-get-metal-layer :%sdl)
  (export '%sdl::+win-builtin-rds-remote-access-servers-sid+ :%sdl)
  (export '%sdl::+system-power-capabilities+ :%sdl)
  (export '%sdl::aloss :%sdl)
  (export '%sdl::+hint-wave-fact-chunk+ :%sdl)
  (export '%sdl::+loadso-windows+ :%sdl)
  (export '%sdl::syswm-type :%sdl)
  (export '%sdl::get-window-mouse-grab :%sdl)
  (export '%sdl::get-base-path :%sdl)
  (export '%sdl::nbuttons :%sdl)
  (export '%sdl::|C:@S@SDL-GAME-CONTROLLER-BUTTON-BIND@U@SDL-GAMECONTROLLER.H@2918@S@SDL-GAMECONTROLLER.H@2976|
          :%sdl)
  (export '%sdl::+rwops-winfile+ :%sdl)
  (export '%sdl::|C:@EA@SDL-MESSAGE-BOX-FLAGS| :%sdl)
  (export '%sdl::+verify-system-policy-ac+ :%sdl)
  (export '%sdl::lower-blit :%sdl)
  (export '%sdl::lround :%sdl)
  (export '%sdl::write-le16 :%sdl)
  (export '%sdl::+hint-windows-force-semaphore-kernel+ :%sdl)
  (export '%sdl::set-cursor :%sdl)
  (export '%sdl::write-le32 :%sdl)
  (export '%sdl::on-application-will-resign-active :%sdl)
  (export '%sdl::pixel-format :%sdl)
  (export '%sdl::audio-quit :%sdl)
  (export '%sdl::create-shaped-window :%sdl)
  (export '%sdl::metal-create-view :%sdl)
  (export '%sdl::+win-authentication-authority-asserted-sid+ :%sdl)
  (export '%sdl::crc32 :%sdl)
  (export '%sdl::pixel-format-enum-to-masks :%sdl)
  (export '%sdl::game-controller-has-rumble :%sdl)
  (export '%sdl::+haptic-status+ :%sdl)
  (export '%sdl::joystick-get-device-player-index :%sdl)
  (export '%sdl::on-application-will-enter-foreground :%sdl)
  (export '%sdl::+hint-gamecontrollertype+ :%sdl)
  (export '%sdl::+session-rit-state+ :%sdl)
  (export '%sdl::islower :%sdl)
  (export '%sdl::set-surface-palette :%sdl)
  (export '%sdl::+po-condition-maximum+ :%sdl)
  (export '%sdl::+pr-is64+ :%sdl)
  (export '%sdl::+%mm-perm-cadd+ :%sdl)
  (export '%sdl::+%mm-perm-cddc+ :%sdl)
  (export '%sdl::+%mm-mant-sign-nan+ :%sdl)
  (export '%sdl::+session-power-cleanup+ :%sdl)
  (export '%sdl::mix-audio-format :%sdl)
  (export '%sdl::len-ratio :%sdl)
  (export '%sdl::atan :%sdl)
  (export '%sdl::+%mm-perm-cbac+ :%sdl)
  (export '%sdl::joystick-num-axes :%sdl)
  (export '%sdl::+displayconfig-scanline-ordering-interlaced+ :%sdl)
  (export '%sdl::render-fill-rect-f :%sdl)
  (export '%sdl::+system-power-policy-dc+ :%sdl)
  (export '%sdl::sensor-from-instance-id :%sdl)
  (export '%sdl::+textinputevent-text-size+ :%sdl)
  (export '%sdl::|C:@EA@SDL-SCANCODE| :%sdl)
  (export '%sdl::+displayconfig-scanline-ordering-progressive+ :%sdl)
  (export '%sdl::+displayconfig-topology-internal+ :%sdl)
  (export '%sdl::haptic-condition :%sdl)
  (export '%sdl::render-copy-ex-f :%sdl)
  (export '%sdl::event :%sdl)
  (export '%sdl::sys-wm-event :%sdl)
  (export '%sdl::log10f :%sdl)
  (export '%sdl::strtol :%sdl)
  (export '%sdl::realloc-func :%sdl)
  (export '%sdl::+%mm-perm-bbac+ :%sdl)
  (export '%sdl::write :%sdl)
  (export '%sdl::+win-builtin-guests-sid+ :%sdl)
  (export '%sdl::+%mm-perm-cacd+ :%sdl)
  (export '%sdl::+hint-xinput-enabled+ :%sdl)
  (export '%sdl::+hint-joystick-hidapi-ps5-rumble+ :%sdl)
  (export '%sdl::+win-local-account-sid+ :%sdl)
  (export '%sdl::get-keyboard-focus :%sdl)
  (export '%sdl::+displayconfig-scanline-ordering-interlaced-upperfieldfirst+
          :%sdl)
  (export '%sdl::joy-device-event :%sdl)
  (export '%sdl::bsearch :%sdl)
  (export '%sdl::get-relative-mouse-state :%sdl)
  (export '%sdl::+win-terminal-server-sid+ :%sdl)
  (export '%sdl::+%mm-perm-daad+ :%sdl)
  (export '%sdl::+%mm-perm-ddba+ :%sdl)
  (export '%sdl::set-palette-colors :%sdl)
  (export '%sdl::+last-resume-performance+ :%sdl)
  (export '%sdl::+processor-information-ex+ :%sdl)
  (export '%sdl::+%mm-perm-cddd+ :%sdl)
  (export '%sdl::+%mm-perm-accc+ :%sdl)
  (export '%sdl::always-ignore :%sdl)
  (export '%sdl::+cacheline-size+ :%sdl)
  (export '%sdl::|C:@SA@SDL-MESSAGE-BOX-DATA| :%sdl)
  (export '%sdl::+displayconfig-output-technology-other+ :%sdl)
  (export '%sdl::rw-from-fp :%sdl)
  (export '%sdl::|C:@EA@SDL-YUV-CONVERSION-MODE| :%sdl)
  (export '%sdl::+hint-display-usable-bounds+ :%sdl)
  (export '%sdl::display :%sdl)
  (export '%sdl::pow :%sdl)
  (export '%sdl::+%mm-perm-dbba+ :%sdl)
  (export '%sdl::buttonid :%sdl)
  (export '%sdl::+actctx-run-level-require-admin+ :%sdl)
  (export '%sdl::+assert-state+ :%sdl)
  (export '%sdl::strncasecmp :%sdl)
  (export '%sdl::+processor-perf-states-hv+ :%sdl)
  (export '%sdl::message-box-color-type :%sdl)
  (export '%sdl::+%mm-perm-bddc+ :%sdl)
  (export '%sdl::clear-composition :%sdl)
  (export '%sdl::+win-builtin-perf-logging-users-sid+ :%sdl)
  (export '%sdl::lock-texture-to-surface :%sdl)
  (export '%sdl::get-texture-scale-mode :%sdl)
  (export '%sdl::virtual-joystick-desc :%sdl)
  (export '%sdl::+haptic-spring+ :%sdl)
  (export '%sdl::+win-account-domain-admins-sid+ :%sdl)
  (export '%sdl::thread-priority :%sdl)
  (export '%sdl::floor :%sdl)
  (export '%sdl::+%mm-perm-adad+ :%sdl)
  (export '%sdl::+win-builtin-i-users-sid+ :%sdl)
  (export '%sdl::haptic-effect-supported :%sdl)
  (export '%sdl::data :%sdl)
  (export '%sdl::+min-sint8+ :%sdl)
  (export '%sdl::joystick-get-device-type :%sdl)
  (export '%sdl::read-be64 :%sdl)
  (export '%sdl::gl-unload-library :%sdl)
  (export '%sdl::gl-bind-texture :%sdl)
  (export '%sdl::sensor-get-device-non-portable-type :%sdl)
  (export '%sdl::needed :%sdl)
  (export '%sdl::haptic-num-effects-playing :%sdl)
  (export '%sdl::+%mm-perm-aacc+ :%sdl)
  (export '%sdl::sem-wait-timeout :%sdl)
  (export '%sdl::adevice :%sdl)
  (export '%sdl::+%mm-perm-cdcb+ :%sdl)
  (export '%sdl::+hint-video-double-buffer+ :%sdl)
  (export '%sdl::+hint-video-x11-window-visualid+ :%sdl)
  (export '%sdl::+hint-vita-touch-mouse-device+ :%sdl)
  (export '%sdl::atomic-cas-ptr :%sdl)
  (export '%sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3337@S@SDL-RWOPS.H@3416|
          :%sdl)
  (export '%sdl::+audio-driver-winmm+ :%sdl)
  (export '%sdl::uint64 :%sdl)
  (export '%sdl::render-get-clip-rect :%sdl)
  (export '%sdl::game-controller-get-num-touchpad-fingers :%sdl)
  (export '%sdl::load-file :%sdl)
  (export '%sdl::+null-while-loop-condition+ :%sdl)
  (export '%sdl::+%mm-perm-dccb+ :%sdl)
  (export '%sdl::+button-rmask+ :%sdl)
  (export '%sdl::+init-sensor+ :%sdl)
  (export '%sdl::remove-timer :%sdl)
  (export '%sdl::+%mm-perm-adaa+ :%sdl)
  (export '%sdl::get-performance-frequency :%sdl)
  (export '%sdl::sensor-get-name :%sdl)
  (export '%sdl::+verify-processor-power-policy-ac+ :%sdl)
  (export '%sdl::+%mm-perm-acab+ :%sdl)
  (export '%sdl::ctouchpad :%sdl)
  (export '%sdl::set-surface-blend-mode :%sdl)
  (export '%sdl::+monitor-request-reason-ac-dc-display-burst+ :%sdl)
  (export '%sdl::is-tablet :%sdl)
  (export '%sdl::+win-builtin-users-sid+ :%sdl)
  (export '%sdl::+%mm-cmpint-unused+ :%sdl)
  (export '%sdl::+win-high-label-sid+ :%sdl)
  (export '%sdl::serial-number :%sdl)
  (export '%sdl::game-controller-open :%sdl)
  (export '%sdl::has-sse3 :%sdl)
  (export '%sdl::+button-x1mask+ :%sdl)
  (export '%sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176| :%sdl)
  (export '%sdl::+po-hot+ :%sdl)
  (export '%sdl::+user-presence+ :%sdl)
  (export '%sdl::+%mm-perm-dabb+ :%sdl)
  (export '%sdl::enclose-f-points :%sdl)
  (export '%sdl::send-effect :%sdl)
  (export '%sdl::+hint-video-highdpi-disabled+ :%sdl)
  (export '%sdl::direct3d9get-adapter-index :%sdl)
  (export '%sdl::seek :%sdl)
  (export '%sdl::+displayconfig-pixelformat-16bpp+ :%sdl)
  (export '%sdl::+hint-return-key-hides-ime+ :%sdl)
  (export '%sdl::iconv-close :%sdl)
  (export '%sdl::+%mm-mant-norm-p75-1p5+ :%sdl)
  (export '%sdl::+displayconfig-output-technology-hdmi+ :%sdl)
  (export '%sdl::+displayconfig-scaling-custom+ :%sdl)
  (export '%sdl::+displayconfig-output-technology-sdtvdongle+ :%sdl)
  (export '%sdl::message-box-data :%sdl)
  (export '%sdl::+max-sint8+ :%sdl)
  (export '%sdl::mode :%sdl)
  (export '%sdl::qsort :%sdl)
  (export '%sdl::wchar-t :%sdl)
  (export '%sdl::function :%sdl)
  (export '%sdl::text :%sdl)
  (export '%sdl::+%mm-perm-cdbb+ :%sdl)
  (export '%sdl::+%mm-perm-cdbd+ :%sdl)
  (export '%sdl::drop-event :%sdl)
  (export '%sdl::+win-builtin-network-configuration-operators-sid+
          :%sdl)
  (export '%sdl::set-window-modal-for :%sdl)
  (export '%sdl::+hint-joystick-hidapi-switch-home-led+ :%sdl)
  (export '%sdl::type :%sdl)
  (export '%sdl::render-draw-points :%sdl)
  (export '%sdl::hdc :%sdl)
  (export '%sdl::+power-action-none+ :%sdl)
  (export '%sdl::has-sse :%sdl)
  (export '%sdl::|C:@SA@SDL-MESSAGE-BOX-COLOR| :%sdl)
  (export '%sdl::+get-power-request-list+ :%sdl)
  (export '%sdl::product-string :%sdl)
  (export '%sdl::setenv :%sdl)
  (export '%sdl::calloc-func :%sdl)
  (export '%sdl::+win-builtin-incoming-forest-trust-builders-sid+
          :%sdl)
  (export '%sdl::+hint-windows-enable-messageloop+ :%sdl)
  (export '%sdl::timer-id :%sdl)
  (export '%sdl::vasprintf :%sdl)
  (export '%sdl::sensor-type :%sdl)
  (export '%sdl::dequeue-audio :%sdl)
  (export '%sdl::+win-this-organization-certificate-sid+ :%sdl)
  (export '%sdl::gl-load-library :%sdl)
  (export '%sdl::render-get-metal-command-encoder :%sdl)
  (export '%sdl::+%mm-perm-bbbb+ :%sdl)
  (export '%sdl::+%mm-perm-abac+ :%sdl)
  (export '%sdl::+%mm-perm-ddbb+ :%sdl)
  (export '%sdl::+system-hiber-file-size+ :%sdl)
  (export '%sdl::new-audio-stream :%sdl)
  (export '%sdl::key-code :%sdl)
  (export '%sdl::+power-information-level-maximum+ :%sdl)
  (export '%sdl::+%mm-perm-bbad+ :%sdl)
  (export '%sdl::+hint-audio-category+ :%sdl)
  (export '%sdl::main :%sdl)
  (export '%sdl::log-error :%sdl)
  (export '%sdl::message-box-flags :%sdl)
  (export '%sdl::rumble-triggers :%sdl)
  (export '%sdl::+power-shutdown-notification+ :%sdl)
  (export '%sdl::read-be16 :%sdl)
  (export '%sdl::+pdc-invocation+ :%sdl)
  (export '%sdl::|C:@EA@SDL-DISPLAY-EVENT-ID| :%sdl)
  (export '%sdl::get-video-driver :%sdl)
  (export '%sdl::wait-thread :%sdl)
  (export '%sdl::+button-left+ :%sdl)
  (export '%sdl::+blit-scaled+ :%sdl)
  (export '%sdl::+%mm-perm-cbca+ :%sdl)
  (export '%sdl::read :%sdl)
  (export '%sdl::asin :%sdl)
  (export '%sdl::+hat-right+ :%sdl)
  (export '%sdl::+power-action-shutdown-reset+ :%sdl)
  (export '%sdl::render-fill-rects :%sdl)
  (export '%sdl::+%mm-perm-dddc+ :%sdl)
  (export '%sdl::timer-callback :%sdl)
  (export '%sdl::|C:@EA@SDL-WINDOW-FLAGS| :%sdl)
  (export '%sdl::+win-local-logon-sid+ :%sdl)
  (export '%sdl::+hint-video-x11-force-egl+ :%sdl)
  (export '%sdl::destroy-mutex :%sdl)
  (export '%sdl::wheel :%sdl)
  (export '%sdl::sensor-event :%sdl)
  (export '%sdl::+hint-gamecontrollerconfig+ :%sdl)
  (export '%sdl::+hint-audio-device-stream-name+ :%sdl)
  (export '%sdl::haptic-open-from-mouse :%sdl)
  (export '%sdl::isdigit :%sdl)
  (export '%sdl::+hint-joystick-hidapi+ :%sdl)
  (export '%sdl::+displayconfig-scaling-stretched+ :%sdl)
  (export '%sdl::+%mm-perm-aaca+ :%sdl)
  (export '%sdl::soft-stretch-linear :%sdl)
  (export '%sdl::+%mm-perm-bccd+ :%sdl)
  (export '%sdl::+%mm-perm-bcca+ :%sdl)
  (export '%sdl::+pr-is32+ :%sdl)
  (export '%sdl::+enable+ :%sdl)
  (export '%sdl::render-logical-to-window :%sdl)
  (export '%sdl::+hint-qtwayland-content-orientation+ :%sdl)
  (export '%sdl::controller-axis-event :%sdl)
  (export '%sdl::+hint-linux-hat-deadzones+ :%sdl)
  (export '%sdl::gloss :%sdl)
  (export '%sdl::sensor :%sdl)
  (export '%sdl::+%mm-perm-dcca+ :%sdl)
  (export '%sdl::+%mm-cmpint-nle+ :%sdl)
  (export '%sdl::get-renderer-info :%sdl)
  (export '%sdl::unlock-texture :%sdl)
  (export '%sdl::has-clipboard-text :%sdl)
  (export '%sdl::unknown :%sdl)
  (export '%sdl::+power-setting-notification-name+ :%sdl)
  (export '%sdl::+joystick-dinput+ :%sdl)
  (export '%sdl::logf :%sdl)
  (export '%sdl::+system-execution-state+ :%sdl)
  (export '%sdl::nhats :%sdl)
  (export '%sdl::+%mm-perm-aadc+ :%sdl)
  (export '%sdl::+patchlevel+ :%sdl)
  (export '%sdl::+displayconfig-device-info-set-advanced-color-state+
          :%sdl)
  (export '%sdl::+%mm-perm-cdac+ :%sdl)
  (export '%sdl::joystick-get-device-guid :%sdl)
  (export '%sdl::game-controller-mapping-for-guid :%sdl)
  (export '%sdl::+hint-audiodriver+ :%sdl)
  (export '%sdl::thread-id :%sdl)
  (export '%sdl::spin-lock :%sdl)
  (export '%sdl::colors :%sdl)
  (export '%sdl::get-key-from-name :%sdl)
  (export '%sdl::+haptic-steering-axis+ :%sdl)
  (export '%sdl::+alpha-opaque+ :%sdl)
  (export '%sdl::name :%sdl)
  (export '%sdl::+%mm-perm-bbbd+ :%sdl)
  (export '%sdl::+%mm-perm-aacb+ :%sdl)
  (export '%sdl::language :%sdl)
  (export '%sdl::update-nv-texture :%sdl)
  (export '%sdl::+%mm-perm-addd+ :%sdl)
  (export '%sdl::|C:@EA@SDL-THREAD-PRIORITY| :%sdl)
  (export '%sdl::id3d11device :%sdl)
  (export '%sdl::+%mm-perm-dccd+ :%sdl)
  (export '%sdl::+%mm-perm-cbbd+ :%sdl)
  (export '%sdl::simd-get-alignment :%sdl)
  (export '%sdl::+%mm-perm-aabd+ :%sdl)
  (export '%sdl::blend-operation :%sdl)
  (export '%sdl::message-box-color-scheme :%sdl)
  (export '%sdl::+hint-mouse-relative-mode-warp+ :%sdl)
  (export '%sdl::rmask :%sdl)
  (export '%sdl::hid-send-feature-report :%sdl)
  (export '%sdl::tls-get :%sdl)
  (export '%sdl::pitch :%sdl)
  (export '%sdl::strtod :%sdl)
  (export '%sdl::game-controller-mapping-for-index :%sdl)
  (export '%sdl::+hint-apple-tv-remote-allow-rotation+ :%sdl)
  (export '%sdl::+displayconfig-device-info-get-support-virtual-resolution+
          :%sdl)
  (export '%sdl::flush-events :%sdl)
  (export '%sdl::iscntrl :%sdl)
  (export '%sdl::+major-version+ :%sdl)
  (export '%sdl::+main-handled+ :%sdl)
  (export '%sdl::add-hint-callback :%sdl)
  (export '%sdl::haptic-stop-effect :%sdl)
  (export '%sdl::+joystick-axis-max+ :%sdl)
  (export '%sdl::free :%sdl)
  (export '%sdl::cond-wait-timeout :%sdl)
  (export '%sdl::sensor-get-device-name :%sdl)
  (export '%sdl::country :%sdl)
  (export '%sdl::+win-account-policy-admins-sid+ :%sdl)
  (export '%sdl::create-rgb-surface :%sdl)
  (export '%sdl::+hint-windows-dpi-scaling+ :%sdl)
  (export '%sdl::get-memory-functions :%sdl)
  (export '%sdl::sym :%sdl)
  (export '%sdl::base :%sdl)
  (export '%sdl::+hint-joystick-hidapi-gamecube+ :%sdl)
  (export '%sdl::exp :%sdl)
  (export '%sdl::has-alti-vec :%sdl)
  (export '%sdl::unlock-audio-device :%sdl)
  (export '%sdl::r-wsize :%sdl)
  (export '%sdl::toupper :%sdl)
  (export '%sdl::joy-ball-event :%sdl)
  (export '%sdl::flags :%sdl)
  (export '%sdl::get-audio-status :%sdl)
  (export '%sdl::large-magnitude :%sdl)
  (export '%sdl::reset-keyboard :%sdl)
  (export '%sdl::mouse-wheel-event :%sdl)
  (export '%sdl::+assert-level+ :%sdl)
  (export '%sdl::interface-number :%sdl)
  (export '%sdl::game-controller-has-rumble-triggers :%sdl)
  (export '%sdl::is-text-input-shown :%sdl)
  (export '%sdl::+rleaccel+ :%sdl)
  (export '%sdl::get-revision-number :%sdl)
  (export '%sdl::get-yuv-conversion-mode-for-resolution :%sdl)
  (export '%sdl::+hint-render-logical-size-mode+ :%sdl)
  (export '%sdl::+po-dc+ :%sdl)
  (export '%sdl::+displayconfig-output-technology-miracast+ :%sdl)
  (export '%sdl::cos :%sdl)
  (export '%sdl::has-neon :%sdl)
  (export '%sdl::+apply-low-power-scenario-settings+ :%sdl)
  (export '%sdl::+win-authentication-key-property-mfa-sid+ :%sdl)
  (export '%sdl::set-window-keyboard-grab :%sdl)
  (export '%sdl::strtoul :%sdl)
  (export '%sdl::+win-builtin-authorization-access-sid+ :%sdl)
  (export '%sdl::yuv-conversion-mode :%sdl)
  (export '%sdl::acos :%sdl)
  (export '%sdl::game-controller-name :%sdl)
  (export '%sdl::attack-length :%sdl)
  (export '%sdl::+%mm-perm-adcd+ :%sdl)
  (export '%sdl::strlen :%sdl)
  (export '%sdl::get-closest-display-mode :%sdl)
  (export '%sdl::haptic-rumble-supported :%sdl)
  (export '%sdl::+haptic-custom+ :%sdl)
  (export '%sdl::+%mm-perm-acbd+ :%sdl)
  (export '%sdl::+hint-android-apk-expansion-main-file-version+
          :%sdl)
  (export '%sdl::joystick-num-buttons :%sdl)
  (export '%sdl::hid-ble-scan :%sdl)
  (export '%sdl::len-mult :%sdl)
  (export '%sdl::|C:@EA@SDL-HIT-TEST-RESULT| :%sdl)
  (export '%sdl::code :%sdl)
  (export '%sdl::rumble :%sdl)
  (export '%sdl::joystick-is-haptic :%sdl)
  (export '%sdl::+metalview-tag+ :%sdl)
  (export '%sdl::+call+ :%sdl)
  (export '%sdl::csensor :%sdl)
  (export '%sdl::+floatwordorder+ :%sdl)
  (export '%sdl::+windowpos-undefined-mask+ :%sdl)
  (export '%sdl::set-assertion-handler :%sdl)
  (export '%sdl::has-armsimd :%sdl)
  (export '%sdl::render-window-to-logical :%sdl)
  (export '%sdl::+audiocvt-packed+ :%sdl)
  (export '%sdl::+lt-dont-care+ :%sdl)
  (export '%sdl::get-window-surface :%sdl)
  (export '%sdl::refcount :%sdl)
  (export '%sdl::+%mm-perm-dcdb+ :%sdl)
  (export '%sdl::restore-window :%sdl)
  (export '%sdl::+displayconfig-pixelformat-24bpp+ :%sdl)
  (export '%sdl::+mutex-maxwait+ :%sdl)
  (export '%sdl::get-ticks :%sdl)
  (export '%sdl::+hint-ime-support-extended-text+ :%sdl)
  (export '%sdl::fmodf :%sdl)
  (export '%sdl::+win-local-account-and-administrator-sid+ :%sdl)
  (export '%sdl::+hint-windows-disable-thread-naming+ :%sdl)
  (export '%sdl::+%mm-perm-dadb+ :%sdl)
  (export '%sdl::joystick-get-guid :%sdl)
  (export '%sdl::game-controller-button-bind :%sdl)
  (export '%sdl::set-thread-priority :%sdl)
  (export '%sdl::create-cursor :%sdl)
  (export '%sdl::scalbn :%sdl)
  (export '%sdl::haptic-name :%sdl)
  (export '%sdl::game-controller-mapping-for-device-index :%sdl)
  (export '%sdl::log-critical :%sdl)
  (export '%sdl::joystick-get-button :%sdl)
  (export '%sdl::set-texture-alpha-mod :%sdl)
  (export '%sdl::+displayconfig-mode-info-type-target+ :%sdl)
  (export '%sdl::+rw-seek-end+ :%sdl)
  (export '%sdl::here :%sdl)
  (export '%sdl::+win-capability-contacts-sid+ :%sdl)
  (export '%sdl::error :%sdl)
  (export '%sdl::has-lasx :%sdl)
  (export '%sdl::rate-incr :%sdl)
  (export '%sdl::get-touch-device-type :%sdl)
  (export '%sdl::joystick-attach-virtual-ex :%sdl)
  (export '%sdl::tfinger :%sdl)
  (export '%sdl::bind-type :%sdl)
  (export '%sdl::system-cursor :%sdl)
  (export '%sdl::r-wread :%sdl)
  (export '%sdl::+displayconfig-device-info-force-uint32+ :%sdl)
  (export '%sdl::periodic :%sdl)
  (export '%sdl::texture-access :%sdl)
  (export '%sdl::+hint-video-x11-xinerama+ :%sdl)
  (export '%sdl::update-yuv-texture :%sdl)
  (export '%sdl::+hint-mouse-relative-speed-scale+ :%sdl)
  (export '%sdl::+%mm-perm-cabb+ :%sdl)
  (export '%sdl::game-controller-get-button-from-string :%sdl)
  (export '%sdl::+hint-video-wayland-mode-emulation+ :%sdl)
  (export '%sdl::get-window-grab :%sdl)
  (export '%sdl::+%mm-perm-caab+ :%sdl)
  (export '%sdl::joy-hat-event :%sdl)
  (export '%sdl::set-window-hit-test :%sdl)
  (export '%sdl::haptic-opened :%sdl)
  (export '%sdl::+win-account-enterprise-admins-sid+ :%sdl)
  (export '%sdl::close :%sdl)
  (export '%sdl::blend-mode :%sdl)
  (export '%sdl::hat :%sdl)
  (export '%sdl::set-window-title :%sdl)
  (export '%sdl::window-flags :%sdl)
  (export '%sdl::+win-capability-enterprise-authentication-sid+
          :%sdl)
  (export '%sdl::+displayconfig-device-info-set-target-persistence+
          :%sdl)
  (export '%sdl::+scanf-format-string+ :%sdl)
  (export '%sdl::game-controller-has-sensor :%sdl)
  (export '%sdl::game-controller-axis :%sdl)
  (export '%sdl::text-editing-event :%sdl)
  (export '%sdl::+win-builtin-power-users-sid+ :%sdl)
  (export '%sdl::+hint-videodriver+ :%sdl)
  (export '%sdl::+%mm-perm-dadd+ :%sdl)
  (export '%sdl::precise-x :%sdl)
  (export '%sdl::get-window-gamma-ramp :%sdl)
  (export '%sdl::pressure :%sdl)
  (export '%sdl::|C:@EA@SDL-EVENTACTION| :%sdl)
  (export '%sdl::|C:@SA@SDL-DISPLAY-MODE| :%sdl)
  (export '%sdl::+pressed+ :%sdl)
  (export '%sdl::jdevice :%sdl)
  (export '%sdl::+deprecated+ :%sdl)
  (export '%sdl::+win-builtin-rds-management-servers-sid+ :%sdl)
  (export '%sdl::set-window-mouse-rect :%sdl)
  (export '%sdl::+monitor-request-reason-remote-connection+ :%sdl)
  (export '%sdl::|C:@EA@SDL-SENSOR-TYPE| :%sdl)
  (export '%sdl::create-rgb-surface-with-format-from :%sdl)
  (export '%sdl::left-sat :%sdl)
  (export '%sdl::+%mm-perm-dcbd+ :%sdl)
  (export '%sdl::+user-present+ :%sdl)
  (export '%sdl::+win-builtin-administrators-sid+ :%sdl)
  (export '%sdl::cursor :%sdl)
  (export '%sdl::gl-extension-supported :%sdl)
  (export '%sdl::+%mm-perm-aaad+ :%sdl)
  (export '%sdl::+hat-centered+ :%sdl)
  (export '%sdl::+%mm-perm-acda+ :%sdl)
  (export '%sdl::+displayconfig-output-technology-force-uint32+
          :%sdl)
  (export '%sdl::fmod :%sdl)
  (export '%sdl::+win-batch-sid+ :%sdl)
  (export '%sdl::+win-account-ras-and-ias-servers-sid+ :%sdl)
  (export '%sdl::get-display-bounds :%sdl)
  (export '%sdl::+platform-information+ :%sdl)
  (export '%sdl::thread-function :%sdl)
  (export '%sdl::audio-status :%sdl)
  (export '%sdl::get-window-keyboard-grab :%sdl)
  (export '%sdl::haptic :%sdl)
  (export '%sdl::window-event :%sdl)
  (export '%sdl::maximize-window :%sdl)
  (export '%sdl::+monitor-request-reason-power-button+ :%sdl)
  (export '%sdl::get-rgb :%sdl)
  (export '%sdl::interval :%sdl)
  (export '%sdl::+touch-mouseid+ :%sdl)
  (export '%sdl::+win-write-restricted-code-sid+ :%sdl)
  (export '%sdl::game-controller-has-led :%sdl)
  (export '%sdl::+hint-joystick-hidapi-switch-player-led+ :%sdl)
  (export '%sdl::iscapture :%sdl)
  (export '%sdl::padding :%sdl)
  (export '%sdl::cond-broadcast :%sdl)
  (export '%sdl::get-surface-color-mod :%sdl)
  (export '%sdl::|C:@EA@SDL-LOG-CATEGORY| :%sdl)
  (export '%sdl::lock-audio-device :%sdl)
  (export '%sdl::get-num-display-modes :%sdl)
  (export '%sdl::+%mm-perm-bcbd+ :%sdl)
  (export '%sdl::assertion-handler :%sdl)
  (export '%sdl::get-thread-name :%sdl)
  (export '%sdl::get-thread-id :%sdl)
  (export '%sdl::+hint-render-vsync+ :%sdl)
  (export '%sdl::+noreturn+ :%sdl)
  (export '%sdl::render-get-d3d9device :%sdl)
  (export '%sdl::round :%sdl)
  (export '%sdl::+hint-joystick-hidapi-nintendo-classic+ :%sdl)
  (export '%sdl::write-be16 :%sdl)
  (export '%sdl::+%mm-perm-adbb+ :%sdl)
  (export '%sdl::peep-events :%sdl)
  (export '%sdl::uitoa :%sdl)
  (export '%sdl::+hint-joystick-hidapi-shield+ :%sdl)
  (export '%sdl::+max-uint32+ :%sdl)
  (export '%sdl::+hint-winrt-handle-back-button+ :%sdl)
  (export '%sdl::+%mm-perm-ccbb+ :%sdl)
  (export '%sdl::enclose-points :%sdl)
  (export '%sdl::release-number :%sdl)
  (export '%sdl::strtokr :%sdl)
  (export '%sdl::set-window-fullscreen :%sdl)
  (export '%sdl::+displayconfig-rotation-rotate180+ :%sdl)
  (export '%sdl::+hint-kmsdrm-require-drm-master+ :%sdl)
  (export '%sdl::|C:@EA@WINDOW-SHAPE-MODE| :%sdl)
  (export '%sdl::game-controller-add-mapping :%sdl)
  (export '%sdl::rshift :%sdl)
  (export '%sdl::joystick-set-led :%sdl)
  (export '%sdl::r-wops :%sdl)
  (export '%sdl::+button-x2+ :%sdl)
  (export '%sdl::+default-compartment-id+ :%sdl)
  (export '%sdl::gl-get-current-context :%sdl)
  (export '%sdl::try-lock-mutex :%sdl)
  (export '%sdl::+win-builtin-pre-windows2000compatible-access-sid+
          :%sdl)
  (export '%sdl::get-cpu-count :%sdl)
  (export '%sdl::point :%sdl)
  (export '%sdl::+%mm-perm-cadb+ :%sdl)
  (export '%sdl::set-main-ready :%sdl)
  (export '%sdl::|C:@SA@SDL-MESSAGE-BOX-COLOR-SCHEME| :%sdl)
  (export '%sdl::+power-action-shutdown-off+ :%sdl)
  (export '%sdl::+hint-android-trap-back-button+ :%sdl)
  (export '%sdl::hid-close :%sdl)
  (export '%sdl::+%mm-perm-bbdb+ :%sdl)
  (export '%sdl::free-surface :%sdl)
  (export '%sdl::+%mm-perm-dbad+ :%sdl)
  (export '%sdl::src-format :%sdl)
  (export '%sdl::convert-surface-format :%sdl)
  (export '%sdl::poll-event :%sdl)
  (export '%sdl::|C:@EA@SDL-G-LPROFILE| :%sdl)
  (export '%sdl::joystick-has-rumble :%sdl)
  (export '%sdl::get-ticks64 :%sdl)
  (export '%sdl::g-lprofile :%sdl)
  (export '%sdl::log10 :%sdl)
  (export '%sdl::+win-builtin-storage-replica-admins-sid+ :%sdl)
  (export '%sdl::|C:@EA@SDL-BLEND-OPERATION| :%sdl)
  (export '%sdl::+win-enterprise-readonly-controllers-sid+ :%sdl)
  (export '%sdl::create-system-cursor :%sdl)
  (export '%sdl::has-intersection-f :%sdl)
  (export '%sdl::unused :%sdl)
  (export '%sdl::sqrtf :%sdl)
  (export '%sdl::memcpy :%sdl)
  (export '%sdl::+audio-driver-wasapi+ :%sdl)
  (export '%sdl::+displayconfig-output-technology-svideo+ :%sdl)
  (export '%sdl::create-texture :%sdl)
  (export '%sdl::copysign :%sdl)
  (export '%sdl::+win-nt-authority-sid+ :%sdl)
  (export '%sdl::+%mm-perm-bccc+ :%sdl)
  (export '%sdl::quit-event :%sdl)
  (export '%sdl::get-current-display-mode :%sdl)
  (export '%sdl::+logical-processor-idling+ :%sdl)
  (export '%sdl::get-yuv-conversion-mode :%sdl)
  (export '%sdl::+haptic-spherical+ :%sdl)
  (export '%sdl::hidden :%sdl)
  (export '%sdl::+%mm-perm-dbca+ :%sdl)
  (export '%sdl::+max-uint64+ :%sdl)
  (export '%sdl::haptic-left-right :%sdl)
  (export '%sdl::joystick-num-balls :%sdl)
  (export '%sdl::upper-blit-scaled :%sdl)
  (export '%sdl::+win-creator-owner-server-sid+ :%sdl)
  (export '%sdl::push-event :%sdl)
  (export '%sdl::locked :%sdl)
  (export '%sdl::%sdl-joystick :%sdl)
  (export '%sdl::+filesystem-windows+ :%sdl)
  (export '%sdl::joystick-get-guid-from-string :%sdl)
  (export '%sdl::set-window-data :%sdl)
  (export '%sdl::+fallthrough+ :%sdl)
  (export '%sdl::get-assertion-report :%sdl)
  (export '%sdl::+hint-video-window-share-pixel-format+ :%sdl)
  (export '%sdl::+win-creator-group-sid+ :%sdl)
  (export '%sdl::+hint-windows-use-d3d9ex+ :%sdl)
  (export '%sdl::+power-action-sleep+ :%sdl)
  (export '%sdl::+released+ :%sdl)
  (export '%sdl::render-set-clip-rect :%sdl)
  (export '%sdl::render-copy-f :%sdl)
  (export '%sdl::pfn-sdl-current-begin-thread :%sdl)
  (export '%sdl::+hint-mouse-relative-mode-center+ :%sdl)
  (export '%sdl::clip-rect :%sdl)
  (export '%sdl::+dontfree+ :%sdl)
  (export '%sdl::+%mm-perm-dabc+ :%sdl)
  (export '%sdl::sensor-close :%sdl)
  (export '%sdl::gl-make-current :%sdl)
  (export '%sdl::get-audio-driver :%sdl)
  (export '%sdl::+hint-mouse-auto-capture+ :%sdl)
  (export '%sdl::haptic-open-from-joystick :%sdl)
  (export '%sdl::+%mm-perm-dacc+ :%sdl)
  (export '%sdl::+%mm-perm-ccdb+ :%sdl)
  (export '%sdl::game-controller-rumble-triggers :%sdl)
  (export '%sdl::errorcode :%sdl)
  (export '%sdl::+%mm-perm-cbcd+ :%sdl)
  (export '%sdl::palette :%sdl)
  (export '%sdl::+%mm-perm-cccb+ :%sdl)
  (export '%sdl::get-render-driver-info :%sdl)
  (export '%sdl::atomic-cas :%sdl)
  (export '%sdl::+%mm-perm-dbbd+ :%sdl)
  (export '%sdl::+min-uint16+ :%sdl)
  (export '%sdl::+hint-mouse-double-click-radius+ :%sdl)
  (export '%sdl::mod :%sdl)
  (export '%sdl::haptic-num-axes :%sdl)
  (export '%sdl::report-assertion :%sdl)
  (export '%sdl::game-controller-get-string-for-button :%sdl)
  (export '%sdl::+win-cacheable-principals-group-sid+ :%sdl)
  (export '%sdl::capture-mouse :%sdl)
  (export '%sdl::mouse-button-event :%sdl)
  (export '%sdl::windows-message-hook :%sdl)
  (export '%sdl::+win-digest-authentication-sid+ :%sdl)
  (export '%sdl::get-touch-device :%sdl)
  (export '%sdl::joystick-get-axis :%sdl)
  (export '%sdl::haptic-ramp :%sdl)
  (export '%sdl::set-relative-mouse-mode :%sdl)
  (export '%sdl::+%mm-cmpint-le+ :%sdl)
  (export '%sdl::joystick-name-for-index :%sdl)
  (export '%sdl::copysignf :%sdl)
  (export '%sdl::game-controller-button :%sdl)
  (export '%sdl::game-controller-type :%sdl)
  (export '%sdl::getenv :%sdl)
  (export '%sdl::+lt-lowest-latency+ :%sdl)
  (export '%sdl::+%mm-perm-accb+ :%sdl)
  (export '%sdl::+hint-joystick-hidapi-ps4+ :%sdl)
  (export '%sdl::has-sse2 :%sdl)
  (export '%sdl::roundf :%sdl)
  (export '%sdl::wait-event-timeout :%sdl)
  (export '%sdl::set-mod-state :%sdl)
  (export '%sdl::utf8strnlen :%sdl)
  (export '%sdl::center :%sdl)
  (export '%sdl::+hint-mouse-relative-warp-motion+ :%sdl)
  (export '%sdl::gl-context :%sdl)
  (export '%sdl::+%mm-perm-badd+ :%sdl)
  (export '%sdl::joystick-get-hat :%sdl)
  (export '%sdl::has-avx :%sdl)
  (export '%sdl::+processor-state-handler+ :%sdl)
  (export '%sdl::joy-battery-event :%sdl)
  (export '%sdl::syswm :%sdl)
  (export '%sdl::render-read-pixels :%sdl)
  (export '%sdl::+assert-data+ :%sdl)
  (export '%sdl::key :%sdl)
  (export '%sdl::+power-action-shutdown+ :%sdl)
  (export '%sdl::get-pixel-format-name :%sdl)
  (export '%sdl::get-default-audio-info :%sdl)
  (export '%sdl::|C:@EA@SDL-SCALE-MODE| :%sdl)
  (export '%sdl::+displayconfig-topology-extend+ :%sdl)
  (export '%sdl::+%mm-perm-dcdd+ :%sdl)
  (export '%sdl::+processor-cap+ :%sdl)
  (export '%sdl::controller-device-event :%sdl)
  (export '%sdl::+haptic-infinity+ :%sdl)
  (export '%sdl::+hint-gamecontrollerconfig-file+ :%sdl)
  (export '%sdl::+system-video-state+ :%sdl)
  (export '%sdl::fabsf :%sdl)
  (export '%sdl::+%mm-perm-adcc+ :%sdl)
  (export '%sdl::wcsncasecmp :%sdl)
  (export '%sdl::gmask :%sdl)
  (export '%sdl::destroy-window :%sdl)
  (export '%sdl::get-window-position :%sdl)
  (export '%sdl::+%mm-perm-daba+ :%sdl)
  (export '%sdl::+win-untrusted-label-sid+ :%sdl)
  (export '%sdl::+monitor-request-reason-screen-off-request+ :%sdl)
  (export '%sdl::game-controller-is-sensor-enabled :%sdl)
  (export '%sdl::alloc-rw :%sdl)
  (export '%sdl::+win-anonymous-sid+ :%sdl)
  (export '%sdl::game-controller-event-state :%sdl)
  (export '%sdl::+%mm-perm-bddd+ :%sdl)
  (export '%sdl::+win-builtin-backup-operators-sid+ :%sdl)
  (export '%sdl::+%mm-perm-cbba+ :%sdl)
  (export '%sdl::+texteditingevent-text-size+ :%sdl)
  (export '%sdl::get-relative-mouse-mode :%sdl)
  (export '%sdl::+win-local-sid+ :%sdl)
  (export '%sdl::+displayconfig-output-technology-hd15+ :%sdl)
  (export '%sdl::joystick-power-level :%sdl)
  (export '%sdl::period :%sdl)
  (export '%sdl::flash-operation :%sdl)
  (export '%sdl::atomic-add :%sdl)
  (export '%sdl::+processor-perf-states+ :%sdl)
  (export '%sdl::init-sub-system :%sdl)
  (export '%sdl::metal-view :%sdl)
  (export '%sdl::|C:@S@SDL-R-WOPS@U@SDL-RWOPS.H@3176@S@SDL-RWOPS.H@3337|
          :%sdl)
  (export '%sdl::unlock-sensors :%sdl)
  (export '%sdl::gl-get-swap-interval :%sdl)
  (export '%sdl::+%mm-perm-cacc+ :%sdl)
  (export '%sdl::manufacturer-string :%sdl)
  (export '%sdl::+joystick-axis-min+ :%sdl)
  (export '%sdl::haptic-run-effect :%sdl)
  (export '%sdl::+hint-x11-window-type+ :%sdl)
  (export '%sdl::get-system-ram :%sdl)
  (export '%sdl::lparam :%sdl)
  (export '%sdl::uint32 :%sdl)
  (export '%sdl::+pr-iu32+ :%sdl)
  (export '%sdl::phase :%sdl)
  (export '%sdl::+hint-video-external-context+ :%sdl)
  (export '%sdl::joystick-get-product-version :%sdl)
  (export '%sdl::+%mm-perm-cbaa+ :%sdl)
  (export '%sdl::+hint-accelerometer-as-joystick+ :%sdl)
  (export '%sdl::+%mm-perm-ccda+ :%sdl)
  (export '%sdl::|C:@EA@SDL-GAME-CONTROLLER-TYPE| :%sdl)
  (export '%sdl::+hint-joystick-gamecube-rumble-brake+ :%sdl)
  (export '%sdl::+%mm-mant-sign-src+ :%sdl)
  (export '%sdl::+actctx-compatibility-element-type-unknown+ :%sdl)
  (export '%sdl::+%mm-perm-badc+ :%sdl)
  (export '%sdl::+%mm-perm-cada+ :%sdl)
  (export '%sdl::game-controller-has-axis :%sdl)
  (export '%sdl::is-game-controller :%sdl)
  (export '%sdl::+%mm-perm-adca+ :%sdl)
  (export '%sdl::+displayconfig-output-technology-indirect-virtual+
          :%sdl)
  (export '%sdl::malloc :%sdl)
  (export '%sdl::+haptic-xinput+ :%sdl)
  (export '%sdl::+%mm-perm-cbad+ :%sdl)
  (export '%sdl::+%mm-perm-bdaa+ :%sdl)
  (export '%sdl::+hint-render-line-method+ :%sdl)
  (export '%sdl::+hint-kmsdrm-device-index+ :%sdl)
  (export '%sdl::+%mm-perm-abab+ :%sdl)
  (export '%sdl::+win-builtin-default-system-managed-group-sid+
          :%sdl)
  (export '%sdl::get-color-key :%sdl)
  (export '%sdl::get-window-icc-profile :%sdl)
  (export '%sdl::hid-init :%sdl)
  (export '%sdl::raise-window :%sdl)
  (export '%sdl::+simd-aligned+ :%sdl)
  (export '%sdl::haptic-unpause :%sdl)
  (export '%sdl::load-bmp-rw :%sdl)
  (export '%sdl::|C:@EA@SDL-BITMAP-ORDER| :%sdl)
  (export '%sdl::multi-gesture-event :%sdl)
  (export '%sdl::+query+ :%sdl)
  (export '%sdl::has-color-key :%sdl)
  (export '%sdl::subsystem :%sdl)
  (export '%sdl::+displayconfig-output-technology-lvds+ :%sdl)
  (export '%sdl::+%mm-perm-dabd+ :%sdl)
  (export '%sdl::set-clipboard-text :%sdl)
  (export '%sdl::snprintf :%sdl)
  (export '%sdl::+hint-joystick-hidapi-joy-cons+ :%sdl)
  (export '%sdl::+button-lmask+ :%sdl)
  (export '%sdl::|C:@EA@SDL-PACKED-ORDER| :%sdl)
  (export '%sdl::+%mm-perm-abad+ :%sdl)
  (export '%sdl::game-controller-from-player-index :%sdl)
  (export '%sdl::joystick-get-ball :%sdl)
  (export '%sdl::+%mm-perm-dccc+ :%sdl)
  (export '%sdl::+get-power-setting-value+ :%sdl)
  (export '%sdl::get-mouse-focus :%sdl)
  (export '%sdl::+user-not-present+ :%sdl)
  (export '%sdl::g-lcontext-flag :%sdl)
  (export '%sdl::open-url :%sdl)
  (export '%sdl::touchpad :%sdl)
  (export '%sdl::+%mm-perm-bdac+ :%sdl)
  (export '%sdl::hid-free-enumeration :%sdl)
  (export '%sdl::on-application-did-enter-background :%sdl)
  (export '%sdl::get-display-dpi :%sdl)
  (export '%sdl::strupr :%sdl)
  (export '%sdl::+%mm-perm-ccad+ :%sdl)
  (export '%sdl::+prealloc+ :%sdl)
  (export '%sdl::mouse-wheel-direction :%sdl)
  (export '%sdl::id3d12device :%sdl)
  (export '%sdl::common-event :%sdl)
  (export '%sdl::|C:@EA@SDL-ASSERT-STATE| :%sdl)
  (export '%sdl::tan :%sdl)
  (export '%sdl::audio-stream-available :%sdl)
  (export '%sdl::append :%sdl)
  (export '%sdl::dummy-enum :%sdl)
  (export '%sdl::+video-render-d3d+ :%sdl)
  (export '%sdl::+win-console-logon-sid+ :%sdl)
  (export '%sdl::+button-mmask+ :%sdl)
  (export '%sdl::audio-init :%sdl)
  (export '%sdl::log-set-priority :%sdl)
  (export '%sdl::get-pref-path :%sdl)
  (export '%sdl::+win-account-cloneable-controllers-sid+ :%sdl)
  (export '%sdl::set-window-gamma-ramp :%sdl)
  (export '%sdl::+win-dialup-sid+ :%sdl)
  (export '%sdl::scancode :%sdl)
  (export '%sdl::+function+ :%sdl)
  (export '%sdl::right-sat :%sdl)
  (export '%sdl::set-texture-blend-mode :%sdl)
  (export '%sdl::simd-free :%sdl)
  (export '%sdl::hat-mask :%sdl)
  (export '%sdl::+haptic-sine+ :%sdl)
  (export '%sdl::wcslcpy :%sdl)
  (export '%sdl::premultiply-alpha :%sdl)
  (export '%sdl::hid-device-change-count :%sdl)
  (export '%sdl::+processor-set-idle+ :%sdl)
  (export '%sdl::+%mm-perm-bacb+ :%sdl)
  (export '%sdl::joystick-has-rumble-triggers :%sdl)
  (export '%sdl::joystick-type :%sdl)
  (export '%sdl::get-touch-name :%sdl)
  (export '%sdl::main-func :%sdl)
  (export '%sdl::+win-application-package-authority-sid+ :%sdl)
  (export '%sdl::sinf :%sdl)
  (export '%sdl::log-get-priority :%sdl)
  (export '%sdl::+displayconfig-device-info-set-support-virtual-resolution+
          :%sdl)
  (export '%sdl::+%mm-perm-cbcc+ :%sdl)
  (export '%sdl::+%mm-perm-baac+ :%sdl)
  (export '%sdl::game-controller-add-mappings-from-rw :%sdl)
  (export '%sdl::tlsid :%sdl)
  (export '%sdl::metal-get-drawable-size :%sdl)
  (export '%sdl::+windowpos-undefined+ :%sdl)
  (export '%sdl::+%mm-perm-aadb+ :%sdl)
  (export '%sdl::+hint-linux-joystick-classic+ :%sdl)
  (export '%sdl::condition :%sdl)
  (export '%sdl::+%mm-perm-bcdc+ :%sdl)
  (export '%sdl::+win-interactive-sid+ :%sdl)
  (export '%sdl::+audiocvt-max-filters+ :%sdl)
  (export '%sdl::+hint-touch-mouse-events+ :%sdl)
  (export '%sdl::joystick-send-effect :%sdl)
  (export '%sdl::simd-alloc :%sdl)
  (export '%sdl::pixel-type :%sdl)
  (export '%sdl::game-controller-set-player-index :%sdl)
  (export '%sdl::render-is-clip-enabled :%sdl)
  (export '%sdl::+%mm-perm-acbb+ :%sdl)
  (export '%sdl::+displayconfig-rotation-force-uint32+ :%sdl)
  (export '%sdl::game-controller-close :%sdl)
  (export '%sdl::fade-level :%sdl)
  (export '%sdl::packed-layout :%sdl)
  (export '%sdl::atan2 :%sdl)
  (export '%sdl::r-wwrite :%sdl)
  (export '%sdl::+audio-mask-signed+ :%sdl)
  (export '%sdl::set-texture-user-data :%sdl)
  (export '%sdl::pause-audio-device :%sdl)
  (export '%sdl::keyboard-event :%sdl)
  (export '%sdl::wcsdup :%sdl)
  (export '%sdl::+%mm-mant-norm-p5-2+ :%sdl)
  (export '%sdl::display-event :%sdl)
  (export '%sdl::joystick-set-player-index :%sdl)
  (export '%sdl::+joystick-hidapi+ :%sdl)
  (export '%sdl::audio-device-event :%sdl)
  (export '%sdl::+win-ntlm-authentication-sid+ :%sdl)
  (export '%sdl::sensor-get-type :%sdl)
  (export '%sdl::controller-button-event :%sdl)
  (export '%sdl::render-draw-lines-f :%sdl)
  (export '%sdl::mouse-is-haptic :%sdl)
  (export '%sdl::leftright :%sdl)
  (export '%sdl::+%mm-perm-dbda+ :%sdl)
  (export '%sdl::buffer :%sdl)
  (export '%sdl::get-window-mouse-rect :%sdl)
  (export '%sdl::+hat-rightdown+ :%sdl)
  (export '%sdl::+prix64+ :%sdl)
  (export '%sdl::hid-enumerate :%sdl)
  (export '%sdl::sensor-get-non-portable-type :%sdl)
  (export '%sdl::+min-uint32+ :%sdl)
  (export '%sdl::isprint :%sdl)
  (export '%sdl::+%mm-perm-cbcb+ :%sdl)
  (export '%sdl::+passed-beginthread-endthread+ :%sdl)
  (export '%sdl::gl-get-attribute :%sdl)
  (export '%sdl::+hint-audio-resampling-mode+ :%sdl)
  (export '%sdl::+%mm-cmpint-eq+ :%sdl)
  (export '%sdl::clicks :%sdl)
  (export '%sdl::free-rw :%sdl)
  (export '%sdl::+displayconfig-output-technology-sdi+ :%sdl)
  (export '%sdl::+size-max+ :%sdl)
  (export '%sdl::sensor-get-device-type :%sdl)
  (export '%sdl::audio-device-id :%sdl)
  (export '%sdl::+%mm-perm-abbd+ :%sdl)
  (export '%sdl::log-verbose :%sdl)
  (export '%sdl::jbutton :%sdl)
  (export '%sdl::lock-texture :%sdl)
  (export '%sdl::+%mm-perm-cdcc+ :%sdl)
  (export '%sdl::+%mm-perm-cacb+ :%sdl)
  (export '%sdl::+hint-gamecontroller-ignore-devices-except+ :%sdl)
  (export '%sdl::+%mm-perm-dcdc+ :%sdl)
  (export '%sdl::+administrator-power-policy+ :%sdl)
  (export '%sdl::+%mm-perm-cbbc+ :%sdl)
  (export '%sdl::set-window-resizable :%sdl)
  (export '%sdl::finger :%sdl)
  (export '%sdl::+%mm-perm-abdb+ :%sdl)
  (export '%sdl::+%mm-perm-cabd+ :%sdl)
  (export '%sdl::+displayconfig-scanline-ordering-interlaced-lowerfieldfirst+
          :%sdl)
  (export '%sdl::+%mm-perm-adda+ :%sdl)
  (export '%sdl::+%mm-perm-baba+ :%sdl)
  (export '%sdl::level :%sdl)
  (export '%sdl::dummy :%sdl)
  (export '%sdl::+%mm-perm-acac+ :%sdl)
  (export '%sdl::sint64 :%sdl)
  (export '%sdl::joystick-get-device-vendor :%sdl)
  (export '%sdl::sys-w-mmsg :%sdl)
  (export '%sdl::+displayconfig-output-technology-composite-video+
          :%sdl)
  (export '%sdl::d-dist :%sdl)
  (export '%sdl::+compiledversion+ :%sdl)
  (export '%sdl::+set-power-setting-value+ :%sdl)
  (export '%sdl::get-assertion-handler :%sdl)
  (export '%sdl::get-window-minimum-size :%sdl)
  (export '%sdl::memcmp :%sdl)
  (export '%sdl::get-version :%sdl)
  (export '%sdl::+session-connect-notification+ :%sdl)
  (export '%sdl::+%mm-cmpint-nlt+ :%sdl)
  (export '%sdl::cond-signal :%sdl)
  (export '%sdl::+system-power-logging-entry+ :%sdl)
  (export '%sdl::gl-get-drawable-size :%sdl)
  (export '%sdl::+%mm-perm-bbca+ :%sdl)
  (export '%sdl::trigger-count :%sdl)
  (export '%sdl::+displayconfig-output-technology-internal+ :%sdl)
  (export '%sdl::+%mm-perm-aaaa+ :%sdl)
  (export '%sdl::+displayconfig-output-technology-dvi+ :%sdl)
  (export '%sdl::+big-endian+ :%sdl)
  (export '%sdl::strtoll :%sdl)
  (export '%sdl::game-controller-get-product :%sdl)
  (export '%sdl::load-object :%sdl)
  (export '%sdl::get-display-mode :%sdl)
  (export '%sdl::scale-mode :%sdl)
  (export '%sdl::finger-id :%sdl)
  (export '%sdl::max-texture-height :%sdl)
  (export '%sdl::game-controller-update :%sdl)
  (export '%sdl::get-audio-device-status :%sdl)
  (export '%sdl::+unspecified-compartment-id+ :%sdl)
  (export '%sdl::lltoa :%sdl)
  (export '%sdl::+win-world-sid+ :%sdl)
  (export '%sdl::is-shaped-window :%sdl)
  (export '%sdl::+audio-mask-datatype+ :%sdl)
  (export '%sdl::+%mm-perm-abda+ :%sdl)
  (export '%sdl::+%mm-perm-dbdb+ :%sdl)
  (export '%sdl::tex-coord :%sdl)
  (export '%sdl::|C:@EA@SDL-KEYMOD| :%sdl)
  (export '%sdl::create-mutex :%sdl)
  (export '%sdl::add-timer :%sdl)
  (export '%sdl::game-controller-set-sensor-enabled :%sdl)
  (export '%sdl::+hint-windows-force-mutex-critical-sections+ :%sdl)
  (export '%sdl::|C:@EA@SDL-PIXEL-FORMAT-ENUM| :%sdl)
  (export '%sdl::silence :%sdl)
  (export '%sdl::render-copy :%sdl)
  (export '%sdl::|C:@EA@SDL-PACKED-LAYOUT| :%sdl)
  (export '%sdl::window :%sdl)
  (export '%sdl::+%mm-perm-ddab+ :%sdl)
  (export '%sdl::cdevice :%sdl)
  (export '%sdl::get-surface-alpha-mod :%sdl)
  (export '%sdl::log-message-v :%sdl)
  (export '%sdl::joystick-open :%sdl)
  (export '%sdl::+timer-windows+ :%sdl)
  (export '%sdl::intersect-f-rect-and-line :%sdl)
  (export '%sdl::+audio-allow-any-change+ :%sdl)
  (export '%sdl::joystick-get-serial :%sdl)
  (export '%sdl::|C:@EA@SDL-DISPLAY-ORIENTATION| :%sdl)
  (export '%sdl::a :%sdl)
  (export '%sdl::get-display-orientation :%sdl)
  (export '%sdl::ultoa :%sdl)
  (export '%sdl::+%mm-perm-adba+ :%sdl)
  (export '%sdl::get-window-display-index :%sdl)
  (export '%sdl::+hint-linux-digital-hats+ :%sdl)
  (export '%sdl::+hint-mac-background-app+ :%sdl)
  (export '%sdl::|C:@EA@SDL-GAME-CONTROLLER-BUTTON| :%sdl)
  (export '%sdl::open-audio :%sdl)
  (export '%sdl::text-input-event :%sdl)
  (export '%sdl::get-renderer :%sdl)
  (export '%sdl::get-hint-boolean :%sdl)
  (export '%sdl::controller-sensor-event :%sdl)
  (export '%sdl::+system-reserve-hiber-file+ :%sdl)
  (export '%sdl::+%mm-perm-dbbc+ :%sdl)
  (export '%sdl::+hint-windows-dpi-awareness+ :%sdl)
  (export '%sdl::record-gesture :%sdl)
  (export '%sdl::+hint-mac-ctrl-click-emulate-right-click+ :%sdl)
  (export '%sdl::get-scancode-name :%sdl)
  (export '%sdl::+prix32+ :%sdl)
  (export '%sdl::+suspend-resume-invocation+ :%sdl)
  (export '%sdl::+%mm-perm-dcbc+ :%sdl)
  (export '%sdl::sensor-get-device-instance-id :%sdl)
  (export '%sdl::+system-power-policy-current+ :%sdl)
  (export '%sdl::sem-wait :%sdl)
  (export '%sdl::+audio-driver-dsound+ :%sdl)
  (export '%sdl::numbuttons :%sdl)
  (export '%sdl::video-quit :%sdl)
  (export '%sdl::filter-events :%sdl)
  (export '%sdl::+%mm-perm-dbcc+ :%sdl)
  (export '%sdl::hid-get-product-string :%sdl)
  (export '%sdl::get-default-cursor :%sdl)
  (export '%sdl::+trace-application-power-message-end+ :%sdl)
  (export '%sdl::audio-stream-flush :%sdl)
  (export '%sdl::+%mm-perm-ccaa+ :%sdl)
  (export '%sdl::+%mm-perm-aaac+ :%sdl)
  (export '%sdl::+%mm-perm-bcbb+ :%sdl)
  (export '%sdl::+%mm-perm-ddaa+ :%sdl)
  (export '%sdl::+hint-timer-resolution+ :%sdl)
  (export '%sdl::free-cursor :%sdl)
  (export '%sdl::sem :%sdl)
  (export '%sdl::+hint-joystick-hidapi-joycon-home-led+ :%sdl)
  (export '%sdl::+win-builtin-remote-management-users-sid+ :%sdl)
  (export '%sdl::gl-delete-context :%sdl)
  (export '%sdl::attack-level :%sdl)
  (export '%sdl::joystick-set-virtual-button :%sdl)
  (export '%sdl::has-intersection :%sdl)
  (export '%sdl::+win-medium-label-sid+ :%sdl)
  (export '%sdl::lower-blit-scaled :%sdl)
  (export '%sdl::touch-device-type :%sdl))

